syntax = 'proto3';
package stabilityai.platformapis.project.v1;
option go_package = "github.com/stability-ai/api-interfaces/gen/proto/go/stabilityai/platformapis/project/v1;projectv1";
import "stabilityai/platformapis/generation/v1/generation.proto";

enum ProjectAccess {
  PROJECT_ACCESS_PRIVATE = 0; // Private access, only owner organization can access
  PROJECT_ACCESS_PUBLIC = 1;  // Public access, anyone can access
}

enum ProjectStatus {
  PROJECT_STATUS_INACTIVE = 0; // Inactive project
  PROJECT_STATUS_ACTIVE = 1;   // Active project
  PROJECT_STATUS_DELETED = 2;  // Deleted project, only set by delete endpoint
}

enum ProjectAssetUse {
  PROJECT_ASSET_USE_UNDEFINED = 0;    // Asset does not have use defined
  PROJECT_ASSET_USE_INPUT = 1;        // Asset is used as an input for the project
  PROJECT_ASSET_USE_OUTPUT = 2;       // Asset is an output from the project
  PROJECT_ASSET_USE_INTERMEDIATE = 3; // Asset is an output from an intermediate step of the project
  PROJECT_ASSET_USE_PROJECT = 4;      // Asset is used as the project file for the project
}

enum ProjectSortDir {
  PROJECT_SORT_DIR_UNSPECIFIED = 0; // Sort direction is not specified, uses default
  PROJECT_SORT_DIR_ASC = 1;         // Sort in ascending order
  PROJECT_SORT_DIR_DESC = 2;        // Sort in descending order
}

message ProjectAsset {
  string id = 1;                // ID of the asset, UUIDv4
  string uri = 2;               // The URI to the asset
  ProjectAssetUse use = 3;      // The use of the asset with respect to the project
  string name = 4;              // The name of the asset
  uint64 size = 5;              // The asset size in bytes
  uint64 created_at = 6;        // Time of asset creation (UTC seconds epoch)
  uint64 updated_at = 7;        // Time of last asset update (UTC seconds epoch)
  stabilityai.platformapis.generation.v1.Request request = 8;          // The request object that is associated with the artifact
  map<string, string> tags = 9; // The tags associated with the asset
}

message Project {
  string id = 1;                     // ID of the project, UUIDv4
  string title = 2;                  // Title of the project
  string owner_id = 3;               // The ID of the organization owning the project
  ProjectAccess access = 4;          // The access of the project (such as public vs private)
  ProjectStatus status = 5;          // The status of the project (such as active vs inactive)
  uint64 size = 6;                   // The size of the project in bytes
  ProjectAsset file = 7;             // Project file for the project
  uint64 created_at = 8;             // Time of project creation (UTC seconds epoch)
  uint64 updated_at = 9;             // Time of last project update (UTC seconds epoch)
  repeated ProjectAsset assets = 10; // The listing of all assets associated with the project
}

message CreateProjectRequest {
  string title = 1;               // title of the project
  optional string owner_id = 2;   // The ID of the organization owning the project, empty for default org for user
  ProjectAccess access = 3;       // The access of the project (such as public vs private)
  ProjectStatus status = 4;       // The status of the project (such as active vs inactive)
  optional ProjectAsset file = 5; // Project file for the project (if existing, else will create)
}

message UpdateProjectRequest {
  string id = 1;                     // ID of the project, UUIDv4
  optional string owner_id = 2;      // The ID of the organization owning the project, empty for default org for user
  optional string title = 3;         // Title of the project
  optional ProjectAccess access = 4; // The access of the project (such as public vs private)
  optional ProjectStatus status = 5; // The status of the project (such as active vs inactive)
  optional ProjectAsset file = 6;    // Project file for the project
}

message ListProjectRequest {
  optional string owner_id = 1; // The ID of the organization owning the project, empty for default org for user
}

message GetProjectRequest {
  string id = 1;                // ID of the project to request, UUIDv4, empty string uses default project
  optional string owner_id = 2; // The ID of the organization owning the project, empty for default org for user
}

message DeleteProjectRequest {
  string id = 1;                // ID of the project to request, UUIDv4
  optional string owner_id = 2; // The ID of the organization owning the project, empty for default org for user
}

message QueryAssetsRequest {
  string id = 1;                    // ID of the project to request, UUIDv4, empty string uses default project
  optional string owner_id = 2;     // The ID of the organization owning the assets, unset for default org for user
  optional uint64 since = 3;        // The time (UTC seconds epoch) to start listing assets from, unset for no restriction
  optional uint64 until = 4;        // The time (UTC seconds epoch) to stop listing assets at, unset for no restriction
  optional uint64 limit = 5;        // The maximum number of assets to return, unset for no limit
  optional string start_key = 6;    // The key to start from, used to paginate results, unset for no offset
  repeated ProjectAssetUse use = 7; // The asset usage to filter the assets returned, empty for no filter
  ProjectSortDir sort_dir = 8;      // The sort direction based on asset creation time, default is descending
  map<string, string> tags = 9;     // The tag values used to filter the assets returned, empty for no filter
}

message QueryAssetsResponse {
  repeated ProjectAsset assets = 1; // The assets returned by the query
  optional string last_key = 2;     // The last asset key returned when the results were limited, unset when not limited
}

message TagAssetsRequest {
  string id = 1;                 // ID of the project to request, UUIDv4, empty string uses default project
  optional string owner_id = 2;  // The ID of the organization owning the assets, unset for default org for user
  repeated string asset_ids = 3; // The IDs of the assets to tag in the project, UUIDv4, limit 1000
  map<string, string> tags = 4;  // The tags to add to the assets
}

message TagAssetsResponse {
  string id = 1;                 // ID of the project, UUIDv4
  string owner_id = 2;           // The ID of the organization owning the project
  repeated string asset_ids = 3; // The IDs of the assets updated in the project, UUIDv4, limit 1000
}

message UntagAssetsRequest {
  string id = 1;                 // ID of the project to request, UUIDv4, empty string uses default project
  optional string owner_id = 2;  // The ID of the organization owning the assets, unset for default org for user
  repeated string asset_ids = 3; // The IDs of the assets to tag in the project, UUIDv4, limit 1000
  repeated string tag_keys = 4;  // The keys of the tags to remove from the assets
}

message UntagAssetsResponse {
  string id = 1;                 // ID of the project, UUIDv4
  string owner_id = 2;           // The ID of the organization owning the project
  repeated string asset_ids = 3; // The IDs of the assets updated in the project, UUIDv4, limit 1000
}

message DeleteAssetsRequest {
  string id = 1;                 // ID of the project to request, UUIDv4, empty string uses default project
  optional string owner_id = 2;  // The ID of the organization owning the project, unset for default org for user
  repeated string asset_ids = 3; // The IDs of the assets to delete from the project, UUIDv4, limit 1000
}

message DeleteAssetsResponse {
  string id = 1;                 // ID of the project, UUIDv4
  string owner_id = 2;           // The ID of the organization owning the project
  repeated string asset_ids = 3; // The IDs of the assets deleted from the project, UUIDv4, limit 1000
}

//
// gRPC services
//
service ProjectService {
  // Create a new project if it does not exist
  rpc Create (CreateProjectRequest) returns (Project) {};
  // Update an existing project
  rpc Update (UpdateProjectRequest) returns (Project) {};
  // List all the projects for an organization
  rpc List (ListProjectRequest) returns (stream Project) {};
  // Get a project
  rpc Get (GetProjectRequest) returns (Project) {};
  // Delete a project
  rpc Delete (DeleteProjectRequest) returns (Project) {};
  // Add or remove tags from an asset
  rpc TagAssets (TagAssetsRequest) returns (TagAssetsResponse) {};
  rpc UntagAssets (UntagAssetsRequest) returns (UntagAssetsResponse) {};
  // Query the assets of a project, with additional filtering
  rpc QueryAssets (QueryAssetsRequest) returns (QueryAssetsResponse) {};
  // Delete one or more assets of a project
  rpc DeleteAssets (DeleteAssetsRequest) returns (DeleteAssetsResponse) {};
}
