// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: stability_api/platform/finetuning/finetuning.proto

package finetuningconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	finetuning "github.com/stability-ai/api-interfaces/src/stability_api/platform/finetuning"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// FineTuningServiceName is the fully-qualified name of the FineTuningService service.
	FineTuningServiceName = "gooseai.FineTuningService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FineTuningServiceCreateModelProcedure is the fully-qualified name of the FineTuningService's
	// CreateModel RPC.
	FineTuningServiceCreateModelProcedure = "/gooseai.FineTuningService/CreateModel"
	// FineTuningServiceGetModelProcedure is the fully-qualified name of the FineTuningService's
	// GetModel RPC.
	FineTuningServiceGetModelProcedure = "/gooseai.FineTuningService/GetModel"
	// FineTuningServiceUpdateModelProcedure is the fully-qualified name of the FineTuningService's
	// UpdateModel RPC.
	FineTuningServiceUpdateModelProcedure = "/gooseai.FineTuningService/UpdateModel"
	// FineTuningServiceDeleteModelProcedure is the fully-qualified name of the FineTuningService's
	// DeleteModel RPC.
	FineTuningServiceDeleteModelProcedure = "/gooseai.FineTuningService/DeleteModel"
	// FineTuningServiceResubmitModelProcedure is the fully-qualified name of the FineTuningService's
	// ResubmitModel RPC.
	FineTuningServiceResubmitModelProcedure = "/gooseai.FineTuningService/ResubmitModel"
	// FineTuningServiceListModelsProcedure is the fully-qualified name of the FineTuningService's
	// ListModels RPC.
	FineTuningServiceListModelsProcedure = "/gooseai.FineTuningService/ListModels"
)

// FineTuningServiceClient is a client for the gooseai.FineTuningService service.
type FineTuningServiceClient interface {
	// Create a new model and begin the fine tuning process
	CreateModel(context.Context, *connect_go.Request[finetuning.CreateModelRequest]) (*connect_go.Response[finetuning.CreateModelResponse], error)
	// Get a FineTuningModel
	GetModel(context.Context, *connect_go.Request[finetuning.GetModelRequest]) (*connect_go.Response[finetuning.GetModelResponse], error)
	// Update a FineTuningModel by id
	UpdateModel(context.Context, *connect_go.Request[finetuning.UpdateModelRequest]) (*connect_go.Response[finetuning.UpdateModelResponse], error)
	// Delete a fine tuned model
	DeleteModel(context.Context, *connect_go.Request[finetuning.DeleteModelRequest]) (*connect_go.Response[finetuning.DeleteModelResponse], error)
	// Re-run training, does not create a new model
	ResubmitModel(context.Context, *connect_go.Request[finetuning.ResubmitModelRequest]) (*connect_go.Response[finetuning.ResubmitModelResponse], error)
	// List all the fine tuned models for an organization or user
	ListModels(context.Context, *connect_go.Request[finetuning.ListModelsRequest]) (*connect_go.Response[finetuning.ListModelsResponse], error)
}

// NewFineTuningServiceClient constructs a client for the gooseai.FineTuningService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFineTuningServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) FineTuningServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &fineTuningServiceClient{
		createModel: connect_go.NewClient[finetuning.CreateModelRequest, finetuning.CreateModelResponse](
			httpClient,
			baseURL+FineTuningServiceCreateModelProcedure,
			opts...,
		),
		getModel: connect_go.NewClient[finetuning.GetModelRequest, finetuning.GetModelResponse](
			httpClient,
			baseURL+FineTuningServiceGetModelProcedure,
			opts...,
		),
		updateModel: connect_go.NewClient[finetuning.UpdateModelRequest, finetuning.UpdateModelResponse](
			httpClient,
			baseURL+FineTuningServiceUpdateModelProcedure,
			opts...,
		),
		deleteModel: connect_go.NewClient[finetuning.DeleteModelRequest, finetuning.DeleteModelResponse](
			httpClient,
			baseURL+FineTuningServiceDeleteModelProcedure,
			opts...,
		),
		resubmitModel: connect_go.NewClient[finetuning.ResubmitModelRequest, finetuning.ResubmitModelResponse](
			httpClient,
			baseURL+FineTuningServiceResubmitModelProcedure,
			opts...,
		),
		listModels: connect_go.NewClient[finetuning.ListModelsRequest, finetuning.ListModelsResponse](
			httpClient,
			baseURL+FineTuningServiceListModelsProcedure,
			opts...,
		),
	}
}

// fineTuningServiceClient implements FineTuningServiceClient.
type fineTuningServiceClient struct {
	createModel   *connect_go.Client[finetuning.CreateModelRequest, finetuning.CreateModelResponse]
	getModel      *connect_go.Client[finetuning.GetModelRequest, finetuning.GetModelResponse]
	updateModel   *connect_go.Client[finetuning.UpdateModelRequest, finetuning.UpdateModelResponse]
	deleteModel   *connect_go.Client[finetuning.DeleteModelRequest, finetuning.DeleteModelResponse]
	resubmitModel *connect_go.Client[finetuning.ResubmitModelRequest, finetuning.ResubmitModelResponse]
	listModels    *connect_go.Client[finetuning.ListModelsRequest, finetuning.ListModelsResponse]
}

// CreateModel calls gooseai.FineTuningService.CreateModel.
func (c *fineTuningServiceClient) CreateModel(ctx context.Context, req *connect_go.Request[finetuning.CreateModelRequest]) (*connect_go.Response[finetuning.CreateModelResponse], error) {
	return c.createModel.CallUnary(ctx, req)
}

// GetModel calls gooseai.FineTuningService.GetModel.
func (c *fineTuningServiceClient) GetModel(ctx context.Context, req *connect_go.Request[finetuning.GetModelRequest]) (*connect_go.Response[finetuning.GetModelResponse], error) {
	return c.getModel.CallUnary(ctx, req)
}

// UpdateModel calls gooseai.FineTuningService.UpdateModel.
func (c *fineTuningServiceClient) UpdateModel(ctx context.Context, req *connect_go.Request[finetuning.UpdateModelRequest]) (*connect_go.Response[finetuning.UpdateModelResponse], error) {
	return c.updateModel.CallUnary(ctx, req)
}

// DeleteModel calls gooseai.FineTuningService.DeleteModel.
func (c *fineTuningServiceClient) DeleteModel(ctx context.Context, req *connect_go.Request[finetuning.DeleteModelRequest]) (*connect_go.Response[finetuning.DeleteModelResponse], error) {
	return c.deleteModel.CallUnary(ctx, req)
}

// ResubmitModel calls gooseai.FineTuningService.ResubmitModel.
func (c *fineTuningServiceClient) ResubmitModel(ctx context.Context, req *connect_go.Request[finetuning.ResubmitModelRequest]) (*connect_go.Response[finetuning.ResubmitModelResponse], error) {
	return c.resubmitModel.CallUnary(ctx, req)
}

// ListModels calls gooseai.FineTuningService.ListModels.
func (c *fineTuningServiceClient) ListModels(ctx context.Context, req *connect_go.Request[finetuning.ListModelsRequest]) (*connect_go.Response[finetuning.ListModelsResponse], error) {
	return c.listModels.CallUnary(ctx, req)
}

// FineTuningServiceHandler is an implementation of the gooseai.FineTuningService service.
type FineTuningServiceHandler interface {
	// Create a new model and begin the fine tuning process
	CreateModel(context.Context, *connect_go.Request[finetuning.CreateModelRequest]) (*connect_go.Response[finetuning.CreateModelResponse], error)
	// Get a FineTuningModel
	GetModel(context.Context, *connect_go.Request[finetuning.GetModelRequest]) (*connect_go.Response[finetuning.GetModelResponse], error)
	// Update a FineTuningModel by id
	UpdateModel(context.Context, *connect_go.Request[finetuning.UpdateModelRequest]) (*connect_go.Response[finetuning.UpdateModelResponse], error)
	// Delete a fine tuned model
	DeleteModel(context.Context, *connect_go.Request[finetuning.DeleteModelRequest]) (*connect_go.Response[finetuning.DeleteModelResponse], error)
	// Re-run training, does not create a new model
	ResubmitModel(context.Context, *connect_go.Request[finetuning.ResubmitModelRequest]) (*connect_go.Response[finetuning.ResubmitModelResponse], error)
	// List all the fine tuned models for an organization or user
	ListModels(context.Context, *connect_go.Request[finetuning.ListModelsRequest]) (*connect_go.Response[finetuning.ListModelsResponse], error)
}

// NewFineTuningServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFineTuningServiceHandler(svc FineTuningServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	fineTuningServiceCreateModelHandler := connect_go.NewUnaryHandler(
		FineTuningServiceCreateModelProcedure,
		svc.CreateModel,
		opts...,
	)
	fineTuningServiceGetModelHandler := connect_go.NewUnaryHandler(
		FineTuningServiceGetModelProcedure,
		svc.GetModel,
		opts...,
	)
	fineTuningServiceUpdateModelHandler := connect_go.NewUnaryHandler(
		FineTuningServiceUpdateModelProcedure,
		svc.UpdateModel,
		opts...,
	)
	fineTuningServiceDeleteModelHandler := connect_go.NewUnaryHandler(
		FineTuningServiceDeleteModelProcedure,
		svc.DeleteModel,
		opts...,
	)
	fineTuningServiceResubmitModelHandler := connect_go.NewUnaryHandler(
		FineTuningServiceResubmitModelProcedure,
		svc.ResubmitModel,
		opts...,
	)
	fineTuningServiceListModelsHandler := connect_go.NewUnaryHandler(
		FineTuningServiceListModelsProcedure,
		svc.ListModels,
		opts...,
	)
	return "/gooseai.FineTuningService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FineTuningServiceCreateModelProcedure:
			fineTuningServiceCreateModelHandler.ServeHTTP(w, r)
		case FineTuningServiceGetModelProcedure:
			fineTuningServiceGetModelHandler.ServeHTTP(w, r)
		case FineTuningServiceUpdateModelProcedure:
			fineTuningServiceUpdateModelHandler.ServeHTTP(w, r)
		case FineTuningServiceDeleteModelProcedure:
			fineTuningServiceDeleteModelHandler.ServeHTTP(w, r)
		case FineTuningServiceResubmitModelProcedure:
			fineTuningServiceResubmitModelHandler.ServeHTTP(w, r)
		case FineTuningServiceListModelsProcedure:
			fineTuningServiceListModelsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFineTuningServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFineTuningServiceHandler struct{}

func (UnimplementedFineTuningServiceHandler) CreateModel(context.Context, *connect_go.Request[finetuning.CreateModelRequest]) (*connect_go.Response[finetuning.CreateModelResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gooseai.FineTuningService.CreateModel is not implemented"))
}

func (UnimplementedFineTuningServiceHandler) GetModel(context.Context, *connect_go.Request[finetuning.GetModelRequest]) (*connect_go.Response[finetuning.GetModelResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gooseai.FineTuningService.GetModel is not implemented"))
}

func (UnimplementedFineTuningServiceHandler) UpdateModel(context.Context, *connect_go.Request[finetuning.UpdateModelRequest]) (*connect_go.Response[finetuning.UpdateModelResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gooseai.FineTuningService.UpdateModel is not implemented"))
}

func (UnimplementedFineTuningServiceHandler) DeleteModel(context.Context, *connect_go.Request[finetuning.DeleteModelRequest]) (*connect_go.Response[finetuning.DeleteModelResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gooseai.FineTuningService.DeleteModel is not implemented"))
}

func (UnimplementedFineTuningServiceHandler) ResubmitModel(context.Context, *connect_go.Request[finetuning.ResubmitModelRequest]) (*connect_go.Response[finetuning.ResubmitModelResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gooseai.FineTuningService.ResubmitModel is not implemented"))
}

func (UnimplementedFineTuningServiceHandler) ListModels(context.Context, *connect_go.Request[finetuning.ListModelsRequest]) (*connect_go.Response[finetuning.ListModelsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gooseai.FineTuningService.ListModels is not implemented"))
}
