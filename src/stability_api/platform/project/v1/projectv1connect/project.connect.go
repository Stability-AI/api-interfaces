// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: stability_api/platform/project/v1/project.proto

package projectv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/stability-ai/api-interfaces/src/stability_api/platform/project/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ProjectServiceName is the fully-qualified name of the ProjectService service.
	ProjectServiceName = "stabilityai.platformapis.project.v1.ProjectService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProjectServiceCreateProcedure is the fully-qualified name of the ProjectService's Create RPC.
	ProjectServiceCreateProcedure = "/stabilityai.platformapis.project.v1.ProjectService/Create"
	// ProjectServiceUpdateProcedure is the fully-qualified name of the ProjectService's Update RPC.
	ProjectServiceUpdateProcedure = "/stabilityai.platformapis.project.v1.ProjectService/Update"
	// ProjectServiceListProcedure is the fully-qualified name of the ProjectService's List RPC.
	ProjectServiceListProcedure = "/stabilityai.platformapis.project.v1.ProjectService/List"
	// ProjectServiceGetProcedure is the fully-qualified name of the ProjectService's Get RPC.
	ProjectServiceGetProcedure = "/stabilityai.platformapis.project.v1.ProjectService/Get"
	// ProjectServiceDeleteProcedure is the fully-qualified name of the ProjectService's Delete RPC.
	ProjectServiceDeleteProcedure = "/stabilityai.platformapis.project.v1.ProjectService/Delete"
	// ProjectServiceTagAssetsProcedure is the fully-qualified name of the ProjectService's TagAssets
	// RPC.
	ProjectServiceTagAssetsProcedure = "/stabilityai.platformapis.project.v1.ProjectService/TagAssets"
	// ProjectServiceUntagAssetsProcedure is the fully-qualified name of the ProjectService's
	// UntagAssets RPC.
	ProjectServiceUntagAssetsProcedure = "/stabilityai.platformapis.project.v1.ProjectService/UntagAssets"
	// ProjectServiceQueryAssetsProcedure is the fully-qualified name of the ProjectService's
	// QueryAssets RPC.
	ProjectServiceQueryAssetsProcedure = "/stabilityai.platformapis.project.v1.ProjectService/QueryAssets"
	// ProjectServiceDeleteAssetsProcedure is the fully-qualified name of the ProjectService's
	// DeleteAssets RPC.
	ProjectServiceDeleteAssetsProcedure = "/stabilityai.platformapis.project.v1.ProjectService/DeleteAssets"
)

// ProjectServiceClient is a client for the stabilityai.platformapis.project.v1.ProjectService
// service.
type ProjectServiceClient interface {
	// Create a new project if it does not exist
	Create(context.Context, *connect_go.Request[v1.CreateProjectRequest]) (*connect_go.Response[v1.Project], error)
	// Update an existing project
	Update(context.Context, *connect_go.Request[v1.UpdateProjectRequest]) (*connect_go.Response[v1.Project], error)
	// List all the projects for an organization
	List(context.Context, *connect_go.Request[v1.ListProjectRequest]) (*connect_go.ServerStreamForClient[v1.Project], error)
	// Get a project
	Get(context.Context, *connect_go.Request[v1.GetProjectRequest]) (*connect_go.Response[v1.Project], error)
	// Delete a project
	Delete(context.Context, *connect_go.Request[v1.DeleteProjectRequest]) (*connect_go.Response[v1.Project], error)
	// Add or remove tags from an asset
	TagAssets(context.Context, *connect_go.Request[v1.TagAssetsRequest]) (*connect_go.Response[v1.TagAssetsResponse], error)
	UntagAssets(context.Context, *connect_go.Request[v1.UntagAssetsRequest]) (*connect_go.Response[v1.UntagAssetsResponse], error)
	// Query the assets of a project, with additional filtering
	QueryAssets(context.Context, *connect_go.Request[v1.QueryAssetsRequest]) (*connect_go.Response[v1.QueryAssetsResponse], error)
	// Delete one or more assets of a project
	DeleteAssets(context.Context, *connect_go.Request[v1.DeleteAssetsRequest]) (*connect_go.Response[v1.DeleteAssetsResponse], error)
}

// NewProjectServiceClient constructs a client for the
// stabilityai.platformapis.project.v1.ProjectService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProjectServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ProjectServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &projectServiceClient{
		create: connect_go.NewClient[v1.CreateProjectRequest, v1.Project](
			httpClient,
			baseURL+ProjectServiceCreateProcedure,
			opts...,
		),
		update: connect_go.NewClient[v1.UpdateProjectRequest, v1.Project](
			httpClient,
			baseURL+ProjectServiceUpdateProcedure,
			opts...,
		),
		list: connect_go.NewClient[v1.ListProjectRequest, v1.Project](
			httpClient,
			baseURL+ProjectServiceListProcedure,
			opts...,
		),
		get: connect_go.NewClient[v1.GetProjectRequest, v1.Project](
			httpClient,
			baseURL+ProjectServiceGetProcedure,
			opts...,
		),
		delete: connect_go.NewClient[v1.DeleteProjectRequest, v1.Project](
			httpClient,
			baseURL+ProjectServiceDeleteProcedure,
			opts...,
		),
		tagAssets: connect_go.NewClient[v1.TagAssetsRequest, v1.TagAssetsResponse](
			httpClient,
			baseURL+ProjectServiceTagAssetsProcedure,
			opts...,
		),
		untagAssets: connect_go.NewClient[v1.UntagAssetsRequest, v1.UntagAssetsResponse](
			httpClient,
			baseURL+ProjectServiceUntagAssetsProcedure,
			opts...,
		),
		queryAssets: connect_go.NewClient[v1.QueryAssetsRequest, v1.QueryAssetsResponse](
			httpClient,
			baseURL+ProjectServiceQueryAssetsProcedure,
			opts...,
		),
		deleteAssets: connect_go.NewClient[v1.DeleteAssetsRequest, v1.DeleteAssetsResponse](
			httpClient,
			baseURL+ProjectServiceDeleteAssetsProcedure,
			opts...,
		),
	}
}

// projectServiceClient implements ProjectServiceClient.
type projectServiceClient struct {
	create       *connect_go.Client[v1.CreateProjectRequest, v1.Project]
	update       *connect_go.Client[v1.UpdateProjectRequest, v1.Project]
	list         *connect_go.Client[v1.ListProjectRequest, v1.Project]
	get          *connect_go.Client[v1.GetProjectRequest, v1.Project]
	delete       *connect_go.Client[v1.DeleteProjectRequest, v1.Project]
	tagAssets    *connect_go.Client[v1.TagAssetsRequest, v1.TagAssetsResponse]
	untagAssets  *connect_go.Client[v1.UntagAssetsRequest, v1.UntagAssetsResponse]
	queryAssets  *connect_go.Client[v1.QueryAssetsRequest, v1.QueryAssetsResponse]
	deleteAssets *connect_go.Client[v1.DeleteAssetsRequest, v1.DeleteAssetsResponse]
}

// Create calls stabilityai.platformapis.project.v1.ProjectService.Create.
func (c *projectServiceClient) Create(ctx context.Context, req *connect_go.Request[v1.CreateProjectRequest]) (*connect_go.Response[v1.Project], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls stabilityai.platformapis.project.v1.ProjectService.Update.
func (c *projectServiceClient) Update(ctx context.Context, req *connect_go.Request[v1.UpdateProjectRequest]) (*connect_go.Response[v1.Project], error) {
	return c.update.CallUnary(ctx, req)
}

// List calls stabilityai.platformapis.project.v1.ProjectService.List.
func (c *projectServiceClient) List(ctx context.Context, req *connect_go.Request[v1.ListProjectRequest]) (*connect_go.ServerStreamForClient[v1.Project], error) {
	return c.list.CallServerStream(ctx, req)
}

// Get calls stabilityai.platformapis.project.v1.ProjectService.Get.
func (c *projectServiceClient) Get(ctx context.Context, req *connect_go.Request[v1.GetProjectRequest]) (*connect_go.Response[v1.Project], error) {
	return c.get.CallUnary(ctx, req)
}

// Delete calls stabilityai.platformapis.project.v1.ProjectService.Delete.
func (c *projectServiceClient) Delete(ctx context.Context, req *connect_go.Request[v1.DeleteProjectRequest]) (*connect_go.Response[v1.Project], error) {
	return c.delete.CallUnary(ctx, req)
}

// TagAssets calls stabilityai.platformapis.project.v1.ProjectService.TagAssets.
func (c *projectServiceClient) TagAssets(ctx context.Context, req *connect_go.Request[v1.TagAssetsRequest]) (*connect_go.Response[v1.TagAssetsResponse], error) {
	return c.tagAssets.CallUnary(ctx, req)
}

// UntagAssets calls stabilityai.platformapis.project.v1.ProjectService.UntagAssets.
func (c *projectServiceClient) UntagAssets(ctx context.Context, req *connect_go.Request[v1.UntagAssetsRequest]) (*connect_go.Response[v1.UntagAssetsResponse], error) {
	return c.untagAssets.CallUnary(ctx, req)
}

// QueryAssets calls stabilityai.platformapis.project.v1.ProjectService.QueryAssets.
func (c *projectServiceClient) QueryAssets(ctx context.Context, req *connect_go.Request[v1.QueryAssetsRequest]) (*connect_go.Response[v1.QueryAssetsResponse], error) {
	return c.queryAssets.CallUnary(ctx, req)
}

// DeleteAssets calls stabilityai.platformapis.project.v1.ProjectService.DeleteAssets.
func (c *projectServiceClient) DeleteAssets(ctx context.Context, req *connect_go.Request[v1.DeleteAssetsRequest]) (*connect_go.Response[v1.DeleteAssetsResponse], error) {
	return c.deleteAssets.CallUnary(ctx, req)
}

// ProjectServiceHandler is an implementation of the
// stabilityai.platformapis.project.v1.ProjectService service.
type ProjectServiceHandler interface {
	// Create a new project if it does not exist
	Create(context.Context, *connect_go.Request[v1.CreateProjectRequest]) (*connect_go.Response[v1.Project], error)
	// Update an existing project
	Update(context.Context, *connect_go.Request[v1.UpdateProjectRequest]) (*connect_go.Response[v1.Project], error)
	// List all the projects for an organization
	List(context.Context, *connect_go.Request[v1.ListProjectRequest], *connect_go.ServerStream[v1.Project]) error
	// Get a project
	Get(context.Context, *connect_go.Request[v1.GetProjectRequest]) (*connect_go.Response[v1.Project], error)
	// Delete a project
	Delete(context.Context, *connect_go.Request[v1.DeleteProjectRequest]) (*connect_go.Response[v1.Project], error)
	// Add or remove tags from an asset
	TagAssets(context.Context, *connect_go.Request[v1.TagAssetsRequest]) (*connect_go.Response[v1.TagAssetsResponse], error)
	UntagAssets(context.Context, *connect_go.Request[v1.UntagAssetsRequest]) (*connect_go.Response[v1.UntagAssetsResponse], error)
	// Query the assets of a project, with additional filtering
	QueryAssets(context.Context, *connect_go.Request[v1.QueryAssetsRequest]) (*connect_go.Response[v1.QueryAssetsResponse], error)
	// Delete one or more assets of a project
	DeleteAssets(context.Context, *connect_go.Request[v1.DeleteAssetsRequest]) (*connect_go.Response[v1.DeleteAssetsResponse], error)
}

// NewProjectServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProjectServiceHandler(svc ProjectServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	projectServiceCreateHandler := connect_go.NewUnaryHandler(
		ProjectServiceCreateProcedure,
		svc.Create,
		opts...,
	)
	projectServiceUpdateHandler := connect_go.NewUnaryHandler(
		ProjectServiceUpdateProcedure,
		svc.Update,
		opts...,
	)
	projectServiceListHandler := connect_go.NewServerStreamHandler(
		ProjectServiceListProcedure,
		svc.List,
		opts...,
	)
	projectServiceGetHandler := connect_go.NewUnaryHandler(
		ProjectServiceGetProcedure,
		svc.Get,
		opts...,
	)
	projectServiceDeleteHandler := connect_go.NewUnaryHandler(
		ProjectServiceDeleteProcedure,
		svc.Delete,
		opts...,
	)
	projectServiceTagAssetsHandler := connect_go.NewUnaryHandler(
		ProjectServiceTagAssetsProcedure,
		svc.TagAssets,
		opts...,
	)
	projectServiceUntagAssetsHandler := connect_go.NewUnaryHandler(
		ProjectServiceUntagAssetsProcedure,
		svc.UntagAssets,
		opts...,
	)
	projectServiceQueryAssetsHandler := connect_go.NewUnaryHandler(
		ProjectServiceQueryAssetsProcedure,
		svc.QueryAssets,
		opts...,
	)
	projectServiceDeleteAssetsHandler := connect_go.NewUnaryHandler(
		ProjectServiceDeleteAssetsProcedure,
		svc.DeleteAssets,
		opts...,
	)
	return "/stabilityai.platformapis.project.v1.ProjectService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProjectServiceCreateProcedure:
			projectServiceCreateHandler.ServeHTTP(w, r)
		case ProjectServiceUpdateProcedure:
			projectServiceUpdateHandler.ServeHTTP(w, r)
		case ProjectServiceListProcedure:
			projectServiceListHandler.ServeHTTP(w, r)
		case ProjectServiceGetProcedure:
			projectServiceGetHandler.ServeHTTP(w, r)
		case ProjectServiceDeleteProcedure:
			projectServiceDeleteHandler.ServeHTTP(w, r)
		case ProjectServiceTagAssetsProcedure:
			projectServiceTagAssetsHandler.ServeHTTP(w, r)
		case ProjectServiceUntagAssetsProcedure:
			projectServiceUntagAssetsHandler.ServeHTTP(w, r)
		case ProjectServiceQueryAssetsProcedure:
			projectServiceQueryAssetsHandler.ServeHTTP(w, r)
		case ProjectServiceDeleteAssetsProcedure:
			projectServiceDeleteAssetsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProjectServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProjectServiceHandler struct{}

func (UnimplementedProjectServiceHandler) Create(context.Context, *connect_go.Request[v1.CreateProjectRequest]) (*connect_go.Response[v1.Project], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("stabilityai.platformapis.project.v1.ProjectService.Create is not implemented"))
}

func (UnimplementedProjectServiceHandler) Update(context.Context, *connect_go.Request[v1.UpdateProjectRequest]) (*connect_go.Response[v1.Project], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("stabilityai.platformapis.project.v1.ProjectService.Update is not implemented"))
}

func (UnimplementedProjectServiceHandler) List(context.Context, *connect_go.Request[v1.ListProjectRequest], *connect_go.ServerStream[v1.Project]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("stabilityai.platformapis.project.v1.ProjectService.List is not implemented"))
}

func (UnimplementedProjectServiceHandler) Get(context.Context, *connect_go.Request[v1.GetProjectRequest]) (*connect_go.Response[v1.Project], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("stabilityai.platformapis.project.v1.ProjectService.Get is not implemented"))
}

func (UnimplementedProjectServiceHandler) Delete(context.Context, *connect_go.Request[v1.DeleteProjectRequest]) (*connect_go.Response[v1.Project], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("stabilityai.platformapis.project.v1.ProjectService.Delete is not implemented"))
}

func (UnimplementedProjectServiceHandler) TagAssets(context.Context, *connect_go.Request[v1.TagAssetsRequest]) (*connect_go.Response[v1.TagAssetsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("stabilityai.platformapis.project.v1.ProjectService.TagAssets is not implemented"))
}

func (UnimplementedProjectServiceHandler) UntagAssets(context.Context, *connect_go.Request[v1.UntagAssetsRequest]) (*connect_go.Response[v1.UntagAssetsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("stabilityai.platformapis.project.v1.ProjectService.UntagAssets is not implemented"))
}

func (UnimplementedProjectServiceHandler) QueryAssets(context.Context, *connect_go.Request[v1.QueryAssetsRequest]) (*connect_go.Response[v1.QueryAssetsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("stabilityai.platformapis.project.v1.ProjectService.QueryAssets is not implemented"))
}

func (UnimplementedProjectServiceHandler) DeleteAssets(context.Context, *connect_go.Request[v1.DeleteAssetsRequest]) (*connect_go.Response[v1.DeleteAssetsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("stabilityai.platformapis.project.v1.ProjectService.DeleteAssets is not implemented"))
}
