// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: stability_api/platform/generation/v1/generation.proto

package generationv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/stability-ai/api-interfaces/src/stability_api/platform/generation/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// GenerationServiceName is the fully-qualified name of the GenerationService service.
	GenerationServiceName = "stabilityai.platformapis.generation.v1.GenerationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GenerationServiceGenerateProcedure is the fully-qualified name of the GenerationService's
	// Generate RPC.
	GenerationServiceGenerateProcedure = "/stabilityai.platformapis.generation.v1.GenerationService/Generate"
	// GenerationServiceChainGenerateProcedure is the fully-qualified name of the GenerationService's
	// ChainGenerate RPC.
	GenerationServiceChainGenerateProcedure = "/stabilityai.platformapis.generation.v1.GenerationService/ChainGenerate"
)

// GenerationServiceClient is a client for the
// stabilityai.platformapis.generation.v1.GenerationService service.
type GenerationServiceClient interface {
	Generate(context.Context, *connect.Request[v1.Request]) (*connect.ServerStreamForClient[v1.Answer], error)
	ChainGenerate(context.Context, *connect.Request[v1.ChainRequest]) (*connect.ServerStreamForClient[v1.Answer], error)
}

// NewGenerationServiceClient constructs a client for the
// stabilityai.platformapis.generation.v1.GenerationService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGenerationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GenerationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &generationServiceClient{
		generate: connect.NewClient[v1.Request, v1.Answer](
			httpClient,
			baseURL+GenerationServiceGenerateProcedure,
			opts...,
		),
		chainGenerate: connect.NewClient[v1.ChainRequest, v1.Answer](
			httpClient,
			baseURL+GenerationServiceChainGenerateProcedure,
			opts...,
		),
	}
}

// generationServiceClient implements GenerationServiceClient.
type generationServiceClient struct {
	generate      *connect.Client[v1.Request, v1.Answer]
	chainGenerate *connect.Client[v1.ChainRequest, v1.Answer]
}

// Generate calls stabilityai.platformapis.generation.v1.GenerationService.Generate.
func (c *generationServiceClient) Generate(ctx context.Context, req *connect.Request[v1.Request]) (*connect.ServerStreamForClient[v1.Answer], error) {
	return c.generate.CallServerStream(ctx, req)
}

// ChainGenerate calls stabilityai.platformapis.generation.v1.GenerationService.ChainGenerate.
func (c *generationServiceClient) ChainGenerate(ctx context.Context, req *connect.Request[v1.ChainRequest]) (*connect.ServerStreamForClient[v1.Answer], error) {
	return c.chainGenerate.CallServerStream(ctx, req)
}

// GenerationServiceHandler is an implementation of the
// stabilityai.platformapis.generation.v1.GenerationService service.
type GenerationServiceHandler interface {
	Generate(context.Context, *connect.Request[v1.Request], *connect.ServerStream[v1.Answer]) error
	ChainGenerate(context.Context, *connect.Request[v1.ChainRequest], *connect.ServerStream[v1.Answer]) error
}

// NewGenerationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGenerationServiceHandler(svc GenerationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	generationServiceGenerateHandler := connect.NewServerStreamHandler(
		GenerationServiceGenerateProcedure,
		svc.Generate,
		opts...,
	)
	generationServiceChainGenerateHandler := connect.NewServerStreamHandler(
		GenerationServiceChainGenerateProcedure,
		svc.ChainGenerate,
		opts...,
	)
	return "/stabilityai.platformapis.generation.v1.GenerationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GenerationServiceGenerateProcedure:
			generationServiceGenerateHandler.ServeHTTP(w, r)
		case GenerationServiceChainGenerateProcedure:
			generationServiceChainGenerateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGenerationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGenerationServiceHandler struct{}

func (UnimplementedGenerationServiceHandler) Generate(context.Context, *connect.Request[v1.Request], *connect.ServerStream[v1.Answer]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("stabilityai.platformapis.generation.v1.GenerationService.Generate is not implemented"))
}

func (UnimplementedGenerationServiceHandler) ChainGenerate(context.Context, *connect.Request[v1.ChainRequest], *connect.ServerStream[v1.Answer]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("stabilityai.platformapis.generation.v1.GenerationService.ChainGenerate is not implemented"))
}
