// @generated by protoc-gen-es v1.2.0
// @generated from file stability_api/platform/generation/v1/generation.proto (package stabilityai.platformapis.generation.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3, Struct } from "@bufbuild/protobuf";
import { Tensor } from "../../../tensors/tensors_pb.js";

/**
 * @generated from enum stabilityai.platformapis.generation.v1.FinishReason
 */
export const FinishReason = proto3.makeEnum(
  "stabilityai.platformapis.generation.v1.FinishReason",
  [
    {no: 0, name: "NULL"},
    {no: 1, name: "LENGTH"},
    {no: 2, name: "STOP"},
    {no: 3, name: "ERROR"},
    {no: 4, name: "FILTER"},
  ],
);

/**
 * @generated from enum stabilityai.platformapis.generation.v1.ArtifactType
 */
export const ArtifactType = proto3.makeEnum(
  "stabilityai.platformapis.generation.v1.ArtifactType",
  [
    {no: 0, name: "ARTIFACT_NONE"},
    {no: 1, name: "ARTIFACT_IMAGE"},
    {no: 2, name: "ARTIFACT_VIDEO"},
    {no: 3, name: "ARTIFACT_TEXT"},
    {no: 4, name: "ARTIFACT_TOKENS"},
    {no: 5, name: "ARTIFACT_EMBEDDING"},
    {no: 6, name: "ARTIFACT_CLASSIFICATIONS"},
    {no: 7, name: "ARTIFACT_MASK"},
    {no: 8, name: "ARTIFACT_LATENT"},
    {no: 9, name: "ARTIFACT_TENSOR"},
    {no: 10, name: "ARTIFACT_DEPTH"},
  ],
);

/**
 * @generated from enum stabilityai.platformapis.generation.v1.MaskedAreaInit
 */
export const MaskedAreaInit = proto3.makeEnum(
  "stabilityai.platformapis.generation.v1.MaskedAreaInit",
  [
    {no: 0, name: "MASKED_AREA_INIT_ZERO", localName: "ZERO"},
    {no: 1, name: "MASKED_AREA_INIT_RANDOM", localName: "RANDOM"},
    {no: 2, name: "MASKED_AREA_INIT_ORIGINAL", localName: "ORIGINAL"},
  ],
);

/**
 * @generated from enum stabilityai.platformapis.generation.v1.WeightMethod
 */
export const WeightMethod = proto3.makeEnum(
  "stabilityai.platformapis.generation.v1.WeightMethod",
  [
    {no: 0, name: "TEXT_ENCODER"},
    {no: 1, name: "CROSS_ATTENTION"},
  ],
);

/**
 * DiffusionSampler identifies which sampler to use for Diffusion, and represents
 * the internal set of supported samplers.
 *
 * @generated from enum stabilityai.platformapis.generation.v1.DiffusionSampler
 */
export const DiffusionSampler = proto3.makeEnum(
  "stabilityai.platformapis.generation.v1.DiffusionSampler",
  [
    {no: 0, name: "SAMPLER_DDIM"},
    {no: 1, name: "SAMPLER_DDPM"},
    {no: 2, name: "SAMPLER_K_EULER"},
    {no: 3, name: "SAMPLER_K_EULER_ANCESTRAL"},
    {no: 4, name: "SAMPLER_K_HEUN"},
    {no: 5, name: "SAMPLER_K_DPM_2"},
    {no: 6, name: "SAMPLER_K_DPM_2_ANCESTRAL"},
    {no: 7, name: "SAMPLER_K_LMS"},
    {no: 8, name: "SAMPLER_K_DPMPP_2S_ANCESTRAL"},
    {no: 9, name: "SAMPLER_K_DPMPP_2M"},
    {no: 10, name: "SAMPLER_K_DPMPP_SDE"},
  ],
);

/**
 * Future, unimplemented.
 *
 * @generated from enum stabilityai.platformapis.generation.v1.Upscaler
 */
export const Upscaler = proto3.makeEnum(
  "stabilityai.platformapis.generation.v1.Upscaler",
  [
    {no: 0, name: "UPSCALER_RGB", localName: "RGB"},
    {no: 1, name: "UPSCALER_GFPGAN", localName: "GFPGAN"},
    {no: 2, name: "UPSCALER_ESRGAN", localName: "ESRGAN"},
  ],
);

/**
 * Presets for CLIP guidance.
 *
 * @generated from enum stabilityai.platformapis.generation.v1.GuidancePreset
 */
export const GuidancePreset = proto3.makeEnum(
  "stabilityai.platformapis.generation.v1.GuidancePreset",
  [
    {no: 0, name: "GUIDANCE_PRESET_NONE", localName: "NONE"},
    {no: 1, name: "GUIDANCE_PRESET_SIMPLE", localName: "SIMPLE"},
    {no: 2, name: "GUIDANCE_PRESET_FAST_BLUE", localName: "FAST_BLUE"},
    {no: 3, name: "GUIDANCE_PRESET_FAST_GREEN", localName: "FAST_GREEN"},
    {no: 4, name: "GUIDANCE_PRESET_SLOW", localName: "SLOW"},
    {no: 5, name: "GUIDANCE_PRESET_SLOWER", localName: "SLOWER"},
    {no: 6, name: "GUIDANCE_PRESET_SLOWEST", localName: "SLOWEST"},
  ],
);

/**
 * @generated from enum stabilityai.platformapis.generation.v1.ModelArchitecture
 */
export const ModelArchitecture = proto3.makeEnum(
  "stabilityai.platformapis.generation.v1.ModelArchitecture",
  [
    {no: 0, name: "MODEL_ARCHITECTURE_NONE", localName: "NONE"},
    {no: 1, name: "MODEL_ARCHITECTURE_CLIP_VIT", localName: "CLIP_VIT"},
    {no: 2, name: "MODEL_ARCHITECTURE_CLIP_RESNET", localName: "CLIP_RESNET"},
    {no: 3, name: "MODEL_ARCHITECTURE_LDM", localName: "LDM"},
  ],
);

/**
 * @generated from enum stabilityai.platformapis.generation.v1.T2IAdapter
 */
export const T2IAdapter = proto3.makeEnum(
  "stabilityai.platformapis.generation.v1.T2IAdapter",
  [
    {no: 0, name: "T2IADAPTER_NONE"},
    {no: 1, name: "T2IADAPTER_SKETCH"},
    {no: 2, name: "T2IADAPTER_DEPTH"},
    {no: 3, name: "T2IADAPTER_CANNY"},
  ],
);

/**
 * If adapter_type is not None, then the user can choose what type of init_image to pass in: either an arbitrary image
 * which will then be converted to a depth map, sketch, or canny edge for the sketch, depth and canny adapters respectively,
 * or they can pass in their own depth map, sketch or canny edge. This field controls whether the init_image should
 * be interpreted as an arbitrary image to be preprocessed ready for the t2i adapter, or whether it has already been 
 * preprocessed elsewhere
 *
 * @generated from enum stabilityai.platformapis.generation.v1.T2IAdapterInit
 */
export const T2IAdapterInit = proto3.makeEnum(
  "stabilityai.platformapis.generation.v1.T2IAdapterInit",
  [
    {no: 0, name: "T2IADAPTERINIT_IMAGE"},
    {no: 1, name: "T2IADAPTERINIT_ADAPTER_IMAGE"},
  ],
);

/**
 * @generated from enum stabilityai.platformapis.generation.v1.Action
 */
export const Action = proto3.makeEnum(
  "stabilityai.platformapis.generation.v1.Action",
  [
    {no: 0, name: "ACTION_PASSTHROUGH", localName: "PASSTHROUGH"},
    {no: 1, name: "ACTION_REGENERATE_DUPLICATE", localName: "REGENERATE_DUPLICATE"},
    {no: 2, name: "ACTION_REGENERATE", localName: "REGENERATE"},
    {no: 3, name: "ACTION_OBFUSCATE_DUPLICATE", localName: "OBFUSCATE_DUPLICATE"},
    {no: 4, name: "ACTION_OBFUSCATE", localName: "OBFUSCATE"},
    {no: 5, name: "ACTION_DISCARD", localName: "DISCARD"},
  ],
);

/**
 * @generated from enum stabilityai.platformapis.generation.v1.ClassifierMode
 */
export const ClassifierMode = proto3.makeEnum(
  "stabilityai.platformapis.generation.v1.ClassifierMode",
  [
    {no: 0, name: "CLSFR_MODE_ZEROSHOT"},
    {no: 1, name: "CLSFR_MODE_MULTICLASS"},
  ],
);

/**
 * @generated from enum stabilityai.platformapis.generation.v1.InterpolateMode
 */
export const InterpolateMode = proto3.makeEnum(
  "stabilityai.platformapis.generation.v1.InterpolateMode",
  [
    {no: 0, name: "INTERPOLATE_LINEAR"},
    {no: 1, name: "INTERPOLATE_RIFE"},
    {no: 2, name: "INTERPOLATE_VAE_LINEAR"},
    {no: 3, name: "INTERPOLATE_VAE_SLERP"},
    {no: 4, name: "INTERPOLATE_FILM"},
  ],
);

/**
 * @generated from enum stabilityai.platformapis.generation.v1.BorderMode
 */
export const BorderMode = proto3.makeEnum(
  "stabilityai.platformapis.generation.v1.BorderMode",
  [
    {no: 0, name: "BORDER_REFLECT"},
    {no: 1, name: "BORDER_REPLICATE"},
    {no: 2, name: "BORDER_WRAP"},
    {no: 3, name: "BORDER_ZERO"},
    {no: 4, name: "BORDER_PREFILL"},
  ],
);

/**
 * @generated from enum stabilityai.platformapis.generation.v1.ColorMatchMode
 */
export const ColorMatchMode = proto3.makeEnum(
  "stabilityai.platformapis.generation.v1.ColorMatchMode",
  [
    {no: 0, name: "COLOR_MATCH_HSV"},
    {no: 1, name: "COLOR_MATCH_LAB"},
    {no: 2, name: "COLOR_MATCH_RGB"},
  ],
);

/**
 * @generated from enum stabilityai.platformapis.generation.v1.CameraType
 */
export const CameraType = proto3.makeEnum(
  "stabilityai.platformapis.generation.v1.CameraType",
  [
    {no: 0, name: "CAMERA_PERSPECTIVE"},
    {no: 1, name: "CAMERA_ORTHOGRAPHIC"},
  ],
);

/**
 * @generated from enum stabilityai.platformapis.generation.v1.RenderMode
 */
export const RenderMode = proto3.makeEnum(
  "stabilityai.platformapis.generation.v1.RenderMode",
  [
    {no: 0, name: "RENDER_MESH"},
    {no: 1, name: "RENDER_POINTCLOUD"},
  ],
);

/**
 * @generated from enum stabilityai.platformapis.generation.v1.AssetAction
 */
export const AssetAction = proto3.makeEnum(
  "stabilityai.platformapis.generation.v1.AssetAction",
  [
    {no: 0, name: "ASSET_PUT"},
    {no: 1, name: "ASSET_GET"},
    {no: 2, name: "ASSET_DELETE"},
  ],
);

/**
 * AssetUse defines how the asset is used within a project.  This enum matches
 * the values the project proto.
 *
 * @generated from enum stabilityai.platformapis.generation.v1.AssetUse
 */
export const AssetUse = proto3.makeEnum(
  "stabilityai.platformapis.generation.v1.AssetUse",
  [
    {no: 0, name: "ASSET_USE_UNDEFINED", localName: "UNDEFINED"},
    {no: 1, name: "ASSET_USE_INPUT", localName: "INPUT"},
    {no: 2, name: "ASSET_USE_OUTPUT", localName: "OUTPUT"},
    {no: 3, name: "ASSET_USE_INTERMEDIATE", localName: "INTERMEDIATE"},
    {no: 4, name: "ASSET_USE_PROJECT", localName: "PROJECT"},
  ],
);

/**
 * @generated from enum stabilityai.platformapis.generation.v1.StageAction
 */
export const StageAction = proto3.makeEnum(
  "stabilityai.platformapis.generation.v1.StageAction",
  [
    {no: 0, name: "STAGE_ACTION_PASS", localName: "PASS"},
    {no: 1, name: "STAGE_ACTION_DISCARD", localName: "DISCARD"},
    {no: 2, name: "STAGE_ACTION_RETURN", localName: "RETURN"},
  ],
);

/**
 * Generally, a GPT BPE 16-bit token, paired with an optional string representation.
 *
 * @generated from message stabilityai.platformapis.generation.v1.Token
 */
export const Token = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.Token",
  () => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
);

/**
 * Sequence of tokens, paired with the id of the tokenizer used to generate them.
 *
 * @generated from message stabilityai.platformapis.generation.v1.Tokens
 */
export const Tokens = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.Tokens",
  () => [
    { no: 1, name: "tokens", kind: "message", T: Token, repeated: true },
    { no: 2, name: "tokenizer_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ],
);

/**
 * A tangible Artifact, such as an image, video, or text that is used for input
 * or output.
 *
 * @generated from message stabilityai.platformapis.generation.v1.Artifact
 */
export const Artifact = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.Artifact",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(ArtifactType) },
    { no: 3, name: "mime", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "magic", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "binary", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "data" },
    { no: 6, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "data" },
    { no: 7, name: "tokens", kind: "message", T: Tokens, oneof: "data" },
    { no: 11, name: "classifier", kind: "message", T: ClassifierParameters, oneof: "data" },
    { no: 14, name: "tensor", kind: "message", T: Tensor, oneof: "data" },
    { no: 8, name: "index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 9, name: "finish_reason", kind: "enum", T: proto3.getEnumType(FinishReason) },
    { no: 10, name: "seed", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 12, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "size", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * A set of parameters for each individual Prompt.
 *
 * @generated from message stabilityai.platformapis.generation.v1.PromptParameters
 */
export const PromptParameters = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.PromptParameters",
  () => [
    { no: 1, name: "init", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 2, name: "weight", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
  ],
);

/**
 * A Prompt is a special type of Artifact that is used to generate an output.
 * There can be multiple Prompts that affect the same output. Currently, the
 * only Prompts supported are:
 *   - Text (singular)
 *   - Init Image (singular, optional, type ARTIFACT_IMAGE)
 *   - Mask (singular, optional, type ARTIFACT_MASK)
 *   - Depth (singular, optional, type ARTIFACT_DEPTH)
 *
 * @generated from message stabilityai.platformapis.generation.v1.Prompt
 */
export const Prompt = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.Prompt",
  () => [
    { no: 1, name: "parameters", kind: "message", T: PromptParameters, opt: true },
    { no: 2, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "prompt" },
    { no: 3, name: "tokens", kind: "message", T: Tokens, oneof: "prompt" },
    { no: 4, name: "artifact", kind: "message", T: Artifact, oneof: "prompt" },
  ],
);

/**
 * Parameters that affect the behavior of the sampler, typically used for CFG.
 *
 * @generated from message stabilityai.platformapis.generation.v1.SamplerParameters
 */
export const SamplerParameters = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.SamplerParameters",
  () => [
    { no: 1, name: "eta", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 2, name: "sampling_steps", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 3, name: "latent_channels", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 4, name: "downsampling_factor", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 5, name: "cfg_scale", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 6, name: "init_noise_scale", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 7, name: "step_noise_scale", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
  ],
);

/**
 * Unused, but reserved for future use. Adjustments to the latents after
 * initialization.
 *
 * @generated from message stabilityai.platformapis.generation.v1.ConditionerParameters
 */
export const ConditionerParameters = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.ConditionerParameters",
  () => [
    { no: 1, name: "vector_adjust_prior", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "conditioner", kind: "message", T: Model, opt: true },
  ],
);

/**
 * When does this schedule definition apply?
 *
 * @generated from message stabilityai.platformapis.generation.v1.ScheduleParameters
 */
export const ScheduleParameters = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.ScheduleParameters",
  () => [
    { no: 1, name: "start", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 2, name: "end", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 3, name: "value", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
  ],
);

/**
 * Parameters that apply to this block of the schedule.
 *
 * @generated from message stabilityai.platformapis.generation.v1.StepParameter
 */
export const StepParameter = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.StepParameter",
  () => [
    { no: 1, name: "scaled_step", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 2, name: "sampler", kind: "message", T: SamplerParameters, opt: true },
    { no: 3, name: "schedule", kind: "message", T: ScheduleParameters, opt: true },
    { no: 4, name: "guidance", kind: "message", T: GuidanceParameters, opt: true },
  ],
);

/**
 * @generated from message stabilityai.platformapis.generation.v1.Model
 */
export const Model = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.Model",
  () => [
    { no: 1, name: "architecture", kind: "enum", T: proto3.getEnumType(ModelArchitecture) },
    { no: 2, name: "publisher", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "dataset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "version", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 5, name: "semantic_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "alias", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message stabilityai.platformapis.generation.v1.CutoutParameters
 */
export const CutoutParameters = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.CutoutParameters",
  () => [
    { no: 1, name: "cutouts", kind: "message", T: CutoutParameters, repeated: true },
    { no: 2, name: "count", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 3, name: "gray", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 4, name: "blur", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 5, name: "size_power", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
  ],
);

/**
 * GuidanceScheduleParameters are used to define a schedule for CLIP guidance, and
 * are used to define the behavior of the guidance over time. They are relative
 * to the total number of steps, and are scaled to the number of steps in the
 * current run.
 *
 * @generated from message stabilityai.platformapis.generation.v1.GuidanceScheduleParameters
 */
export const GuidanceScheduleParameters = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.GuidanceScheduleParameters",
  () => [
    { no: 1, name: "duration", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 2, name: "value", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ],
);

/**
 * Parameters that affect the behavior of the guidance, typically used for CLIP.
 * We can specify more than one model, and the guidance will be a weighted sum
 * of the models.
 *
 * @generated from message stabilityai.platformapis.generation.v1.GuidanceInstanceParameters
 */
export const GuidanceInstanceParameters = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.GuidanceInstanceParameters",
  () => [
    { no: 2, name: "models", kind: "message", T: Model, repeated: true },
    { no: 3, name: "guidance_strength", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 4, name: "schedule", kind: "message", T: GuidanceScheduleParameters, repeated: true },
    { no: 5, name: "cutouts", kind: "message", T: CutoutParameters, opt: true },
    { no: 6, name: "prompt", kind: "message", T: Prompt, opt: true },
  ],
);

/**
 * Parameters that affect the behavior of the guidance, typically used for CLIP.
 * The omission of this field implies the default guidance of CFG.
 *
 * @generated from message stabilityai.platformapis.generation.v1.GuidanceParameters
 */
export const GuidanceParameters = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.GuidanceParameters",
  () => [
    { no: 1, name: "guidance_preset", kind: "enum", T: proto3.getEnumType(GuidancePreset) },
    { no: 2, name: "instances", kind: "message", T: GuidanceInstanceParameters, repeated: true },
  ],
);

/**
 * @generated from message stabilityai.platformapis.generation.v1.TransformType
 */
export const TransformType = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.TransformType",
  () => [
    { no: 1, name: "diffusion", kind: "enum", T: proto3.getEnumType(DiffusionSampler), oneof: "type" },
    { no: 2, name: "upscaler", kind: "enum", T: proto3.getEnumType(Upscaler), oneof: "type" },
  ],
);

/**
 * @generated from message stabilityai.platformapis.generation.v1.T2IAdapterParameter
 */
export const T2IAdapterParameter = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.T2IAdapterParameter",
  () => [
    { no: 1, name: "adapter_type", kind: "enum", T: proto3.getEnumType(T2IAdapter) },
    { no: 2, name: "adapter_strength", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "adapter_init_type", kind: "enum", T: proto3.getEnumType(T2IAdapterInit) },
  ],
);

/**
 * @generated from message stabilityai.platformapis.generation.v1.ContentCredentialsParameters
 */
export const ContentCredentialsParameters = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.ContentCredentialsParameters",
  () => [
    { no: 1, name: "model_metadata", kind: "enum", T: proto3.getEnumType(ContentCredentialsParameters_ModelMetadata), oneof: "parameters" },
  ],
);

/**
 * @generated from enum stabilityai.platformapis.generation.v1.ContentCredentialsParameters.ModelMetadata
 */
export const ContentCredentialsParameters_ModelMetadata = proto3.makeEnum(
  "stabilityai.platformapis.generation.v1.ContentCredentialsParameters.ModelMetadata",
  [
    {no: 0, name: "MODEL_METADATA_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "MODEL_METADATA_SIGN_WITH_ENGINE_ID", localName: "SIGN_WITH_ENGINE_ID"},
  ],
);

/**
 * FineTuningParameters specify which fine-tuned models to use for generation.
 *
 * @generated from message stabilityai.platformapis.generation.v1.FineTuningParameters
 */
export const FineTuningParameters = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.FineTuningParameters",
  () => [
    { no: 1, name: "model_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "weight", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
  ],
);

/**
 * @generated from message stabilityai.platformapis.generation.v1.ImageParameters
 */
export const ImageParameters = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.ImageParameters",
  () => [
    { no: 1, name: "height", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 2, name: "width", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 3, name: "seed", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
    { no: 4, name: "samples", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 5, name: "steps", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 6, name: "transform", kind: "message", T: TransformType, opt: true },
    { no: 7, name: "parameters", kind: "message", T: StepParameter, repeated: true },
    { no: 8, name: "masked_area_init", kind: "enum", T: proto3.getEnumType(MaskedAreaInit), opt: true },
    { no: 9, name: "weight_method", kind: "enum", T: proto3.getEnumType(WeightMethod), opt: true },
    { no: 10, name: "quantize", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 12, name: "adapter", kind: "message", T: T2IAdapterParameter, opt: true },
    { no: 13, name: "fine_tuning_parameters", kind: "message", T: FineTuningParameters, repeated: true },
    { no: 14, name: "content_credentials_parameters", kind: "message", T: ContentCredentialsParameters, opt: true },
  ],
);

/**
 * @generated from message stabilityai.platformapis.generation.v1.ClassifierConcept
 */
export const ClassifierConcept = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.ClassifierConcept",
  () => [
    { no: 1, name: "concept", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "threshold", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
  ],
);

/**
 * @generated from message stabilityai.platformapis.generation.v1.ClassifierCategory
 */
export const ClassifierCategory = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.ClassifierCategory",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "concepts", kind: "message", T: ClassifierConcept, repeated: true },
    { no: 3, name: "adjustment", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 4, name: "action", kind: "enum", T: proto3.getEnumType(Action), opt: true },
    { no: 5, name: "classifier_mode", kind: "enum", T: proto3.getEnumType(ClassifierMode), opt: true },
  ],
);

/**
 * @generated from message stabilityai.platformapis.generation.v1.ClassifierParameters
 */
export const ClassifierParameters = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.ClassifierParameters",
  () => [
    { no: 1, name: "categories", kind: "message", T: ClassifierCategory, repeated: true },
    { no: 2, name: "exceeds", kind: "message", T: ClassifierCategory, repeated: true },
    { no: 3, name: "realized_action", kind: "enum", T: proto3.getEnumType(Action), opt: true },
  ],
);

/**
 * Interpolation between two images applied at specified blend ratios
 *
 * @generated from message stabilityai.platformapis.generation.v1.InterpolateParameters
 */
export const InterpolateParameters = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.InterpolateParameters",
  () => [
    { no: 1, name: "ratios", kind: "scalar", T: 2 /* ScalarType.FLOAT */, repeated: true },
    { no: 2, name: "mode", kind: "enum", T: proto3.getEnumType(InterpolateMode), opt: true },
  ],
);

/**
 * @generated from message stabilityai.platformapis.generation.v1.TransformColorAdjust
 */
export const TransformColorAdjust = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.TransformColorAdjust",
  () => [
    { no: 1, name: "brightness", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 2, name: "contrast", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 3, name: "hue", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 4, name: "saturation", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 5, name: "lightness", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 6, name: "match_image", kind: "message", T: Artifact, opt: true },
    { no: 7, name: "match_mode", kind: "enum", T: proto3.getEnumType(ColorMatchMode), opt: true },
    { no: 8, name: "noise_amount", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 9, name: "noise_seed", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
  ],
);

/**
 * @generated from message stabilityai.platformapis.generation.v1.TransformDepthCalc
 */
export const TransformDepthCalc = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.TransformDepthCalc",
  () => [
    { no: 1, name: "blend_weight", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 2, name: "blur_radius", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 3, name: "reverse", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ],
);

/**
 * @generated from message stabilityai.platformapis.generation.v1.TransformMatrix
 */
export const TransformMatrix = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.TransformMatrix",
  () => [
    { no: 1, name: "data", kind: "scalar", T: 2 /* ScalarType.FLOAT */, repeated: true },
  ],
);

/**
 * @generated from message stabilityai.platformapis.generation.v1.TransformResample
 */
export const TransformResample = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.TransformResample",
  () => [
    { no: 1, name: "border_mode", kind: "enum", T: proto3.getEnumType(BorderMode) },
    { no: 2, name: "transform", kind: "message", T: TransformMatrix },
    { no: 3, name: "prev_transform", kind: "message", T: TransformMatrix, opt: true },
    { no: 4, name: "depth_warp", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 5, name: "export_mask", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ],
);

/**
 * @generated from message stabilityai.platformapis.generation.v1.CameraParameters
 */
export const CameraParameters = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.CameraParameters",
  () => [
    { no: 1, name: "camera_type", kind: "enum", T: proto3.getEnumType(CameraType) },
    { no: 2, name: "near_plane", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "far_plane", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 4, name: "fov", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
  ],
);

/**
 * @generated from message stabilityai.platformapis.generation.v1.TransformCameraPose
 */
export const TransformCameraPose = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.TransformCameraPose",
  () => [
    { no: 1, name: "world_to_view_matrix", kind: "message", T: TransformMatrix },
    { no: 2, name: "camera_parameters", kind: "message", T: CameraParameters },
    { no: 5, name: "do_prefill", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "render_mode", kind: "enum", T: proto3.getEnumType(RenderMode) },
  ],
);

/**
 * @generated from message stabilityai.platformapis.generation.v1.TransformParameters
 */
export const TransformParameters = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.TransformParameters",
  () => [
    { no: 2, name: "color_adjust", kind: "message", T: TransformColorAdjust, oneof: "transform" },
    { no: 4, name: "depth_calc", kind: "message", T: TransformDepthCalc, oneof: "transform" },
    { no: 5, name: "resample", kind: "message", T: TransformResample, oneof: "transform" },
    { no: 6, name: "camera_pose", kind: "message", T: TransformCameraPose, oneof: "transform" },
  ],
);

/**
 * @generated from message stabilityai.platformapis.generation.v1.AssetParameters
 */
export const AssetParameters = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.AssetParameters",
  () => [
    { no: 1, name: "action", kind: "enum", T: proto3.getEnumType(AssetAction) },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "use", kind: "enum", T: proto3.getEnumType(AssetUse) },
  ],
);

/**
 * AnswerMeta is a set of metadata about an answer, usually the operating
 * environment.
 *
 * @generated from message stabilityai.platformapis.generation.v1.AnswerMeta
 */
export const AnswerMeta = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.AnswerMeta",
  () => [
    { no: 1, name: "gpu_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "cpu_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "engine_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ],
);

/**
 * An Answer is a response to a Request. It is a set of Artifacts, which can be
 * of any type and forwarded to the client or the next stage.
 *
 * @generated from message stabilityai.platformapis.generation.v1.Answer
 */
export const Answer = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.Answer",
  () => [
    { no: 1, name: "answer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "received", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "created", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "meta", kind: "message", T: AnswerMeta, opt: true },
    { no: 7, name: "artifacts", kind: "message", T: Artifact, repeated: true },
  ],
);

/**
 * An AnswerBatch is a set of Answers. It can represent one or several completed
 * requests, which may be sent to the client in a single response.
 *
 * @generated from message stabilityai.platformapis.generation.v1.AnswerBatch
 */
export const AnswerBatch = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.AnswerBatch",
  () => [
    { no: 1, name: "batch_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "answers", kind: "message", T: Answer, repeated: true },
  ],
);

/**
 * A Request is a set of Artifacts, which can be of any type with model or
 * transform parameters. It is sent to the server, which will respond with an
 * Answer.
 *
 * @generated from message stabilityai.platformapis.generation.v1.Request
 */
export const Request = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.Request",
  () => [
    { no: 1, name: "engine_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "requested_type", kind: "enum", T: proto3.getEnumType(ArtifactType) },
    { no: 4, name: "prompt", kind: "message", T: Prompt, repeated: true },
    { no: 5, name: "image", kind: "message", T: ImageParameters, oneof: "params" },
    { no: 7, name: "classifier", kind: "message", T: ClassifierParameters, oneof: "params" },
    { no: 8, name: "asset", kind: "message", T: AssetParameters, oneof: "params" },
    { no: 11, name: "interpolate", kind: "message", T: InterpolateParameters, oneof: "params" },
    { no: 12, name: "transform", kind: "message", T: TransformParameters, oneof: "params" },
    { no: 6, name: "conditioner", kind: "message", T: ConditionerParameters, opt: true },
    { no: 2047, name: "extras", kind: "message", T: Struct, opt: true },
  ],
);

/**
 * @generated from message stabilityai.platformapis.generation.v1.OnStatus
 */
export const OnStatus = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.OnStatus",
  () => [
    { no: 1, name: "reason", kind: "enum", T: proto3.getEnumType(FinishReason), repeated: true },
    { no: 2, name: "target", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "action", kind: "enum", T: proto3.getEnumType(StageAction), repeated: true },
  ],
);

/**
 * @generated from message stabilityai.platformapis.generation.v1.Stage
 */
export const Stage = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.Stage",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "request", kind: "message", T: Request },
    { no: 3, name: "on_status", kind: "message", T: OnStatus, repeated: true },
  ],
);

/**
 * @generated from message stabilityai.platformapis.generation.v1.ChainRequest
 */
export const ChainRequest = proto3.makeMessageType(
  "stabilityai.platformapis.generation.v1.ChainRequest",
  () => [
    { no: 1, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "stage", kind: "message", T: Stage, repeated: true },
  ],
);

