// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: stability_api/platform/engines/v1/engines.proto

package enginesv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/stability-ai/api-interfaces/src/stability_api/platform/engines/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// EnginesServiceName is the fully-qualified name of the EnginesService service.
	EnginesServiceName = "stabilityai.platformapis.engines.v1.EnginesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EnginesServiceListEnginesProcedure is the fully-qualified name of the EnginesService's
	// ListEngines RPC.
	EnginesServiceListEnginesProcedure = "/stabilityai.platformapis.engines.v1.EnginesService/ListEngines"
)

// EnginesServiceClient is a client for the stabilityai.platformapis.engines.v1.EnginesService
// service.
type EnginesServiceClient interface {
	ListEngines(context.Context, *connect_go.Request[v1.ListEnginesRequest]) (*connect_go.Response[v1.Engines], error)
}

// NewEnginesServiceClient constructs a client for the
// stabilityai.platformapis.engines.v1.EnginesService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEnginesServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) EnginesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &enginesServiceClient{
		listEngines: connect_go.NewClient[v1.ListEnginesRequest, v1.Engines](
			httpClient,
			baseURL+EnginesServiceListEnginesProcedure,
			opts...,
		),
	}
}

// enginesServiceClient implements EnginesServiceClient.
type enginesServiceClient struct {
	listEngines *connect_go.Client[v1.ListEnginesRequest, v1.Engines]
}

// ListEngines calls stabilityai.platformapis.engines.v1.EnginesService.ListEngines.
func (c *enginesServiceClient) ListEngines(ctx context.Context, req *connect_go.Request[v1.ListEnginesRequest]) (*connect_go.Response[v1.Engines], error) {
	return c.listEngines.CallUnary(ctx, req)
}

// EnginesServiceHandler is an implementation of the
// stabilityai.platformapis.engines.v1.EnginesService service.
type EnginesServiceHandler interface {
	ListEngines(context.Context, *connect_go.Request[v1.ListEnginesRequest]) (*connect_go.Response[v1.Engines], error)
}

// NewEnginesServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEnginesServiceHandler(svc EnginesServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(EnginesServiceListEnginesProcedure, connect_go.NewUnaryHandler(
		EnginesServiceListEnginesProcedure,
		svc.ListEngines,
		opts...,
	))
	return "/stabilityai.platformapis.engines.v1.EnginesService/", mux
}

// UnimplementedEnginesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEnginesServiceHandler struct{}

func (UnimplementedEnginesServiceHandler) ListEngines(context.Context, *connect_go.Request[v1.ListEnginesRequest]) (*connect_go.Response[v1.Engines], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("stabilityai.platformapis.engines.v1.EnginesService.ListEngines is not implemented"))
}
