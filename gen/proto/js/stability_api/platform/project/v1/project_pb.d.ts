// @generated by protoc-gen-es v1.2.0
// @generated from file stability_api/platform/project/v1/project.proto (package stabilityai.platformapis.project.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Request } from "../../generation/v1/generation_pb.js";

/**
 * @generated from enum stabilityai.platformapis.project.v1.ProjectAccess
 */
export declare enum ProjectAccess {
  /**
   * Private access, only owner organization can access
   *
   * @generated from enum value: PROJECT_ACCESS_PRIVATE = 0;
   */
  PRIVATE = 0,

  /**
   * Public access, anyone can access
   *
   * @generated from enum value: PROJECT_ACCESS_PUBLIC = 1;
   */
  PUBLIC = 1,
}

/**
 * @generated from enum stabilityai.platformapis.project.v1.ProjectStatus
 */
export declare enum ProjectStatus {
  /**
   * Inactive project
   *
   * @generated from enum value: PROJECT_STATUS_INACTIVE = 0;
   */
  INACTIVE = 0,

  /**
   * Active project
   *
   * @generated from enum value: PROJECT_STATUS_ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * Deleted project, only set by delete endpoint
   *
   * @generated from enum value: PROJECT_STATUS_DELETED = 2;
   */
  DELETED = 2,
}

/**
 * @generated from enum stabilityai.platformapis.project.v1.ProjectAssetUse
 */
export declare enum ProjectAssetUse {
  /**
   * Asset does not have use defined
   *
   * @generated from enum value: PROJECT_ASSET_USE_UNDEFINED = 0;
   */
  UNDEFINED = 0,

  /**
   * Asset is used as an input for the project
   *
   * @generated from enum value: PROJECT_ASSET_USE_INPUT = 1;
   */
  INPUT = 1,

  /**
   * Asset is an output from the project
   *
   * @generated from enum value: PROJECT_ASSET_USE_OUTPUT = 2;
   */
  OUTPUT = 2,

  /**
   * Asset is an output from an intermediate step of the project
   *
   * @generated from enum value: PROJECT_ASSET_USE_INTERMEDIATE = 3;
   */
  INTERMEDIATE = 3,

  /**
   * Asset is used as the project file for the project
   *
   * @generated from enum value: PROJECT_ASSET_USE_PROJECT = 4;
   */
  PROJECT = 4,
}

/**
 * @generated from enum stabilityai.platformapis.project.v1.ProjectSortDir
 */
export declare enum ProjectSortDir {
  /**
   * Sort direction is not specified, uses default
   *
   * @generated from enum value: PROJECT_SORT_DIR_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Sort in ascending order
   *
   * @generated from enum value: PROJECT_SORT_DIR_ASC = 1;
   */
  ASC = 1,

  /**
   * Sort in descending order
   *
   * @generated from enum value: PROJECT_SORT_DIR_DESC = 2;
   */
  DESC = 2,
}

/**
 * @generated from message stabilityai.platformapis.project.v1.ProjectAsset
 */
export declare class ProjectAsset extends Message<ProjectAsset> {
  /**
   * ID of the asset, UUIDv4
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The URI to the asset
   *
   * @generated from field: string uri = 2;
   */
  uri: string;

  /**
   * The use of the asset with respect to the project
   *
   * @generated from field: stabilityai.platformapis.project.v1.ProjectAssetUse use = 3;
   */
  use: ProjectAssetUse;

  /**
   * The name of the asset
   *
   * @generated from field: string name = 4;
   */
  name: string;

  /**
   * The asset size in bytes
   *
   * @generated from field: uint64 size = 5;
   */
  size: bigint;

  /**
   * Time of asset creation (UTC seconds epoch)
   *
   * @generated from field: uint64 created_at = 6;
   */
  createdAt: bigint;

  /**
   * Time of last asset update (UTC seconds epoch)
   *
   * @generated from field: uint64 updated_at = 7;
   */
  updatedAt: bigint;

  /**
   * The request object that is associated with the artifact
   *
   * @generated from field: stabilityai.platformapis.generation.v1.Request request = 8;
   */
  request?: Request;

  /**
   * The tags associated with the asset
   *
   * @generated from field: map<string, string> tags = 9;
   */
  tags: { [key: string]: string };

  constructor(data?: PartialMessage<ProjectAsset>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "stabilityai.platformapis.project.v1.ProjectAsset";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectAsset;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectAsset;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectAsset;

  static equals(a: ProjectAsset | PlainMessage<ProjectAsset> | undefined, b: ProjectAsset | PlainMessage<ProjectAsset> | undefined): boolean;
}

/**
 * @generated from message stabilityai.platformapis.project.v1.Project
 */
export declare class Project extends Message<Project> {
  /**
   * ID of the project, UUIDv4
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Title of the project
   *
   * @generated from field: string title = 2;
   */
  title: string;

  /**
   * The ID of the organization owning the project
   *
   * @generated from field: string owner_id = 3;
   */
  ownerId: string;

  /**
   * The access of the project (such as public vs private)
   *
   * @generated from field: stabilityai.platformapis.project.v1.ProjectAccess access = 4;
   */
  access: ProjectAccess;

  /**
   * The status of the project (such as active vs inactive)
   *
   * @generated from field: stabilityai.platformapis.project.v1.ProjectStatus status = 5;
   */
  status: ProjectStatus;

  /**
   * The size of the project in bytes
   *
   * @generated from field: uint64 size = 6;
   */
  size: bigint;

  /**
   * Project file for the project
   *
   * @generated from field: stabilityai.platformapis.project.v1.ProjectAsset file = 7;
   */
  file?: ProjectAsset;

  /**
   * Time of project creation (UTC seconds epoch)
   *
   * @generated from field: uint64 created_at = 8;
   */
  createdAt: bigint;

  /**
   * Time of last project update (UTC seconds epoch)
   *
   * @generated from field: uint64 updated_at = 9;
   */
  updatedAt: bigint;

  /**
   * The listing of all assets associated with the project
   *
   * @generated from field: repeated stabilityai.platformapis.project.v1.ProjectAsset assets = 10;
   */
  assets: ProjectAsset[];

  constructor(data?: PartialMessage<Project>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "stabilityai.platformapis.project.v1.Project";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Project;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Project;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Project;

  static equals(a: Project | PlainMessage<Project> | undefined, b: Project | PlainMessage<Project> | undefined): boolean;
}

/**
 * @generated from message stabilityai.platformapis.project.v1.CreateProjectRequest
 */
export declare class CreateProjectRequest extends Message<CreateProjectRequest> {
  /**
   * title of the project
   *
   * @generated from field: string title = 1;
   */
  title: string;

  /**
   * The ID of the organization owning the project, empty for default org for user
   *
   * @generated from field: optional string owner_id = 2;
   */
  ownerId?: string;

  /**
   * The access of the project (such as public vs private)
   *
   * @generated from field: stabilityai.platformapis.project.v1.ProjectAccess access = 3;
   */
  access: ProjectAccess;

  /**
   * The status of the project (such as active vs inactive)
   *
   * @generated from field: stabilityai.platformapis.project.v1.ProjectStatus status = 4;
   */
  status: ProjectStatus;

  /**
   * Project file for the project (if existing, else will create)
   *
   * @generated from field: optional stabilityai.platformapis.project.v1.ProjectAsset file = 5;
   */
  file?: ProjectAsset;

  constructor(data?: PartialMessage<CreateProjectRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "stabilityai.platformapis.project.v1.CreateProjectRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateProjectRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateProjectRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateProjectRequest;

  static equals(a: CreateProjectRequest | PlainMessage<CreateProjectRequest> | undefined, b: CreateProjectRequest | PlainMessage<CreateProjectRequest> | undefined): boolean;
}

/**
 * @generated from message stabilityai.platformapis.project.v1.UpdateProjectRequest
 */
export declare class UpdateProjectRequest extends Message<UpdateProjectRequest> {
  /**
   * ID of the project, UUIDv4
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The ID of the organization owning the project, empty for default org for user
   *
   * @generated from field: optional string owner_id = 2;
   */
  ownerId?: string;

  /**
   * Title of the project
   *
   * @generated from field: optional string title = 3;
   */
  title?: string;

  /**
   * The access of the project (such as public vs private)
   *
   * @generated from field: optional stabilityai.platformapis.project.v1.ProjectAccess access = 4;
   */
  access?: ProjectAccess;

  /**
   * The status of the project (such as active vs inactive)
   *
   * @generated from field: optional stabilityai.platformapis.project.v1.ProjectStatus status = 5;
   */
  status?: ProjectStatus;

  /**
   * Project file for the project
   *
   * @generated from field: optional stabilityai.platformapis.project.v1.ProjectAsset file = 6;
   */
  file?: ProjectAsset;

  constructor(data?: PartialMessage<UpdateProjectRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "stabilityai.platformapis.project.v1.UpdateProjectRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateProjectRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateProjectRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateProjectRequest;

  static equals(a: UpdateProjectRequest | PlainMessage<UpdateProjectRequest> | undefined, b: UpdateProjectRequest | PlainMessage<UpdateProjectRequest> | undefined): boolean;
}

/**
 * @generated from message stabilityai.platformapis.project.v1.ListProjectRequest
 */
export declare class ListProjectRequest extends Message<ListProjectRequest> {
  /**
   * The ID of the organization owning the project, empty for default org for user
   *
   * @generated from field: optional string owner_id = 1;
   */
  ownerId?: string;

  constructor(data?: PartialMessage<ListProjectRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "stabilityai.platformapis.project.v1.ListProjectRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProjectRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProjectRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProjectRequest;

  static equals(a: ListProjectRequest | PlainMessage<ListProjectRequest> | undefined, b: ListProjectRequest | PlainMessage<ListProjectRequest> | undefined): boolean;
}

/**
 * @generated from message stabilityai.platformapis.project.v1.GetProjectRequest
 */
export declare class GetProjectRequest extends Message<GetProjectRequest> {
  /**
   * ID of the project to request, UUIDv4, empty string uses default project
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The ID of the organization owning the project, empty for default org for user
   *
   * @generated from field: optional string owner_id = 2;
   */
  ownerId?: string;

  constructor(data?: PartialMessage<GetProjectRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "stabilityai.platformapis.project.v1.GetProjectRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProjectRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProjectRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProjectRequest;

  static equals(a: GetProjectRequest | PlainMessage<GetProjectRequest> | undefined, b: GetProjectRequest | PlainMessage<GetProjectRequest> | undefined): boolean;
}

/**
 * @generated from message stabilityai.platformapis.project.v1.DeleteProjectRequest
 */
export declare class DeleteProjectRequest extends Message<DeleteProjectRequest> {
  /**
   * ID of the project to request, UUIDv4
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The ID of the organization owning the project, empty for default org for user
   *
   * @generated from field: optional string owner_id = 2;
   */
  ownerId?: string;

  constructor(data?: PartialMessage<DeleteProjectRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "stabilityai.platformapis.project.v1.DeleteProjectRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteProjectRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteProjectRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteProjectRequest;

  static equals(a: DeleteProjectRequest | PlainMessage<DeleteProjectRequest> | undefined, b: DeleteProjectRequest | PlainMessage<DeleteProjectRequest> | undefined): boolean;
}

/**
 * @generated from message stabilityai.platformapis.project.v1.QueryAssetsRequest
 */
export declare class QueryAssetsRequest extends Message<QueryAssetsRequest> {
  /**
   * ID of the project to request, UUIDv4, empty string uses default project
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The ID of the organization owning the assets, unset for default org for user
   *
   * @generated from field: optional string owner_id = 2;
   */
  ownerId?: string;

  /**
   * The time (UTC seconds epoch) to start listing assets from, unset for no restriction
   *
   * @generated from field: optional uint64 since = 3;
   */
  since?: bigint;

  /**
   * The time (UTC seconds epoch) to stop listing assets at, unset for no restriction
   *
   * @generated from field: optional uint64 until = 4;
   */
  until?: bigint;

  /**
   * The maximum number of assets to return, unset for no limit
   *
   * @generated from field: optional uint64 limit = 5;
   */
  limit?: bigint;

  /**
   * The key to start from, used to paginate results, unset for no offset
   *
   * @generated from field: optional string start_key = 6;
   */
  startKey?: string;

  /**
   * The asset usage to filter the assets returned, empty for no filter
   *
   * @generated from field: repeated stabilityai.platformapis.project.v1.ProjectAssetUse use = 7;
   */
  use: ProjectAssetUse[];

  /**
   * The sort direction based on asset creation time, default is descending
   *
   * @generated from field: stabilityai.platformapis.project.v1.ProjectSortDir sort_dir = 8;
   */
  sortDir: ProjectSortDir;

  /**
   * The tag values used to filter the assets returned, empty for no filter
   *
   * @generated from field: map<string, string> tags = 9;
   */
  tags: { [key: string]: string };

  constructor(data?: PartialMessage<QueryAssetsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "stabilityai.platformapis.project.v1.QueryAssetsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAssetsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAssetsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAssetsRequest;

  static equals(a: QueryAssetsRequest | PlainMessage<QueryAssetsRequest> | undefined, b: QueryAssetsRequest | PlainMessage<QueryAssetsRequest> | undefined): boolean;
}

/**
 * @generated from message stabilityai.platformapis.project.v1.QueryAssetsResponse
 */
export declare class QueryAssetsResponse extends Message<QueryAssetsResponse> {
  /**
   * The assets returned by the query
   *
   * @generated from field: repeated stabilityai.platformapis.project.v1.ProjectAsset assets = 1;
   */
  assets: ProjectAsset[];

  /**
   * The last asset key returned when the results were limited, unset when not limited
   *
   * @generated from field: optional string last_key = 2;
   */
  lastKey?: string;

  constructor(data?: PartialMessage<QueryAssetsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "stabilityai.platformapis.project.v1.QueryAssetsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAssetsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAssetsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAssetsResponse;

  static equals(a: QueryAssetsResponse | PlainMessage<QueryAssetsResponse> | undefined, b: QueryAssetsResponse | PlainMessage<QueryAssetsResponse> | undefined): boolean;
}

/**
 * @generated from message stabilityai.platformapis.project.v1.TagAssetsRequest
 */
export declare class TagAssetsRequest extends Message<TagAssetsRequest> {
  /**
   * ID of the project to request, UUIDv4, empty string uses default project
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The ID of the organization owning the assets, unset for default org for user
   *
   * @generated from field: optional string owner_id = 2;
   */
  ownerId?: string;

  /**
   * The IDs of the assets to tag in the project, UUIDv4, limit 1000
   *
   * @generated from field: repeated string asset_ids = 3;
   */
  assetIds: string[];

  /**
   * The tags to add to the assets
   *
   * @generated from field: map<string, string> tags = 4;
   */
  tags: { [key: string]: string };

  constructor(data?: PartialMessage<TagAssetsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "stabilityai.platformapis.project.v1.TagAssetsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TagAssetsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TagAssetsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TagAssetsRequest;

  static equals(a: TagAssetsRequest | PlainMessage<TagAssetsRequest> | undefined, b: TagAssetsRequest | PlainMessage<TagAssetsRequest> | undefined): boolean;
}

/**
 * @generated from message stabilityai.platformapis.project.v1.TagAssetsResponse
 */
export declare class TagAssetsResponse extends Message<TagAssetsResponse> {
  /**
   * ID of the project, UUIDv4
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The ID of the organization owning the project
   *
   * @generated from field: string owner_id = 2;
   */
  ownerId: string;

  /**
   * The IDs of the assets updated in the project, UUIDv4, limit 1000
   *
   * @generated from field: repeated string asset_ids = 3;
   */
  assetIds: string[];

  constructor(data?: PartialMessage<TagAssetsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "stabilityai.platformapis.project.v1.TagAssetsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TagAssetsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TagAssetsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TagAssetsResponse;

  static equals(a: TagAssetsResponse | PlainMessage<TagAssetsResponse> | undefined, b: TagAssetsResponse | PlainMessage<TagAssetsResponse> | undefined): boolean;
}

/**
 * @generated from message stabilityai.platformapis.project.v1.UntagAssetsRequest
 */
export declare class UntagAssetsRequest extends Message<UntagAssetsRequest> {
  /**
   * ID of the project to request, UUIDv4, empty string uses default project
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The ID of the organization owning the assets, unset for default org for user
   *
   * @generated from field: optional string owner_id = 2;
   */
  ownerId?: string;

  /**
   * The IDs of the assets to tag in the project, UUIDv4, limit 1000
   *
   * @generated from field: repeated string asset_ids = 3;
   */
  assetIds: string[];

  /**
   * The keys of the tags to remove from the assets
   *
   * @generated from field: repeated string tag_keys = 4;
   */
  tagKeys: string[];

  constructor(data?: PartialMessage<UntagAssetsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "stabilityai.platformapis.project.v1.UntagAssetsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UntagAssetsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UntagAssetsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UntagAssetsRequest;

  static equals(a: UntagAssetsRequest | PlainMessage<UntagAssetsRequest> | undefined, b: UntagAssetsRequest | PlainMessage<UntagAssetsRequest> | undefined): boolean;
}

/**
 * @generated from message stabilityai.platformapis.project.v1.UntagAssetsResponse
 */
export declare class UntagAssetsResponse extends Message<UntagAssetsResponse> {
  /**
   * ID of the project, UUIDv4
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The ID of the organization owning the project
   *
   * @generated from field: string owner_id = 2;
   */
  ownerId: string;

  /**
   * The IDs of the assets updated in the project, UUIDv4, limit 1000
   *
   * @generated from field: repeated string asset_ids = 3;
   */
  assetIds: string[];

  constructor(data?: PartialMessage<UntagAssetsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "stabilityai.platformapis.project.v1.UntagAssetsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UntagAssetsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UntagAssetsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UntagAssetsResponse;

  static equals(a: UntagAssetsResponse | PlainMessage<UntagAssetsResponse> | undefined, b: UntagAssetsResponse | PlainMessage<UntagAssetsResponse> | undefined): boolean;
}

/**
 * @generated from message stabilityai.platformapis.project.v1.DeleteAssetsRequest
 */
export declare class DeleteAssetsRequest extends Message<DeleteAssetsRequest> {
  /**
   * ID of the project to request, UUIDv4, empty string uses default project
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The ID of the organization owning the project, unset for default org for user
   *
   * @generated from field: optional string owner_id = 2;
   */
  ownerId?: string;

  /**
   * The IDs of the assets to delete from the project, UUIDv4, limit 1000
   *
   * @generated from field: repeated string asset_ids = 3;
   */
  assetIds: string[];

  constructor(data?: PartialMessage<DeleteAssetsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "stabilityai.platformapis.project.v1.DeleteAssetsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAssetsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAssetsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAssetsRequest;

  static equals(a: DeleteAssetsRequest | PlainMessage<DeleteAssetsRequest> | undefined, b: DeleteAssetsRequest | PlainMessage<DeleteAssetsRequest> | undefined): boolean;
}

/**
 * @generated from message stabilityai.platformapis.project.v1.DeleteAssetsResponse
 */
export declare class DeleteAssetsResponse extends Message<DeleteAssetsResponse> {
  /**
   * ID of the project, UUIDv4
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The ID of the organization owning the project
   *
   * @generated from field: string owner_id = 2;
   */
  ownerId: string;

  /**
   * The IDs of the assets deleted from the project, UUIDv4, limit 1000
   *
   * @generated from field: repeated string asset_ids = 3;
   */
  assetIds: string[];

  constructor(data?: PartialMessage<DeleteAssetsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "stabilityai.platformapis.project.v1.DeleteAssetsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAssetsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAssetsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAssetsResponse;

  static equals(a: DeleteAssetsResponse | PlainMessage<DeleteAssetsResponse> | undefined, b: DeleteAssetsResponse | PlainMessage<DeleteAssetsResponse> | undefined): boolean;
}

