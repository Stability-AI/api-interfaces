// Code generated by connect-kotlin. DO NOT EDIT.
//
// Source: stabilityai/platformapis/dashboard/v1/dashboard.proto
//
package com.stabilityai.api.dashboard.v1

import build.buf.connect.Headers
import build.buf.connect.MethodSpec
import build.buf.connect.ProtocolClientInterface
import build.buf.connect.ResponseMessage

public class DashboardServiceClient(
  private val client: ProtocolClientInterface,
) : DashboardServiceClientInterface {
  /**
   *  Get info
   */
  public override suspend fun getMe(request: EmptyRequest, headers: Headers): ResponseMessage<User>
      = client.unary(
    request,
    headers,
    MethodSpec(
    "stabilityai.api.dashboard.v1.DashboardService/GetMe",
      com.stabilityai.api.dashboard.v1.EmptyRequest::class,
      com.stabilityai.api.dashboard.v1.User::class
    ),
  )


  public override suspend fun getOrganization(request: GetOrganizationRequest, headers: Headers):
      ResponseMessage<Organization> = client.unary(
    request,
    headers,
    MethodSpec(
    "stabilityai.api.dashboard.v1.DashboardService/GetOrganization",
      com.stabilityai.api.dashboard.v1.GetOrganizationRequest::class,
      com.stabilityai.api.dashboard.v1.Organization::class
    ),
  )


  public override suspend fun getMetrics(request: GetMetricsRequest, headers: Headers):
      ResponseMessage<Metrics> = client.unary(
    request,
    headers,
    MethodSpec(
    "stabilityai.api.dashboard.v1.DashboardService/GetMetrics",
      com.stabilityai.api.dashboard.v1.GetMetricsRequest::class,
      com.stabilityai.api.dashboard.v1.Metrics::class
    ),
  )


  /**
   *  API key management
   */
  public override suspend fun createAPIKey(request: APIKeyRequest, headers: Headers):
      ResponseMessage<APIKey> = client.unary(
    request,
    headers,
    MethodSpec(
    "stabilityai.api.dashboard.v1.DashboardService/CreateAPIKey",
      com.stabilityai.api.dashboard.v1.APIKeyRequest::class,
      com.stabilityai.api.dashboard.v1.APIKey::class
    ),
  )


  public override suspend fun deleteAPIKey(request: APIKeyFindRequest, headers: Headers):
      ResponseMessage<APIKey> = client.unary(
    request,
    headers,
    MethodSpec(
    "stabilityai.api.dashboard.v1.DashboardService/DeleteAPIKey",
      com.stabilityai.api.dashboard.v1.APIKeyFindRequest::class,
      com.stabilityai.api.dashboard.v1.APIKey::class
    ),
  )


  /**
   *  User settings
   */
  public override suspend fun updateDefaultOrganization(request: UpdateDefaultOrganizationRequest,
      headers: Headers): ResponseMessage<User> = client.unary(
    request,
    headers,
    MethodSpec(
    "stabilityai.api.dashboard.v1.DashboardService/UpdateDefaultOrganization",
      com.stabilityai.api.dashboard.v1.UpdateDefaultOrganizationRequest::class,
      com.stabilityai.api.dashboard.v1.User::class
    ),
  )


  public override suspend fun getClientSettings(request: EmptyRequest, headers: Headers):
      ResponseMessage<ClientSettings> = client.unary(
    request,
    headers,
    MethodSpec(
    "stabilityai.api.dashboard.v1.DashboardService/GetClientSettings",
      com.stabilityai.api.dashboard.v1.EmptyRequest::class,
      com.stabilityai.api.dashboard.v1.ClientSettings::class
    ),
  )


  public override suspend fun setClientSettings(request: ClientSettings, headers: Headers):
      ResponseMessage<ClientSettings> = client.unary(
    request,
    headers,
    MethodSpec(
    "stabilityai.api.dashboard.v1.DashboardService/SetClientSettings",
      com.stabilityai.api.dashboard.v1.ClientSettings::class,
      com.stabilityai.api.dashboard.v1.ClientSettings::class
    ),
  )


  public override suspend fun updateUserInfo(request: UpdateUserInfoRequest, headers: Headers):
      ResponseMessage<User> = client.unary(
    request,
    headers,
    MethodSpec(
    "stabilityai.api.dashboard.v1.DashboardService/UpdateUserInfo",
      com.stabilityai.api.dashboard.v1.UpdateUserInfoRequest::class,
      com.stabilityai.api.dashboard.v1.User::class
    ),
  )


  public override suspend fun createPasswordChangeTicket(request: EmptyRequest, headers: Headers):
      ResponseMessage<UserPasswordChangeTicket> = client.unary(
    request,
    headers,
    MethodSpec(
    "stabilityai.api.dashboard.v1.DashboardService/CreatePasswordChangeTicket",
      com.stabilityai.api.dashboard.v1.EmptyRequest::class,
      com.stabilityai.api.dashboard.v1.UserPasswordChangeTicket::class
    ),
  )


  public override suspend fun deleteAccount(request: EmptyRequest, headers: Headers):
      ResponseMessage<User> = client.unary(
    request,
    headers,
    MethodSpec(
    "stabilityai.api.dashboard.v1.DashboardService/DeleteAccount",
      com.stabilityai.api.dashboard.v1.EmptyRequest::class,
      com.stabilityai.api.dashboard.v1.User::class
    ),
  )


  /**
   *  Payment functions
   */
  public override suspend fun createCharge(request: CreateChargeRequest, headers: Headers):
      ResponseMessage<Charge> = client.unary(
    request,
    headers,
    MethodSpec(
    "stabilityai.api.dashboard.v1.DashboardService/CreateCharge",
      com.stabilityai.api.dashboard.v1.CreateChargeRequest::class,
      com.stabilityai.api.dashboard.v1.Charge::class
    ),
  )


  public override suspend fun getCharges(request: GetChargesRequest, headers: Headers):
      ResponseMessage<Charges> = client.unary(
    request,
    headers,
    MethodSpec(
    "stabilityai.api.dashboard.v1.DashboardService/GetCharges",
      com.stabilityai.api.dashboard.v1.GetChargesRequest::class,
      com.stabilityai.api.dashboard.v1.Charges::class
    ),
  )


  public override suspend fun createAutoChargeIntent(request: CreateAutoChargeIntentRequest,
      headers: Headers): ResponseMessage<AutoChargeIntent> = client.unary(
    request,
    headers,
    MethodSpec(
    "stabilityai.api.dashboard.v1.DashboardService/CreateAutoChargeIntent",
      com.stabilityai.api.dashboard.v1.CreateAutoChargeIntentRequest::class,
      com.stabilityai.api.dashboard.v1.AutoChargeIntent::class
    ),
  )


  public override suspend fun updateAutoChargeIntent(request: CreateAutoChargeIntentRequest,
      headers: Headers): ResponseMessage<AutoChargeIntent> = client.unary(
    request,
    headers,
    MethodSpec(
    "stabilityai.api.dashboard.v1.DashboardService/UpdateAutoChargeIntent",
      com.stabilityai.api.dashboard.v1.CreateAutoChargeIntentRequest::class,
      com.stabilityai.api.dashboard.v1.AutoChargeIntent::class
    ),
  )


  public override suspend fun getAutoChargeIntent(request: GetAutoChargeRequest, headers: Headers):
      ResponseMessage<AutoChargeIntent> = client.unary(
    request,
    headers,
    MethodSpec(
    "stabilityai.api.dashboard.v1.DashboardService/GetAutoChargeIntent",
      com.stabilityai.api.dashboard.v1.GetAutoChargeRequest::class,
      com.stabilityai.api.dashboard.v1.AutoChargeIntent::class
    ),
  )

}
