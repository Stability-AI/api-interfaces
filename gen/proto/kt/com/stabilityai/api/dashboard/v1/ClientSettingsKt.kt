// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: stability_api/platform/dashboard/v1/dashboard.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.stabilityai.api.dashboard.v1;

@kotlin.jvm.JvmName("-initializeclientSettings")
public inline fun clientSettings(block: com.stabilityai.api.dashboard.v1.ClientSettingsKt.Dsl.() -> kotlin.Unit): com.stabilityai.api.dashboard.v1.ClientSettings =
  com.stabilityai.api.dashboard.v1.ClientSettingsKt.Dsl._create(com.stabilityai.api.dashboard.v1.ClientSettings.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `stabilityai.api.dashboard.v1.ClientSettings`
 */
public object ClientSettingsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.stabilityai.api.dashboard.v1.ClientSettings.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.stabilityai.api.dashboard.v1.ClientSettings.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.stabilityai.api.dashboard.v1.ClientSettings = _builder.build()

    /**
     * `bytes settings = 1 [json_name = "settings"];`
     */
    public var settings: com.google.protobuf.ByteString
      @JvmName("getSettings")
      get() = _builder.getSettings()
      @JvmName("setSettings")
      set(value) {
        _builder.setSettings(value)
      }
    /**
     * `bytes settings = 1 [json_name = "settings"];`
     */
    public fun clearSettings() {
      _builder.clearSettings()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.stabilityai.api.dashboard.v1.ClientSettings.copy(block: com.stabilityai.api.dashboard.v1.ClientSettingsKt.Dsl.() -> kotlin.Unit): com.stabilityai.api.dashboard.v1.ClientSettings =
  com.stabilityai.api.dashboard.v1.ClientSettingsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

