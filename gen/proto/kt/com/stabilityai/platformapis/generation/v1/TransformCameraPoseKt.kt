// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: stabilityai/platformapis/generation/v1/generation.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.stabilityai.platformapis.generation.v1;

@kotlin.jvm.JvmName("-initializetransformCameraPose")
public inline fun transformCameraPose(block: com.stabilityai.platformapis.generation.v1.TransformCameraPoseKt.Dsl.() -> kotlin.Unit): com.stabilityai.platformapis.generation.v1.TransformCameraPose =
  com.stabilityai.platformapis.generation.v1.TransformCameraPoseKt.Dsl._create(com.stabilityai.platformapis.generation.v1.TransformCameraPose.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `stabilityai.platformapis.generation.v1.TransformCameraPose`
 */
public object TransformCameraPoseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.stabilityai.platformapis.generation.v1.TransformCameraPose.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.stabilityai.platformapis.generation.v1.TransformCameraPose.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.stabilityai.platformapis.generation.v1.TransformCameraPose = _builder.build()

    /**
     * ```
     * 4x4 transform matrix for the next frame
     * ```
     *
     * `.stabilityai.platformapis.generation.v1.TransformMatrix world_to_view_matrix = 1 [json_name = "worldToViewMatrix"];`
     */
    public var worldToViewMatrix: com.stabilityai.platformapis.generation.v1.TransformMatrix
      @JvmName("getWorldToViewMatrix")
      get() = _builder.getWorldToViewMatrix()
      @JvmName("setWorldToViewMatrix")
      set(value) {
        _builder.setWorldToViewMatrix(value)
      }
    /**
     * ```
     * 4x4 transform matrix for the next frame
     * ```
     *
     * `.stabilityai.platformapis.generation.v1.TransformMatrix world_to_view_matrix = 1 [json_name = "worldToViewMatrix"];`
     */
    public fun clearWorldToViewMatrix() {
      _builder.clearWorldToViewMatrix()
    }
    /**
     * ```
     * 4x4 transform matrix for the next frame
     * ```
     *
     * `.stabilityai.platformapis.generation.v1.TransformMatrix world_to_view_matrix = 1 [json_name = "worldToViewMatrix"];`
     * @return Whether the worldToViewMatrix field is set.
     */
    public fun hasWorldToViewMatrix(): kotlin.Boolean {
      return _builder.hasWorldToViewMatrix()
    }

    /**
     * `.stabilityai.platformapis.generation.v1.CameraParameters camera_parameters = 2 [json_name = "cameraParameters"];`
     */
    public var cameraParameters: com.stabilityai.platformapis.generation.v1.CameraParameters
      @JvmName("getCameraParameters")
      get() = _builder.getCameraParameters()
      @JvmName("setCameraParameters")
      set(value) {
        _builder.setCameraParameters(value)
      }
    /**
     * `.stabilityai.platformapis.generation.v1.CameraParameters camera_parameters = 2 [json_name = "cameraParameters"];`
     */
    public fun clearCameraParameters() {
      _builder.clearCameraParameters()
    }
    /**
     * `.stabilityai.platformapis.generation.v1.CameraParameters camera_parameters = 2 [json_name = "cameraParameters"];`
     * @return Whether the cameraParameters field is set.
     */
    public fun hasCameraParameters(): kotlin.Boolean {
      return _builder.hasCameraParameters()
    }

    /**
     * ```
     * Prefill masked areas with values matching the colors around the area
     * ```
     *
     * `bool do_prefill = 5 [json_name = "doPrefill"];`
     */
    public var doPrefill: kotlin.Boolean
      @JvmName("getDoPrefill")
      get() = _builder.getDoPrefill()
      @JvmName("setDoPrefill")
      set(value) {
        _builder.setDoPrefill(value)
      }
    /**
     * ```
     * Prefill masked areas with values matching the colors around the area
     * ```
     *
     * `bool do_prefill = 5 [json_name = "doPrefill"];`
     */
    public fun clearDoPrefill() {
      _builder.clearDoPrefill()
    }

    /**
     * ```
     * Both image and mask will be rendered using this method.
     * ```
     *
     * `.stabilityai.platformapis.generation.v1.RenderMode render_mode = 8 [json_name = "renderMode"];`
     */
    public var renderMode: com.stabilityai.platformapis.generation.v1.RenderMode
      @JvmName("getRenderMode")
      get() = _builder.getRenderMode()
      @JvmName("setRenderMode")
      set(value) {
        _builder.setRenderMode(value)
      }
    public var renderModeValue: kotlin.Int
      @JvmName("getRenderModeValue")
      get() = _builder.getRenderModeValue()
      @JvmName("setRenderModeValue")
      set(value) {
        _builder.setRenderModeValue(value)
      }
    /**
     * ```
     * Both image and mask will be rendered using this method.
     * ```
     *
     * `.stabilityai.platformapis.generation.v1.RenderMode render_mode = 8 [json_name = "renderMode"];`
     */
    public fun clearRenderMode() {
      _builder.clearRenderMode()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.stabilityai.platformapis.generation.v1.TransformCameraPose.copy(block: com.stabilityai.platformapis.generation.v1.TransformCameraPoseKt.Dsl.() -> kotlin.Unit): com.stabilityai.platformapis.generation.v1.TransformCameraPose =
  com.stabilityai.platformapis.generation.v1.TransformCameraPoseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.stabilityai.platformapis.generation.v1.TransformCameraPoseOrBuilder.worldToViewMatrixOrNull: com.stabilityai.platformapis.generation.v1.TransformMatrix?
  get() = if (hasWorldToViewMatrix()) getWorldToViewMatrix() else null

public val com.stabilityai.platformapis.generation.v1.TransformCameraPoseOrBuilder.cameraParametersOrNull: com.stabilityai.platformapis.generation.v1.CameraParameters?
  get() = if (hasCameraParameters()) getCameraParameters() else null

