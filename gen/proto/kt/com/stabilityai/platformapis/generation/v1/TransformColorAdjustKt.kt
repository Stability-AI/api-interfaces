// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: stabilityai/platformapis/generation/v1/generation.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package com.stabilityai.platformapis.generation.v1;

@kotlin.jvm.JvmName("-initializetransformColorAdjust")
public inline fun transformColorAdjust(block: com.stabilityai.platformapis.generation.v1.TransformColorAdjustKt.Dsl.() -> kotlin.Unit): com.stabilityai.platformapis.generation.v1.TransformColorAdjust =
  com.stabilityai.platformapis.generation.v1.TransformColorAdjustKt.Dsl._create(com.stabilityai.platformapis.generation.v1.TransformColorAdjust.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `stabilityai.platformapis.generation.v1.TransformColorAdjust`
 */
public object TransformColorAdjustKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.stabilityai.platformapis.generation.v1.TransformColorAdjust.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.stabilityai.platformapis.generation.v1.TransformColorAdjust.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.stabilityai.platformapis.generation.v1.TransformColorAdjust = _builder.build()

    /**
     * ```
     * scale pixel intensities, 1.0 is no change
     * ```
     *
     * `optional float brightness = 1 [json_name = "brightness"];`
     */
    public var brightness: kotlin.Float
      @JvmName("getBrightness")
      get() = _builder.getBrightness()
      @JvmName("setBrightness")
      set(value) {
        _builder.setBrightness(value)
      }
    /**
     * ```
     * scale pixel intensities, 1.0 is no change
     * ```
     *
     * `optional float brightness = 1 [json_name = "brightness"];`
     */
    public fun clearBrightness() {
      _builder.clearBrightness()
    }
    /**
     * ```
     * scale pixel intensities, 1.0 is no change
     * ```
     *
     * `optional float brightness = 1 [json_name = "brightness"];`
     * @return Whether the brightness field is set.
     */
    public fun hasBrightness(): kotlin.Boolean {
      return _builder.hasBrightness()
    }

    /**
     * ```
     * contrast adjustment, 1.0 is no change
     * ```
     *
     * `optional float contrast = 2 [json_name = "contrast"];`
     */
    public var contrast: kotlin.Float
      @JvmName("getContrast")
      get() = _builder.getContrast()
      @JvmName("setContrast")
      set(value) {
        _builder.setContrast(value)
      }
    /**
     * ```
     * contrast adjustment, 1.0 is no change
     * ```
     *
     * `optional float contrast = 2 [json_name = "contrast"];`
     */
    public fun clearContrast() {
      _builder.clearContrast()
    }
    /**
     * ```
     * contrast adjustment, 1.0 is no change
     * ```
     *
     * `optional float contrast = 2 [json_name = "contrast"];`
     * @return Whether the contrast field is set.
     */
    public fun hasContrast(): kotlin.Boolean {
      return _builder.hasContrast()
    }

    /**
     * ```
     * -180 to 180 hue adjustment, 0.0 is no change
     * ```
     *
     * `optional float hue = 3 [json_name = "hue"];`
     */
    public var hue: kotlin.Float
      @JvmName("getHue")
      get() = _builder.getHue()
      @JvmName("setHue")
      set(value) {
        _builder.setHue(value)
      }
    /**
     * ```
     * -180 to 180 hue adjustment, 0.0 is no change
     * ```
     *
     * `optional float hue = 3 [json_name = "hue"];`
     */
    public fun clearHue() {
      _builder.clearHue()
    }
    /**
     * ```
     * -180 to 180 hue adjustment, 0.0 is no change
     * ```
     *
     * `optional float hue = 3 [json_name = "hue"];`
     * @return Whether the hue field is set.
     */
    public fun hasHue(): kotlin.Boolean {
      return _builder.hasHue()
    }

    /**
     * ```
     * 0.0 to 2.0 saturation scale, 1.0 is no change
     * ```
     *
     * `optional float saturation = 4 [json_name = "saturation"];`
     */
    public var saturation: kotlin.Float
      @JvmName("getSaturation")
      get() = _builder.getSaturation()
      @JvmName("setSaturation")
      set(value) {
        _builder.setSaturation(value)
      }
    /**
     * ```
     * 0.0 to 2.0 saturation scale, 1.0 is no change
     * ```
     *
     * `optional float saturation = 4 [json_name = "saturation"];`
     */
    public fun clearSaturation() {
      _builder.clearSaturation()
    }
    /**
     * ```
     * 0.0 to 2.0 saturation scale, 1.0 is no change
     * ```
     *
     * `optional float saturation = 4 [json_name = "saturation"];`
     * @return Whether the saturation field is set.
     */
    public fun hasSaturation(): kotlin.Boolean {
      return _builder.hasSaturation()
    }

    /**
     * ```
     * -1.0 to 1.0 lightness adjustment, 0.0 is no change
     * ```
     *
     * `optional float lightness = 5 [json_name = "lightness"];`
     */
    public var lightness: kotlin.Float
      @JvmName("getLightness")
      get() = _builder.getLightness()
      @JvmName("setLightness")
      set(value) {
        _builder.setLightness(value)
      }
    /**
     * ```
     * -1.0 to 1.0 lightness adjustment, 0.0 is no change
     * ```
     *
     * `optional float lightness = 5 [json_name = "lightness"];`
     */
    public fun clearLightness() {
      _builder.clearLightness()
    }
    /**
     * ```
     * -1.0 to 1.0 lightness adjustment, 0.0 is no change
     * ```
     *
     * `optional float lightness = 5 [json_name = "lightness"];`
     * @return Whether the lightness field is set.
     */
    public fun hasLightness(): kotlin.Boolean {
      return _builder.hasLightness()
    }

    /**
     * ```
     * image to color match
     * ```
     *
     * `optional .stabilityai.platformapis.generation.v1.Artifact match_image = 6 [json_name = "matchImage"];`
     */
    public var matchImage: com.stabilityai.platformapis.generation.v1.Artifact
      @JvmName("getMatchImage")
      get() = _builder.getMatchImage()
      @JvmName("setMatchImage")
      set(value) {
        _builder.setMatchImage(value)
      }
    /**
     * ```
     * image to color match
     * ```
     *
     * `optional .stabilityai.platformapis.generation.v1.Artifact match_image = 6 [json_name = "matchImage"];`
     */
    public fun clearMatchImage() {
      _builder.clearMatchImage()
    }
    /**
     * ```
     * image to color match
     * ```
     *
     * `optional .stabilityai.platformapis.generation.v1.Artifact match_image = 6 [json_name = "matchImage"];`
     * @return Whether the matchImage field is set.
     */
    public fun hasMatchImage(): kotlin.Boolean {
      return _builder.hasMatchImage()
    }
    public val TransformColorAdjustKt.Dsl.matchImageOrNull: com.stabilityai.platformapis.generation.v1.Artifact?
      get() = _builder.matchImageOrNull

    /**
     * ```
     * color match mode to use
     * ```
     *
     * `optional .stabilityai.platformapis.generation.v1.ColorMatchMode match_mode = 7 [json_name = "matchMode"];`
     */
    public var matchMode: com.stabilityai.platformapis.generation.v1.ColorMatchMode
      @JvmName("getMatchMode")
      get() = _builder.getMatchMode()
      @JvmName("setMatchMode")
      set(value) {
        _builder.setMatchMode(value)
      }
    public var matchModeValue: kotlin.Int
      @JvmName("getMatchModeValue")
      get() = _builder.getMatchModeValue()
      @JvmName("setMatchModeValue")
      set(value) {
        _builder.setMatchModeValue(value)
      }
    /**
     * ```
     * color match mode to use
     * ```
     *
     * `optional .stabilityai.platformapis.generation.v1.ColorMatchMode match_mode = 7 [json_name = "matchMode"];`
     */
    public fun clearMatchMode() {
      _builder.clearMatchMode()
    }
    /**
     * ```
     * color match mode to use
     * ```
     *
     * `optional .stabilityai.platformapis.generation.v1.ColorMatchMode match_mode = 7 [json_name = "matchMode"];`
     * @return Whether the matchMode field is set.
     */
    public fun hasMatchMode(): kotlin.Boolean {
      return _builder.hasMatchMode()
    }

    /**
     * ```
     * amount of gaussian noise to add
     * ```
     *
     * `optional float noise_amount = 8 [json_name = "noiseAmount"];`
     */
    public var noiseAmount: kotlin.Float
      @JvmName("getNoiseAmount")
      get() = _builder.getNoiseAmount()
      @JvmName("setNoiseAmount")
      set(value) {
        _builder.setNoiseAmount(value)
      }
    /**
     * ```
     * amount of gaussian noise to add
     * ```
     *
     * `optional float noise_amount = 8 [json_name = "noiseAmount"];`
     */
    public fun clearNoiseAmount() {
      _builder.clearNoiseAmount()
    }
    /**
     * ```
     * amount of gaussian noise to add
     * ```
     *
     * `optional float noise_amount = 8 [json_name = "noiseAmount"];`
     * @return Whether the noiseAmount field is set.
     */
    public fun hasNoiseAmount(): kotlin.Boolean {
      return _builder.hasNoiseAmount()
    }

    /**
     * ```
     * random seed for noise
     * ```
     *
     * `optional uint32 noise_seed = 9 [json_name = "noiseSeed"];`
     */
    public var noiseSeed: kotlin.Int
      @JvmName("getNoiseSeed")
      get() = _builder.getNoiseSeed()
      @JvmName("setNoiseSeed")
      set(value) {
        _builder.setNoiseSeed(value)
      }
    /**
     * ```
     * random seed for noise
     * ```
     *
     * `optional uint32 noise_seed = 9 [json_name = "noiseSeed"];`
     */
    public fun clearNoiseSeed() {
      _builder.clearNoiseSeed()
    }
    /**
     * ```
     * random seed for noise
     * ```
     *
     * `optional uint32 noise_seed = 9 [json_name = "noiseSeed"];`
     * @return Whether the noiseSeed field is set.
     */
    public fun hasNoiseSeed(): kotlin.Boolean {
      return _builder.hasNoiseSeed()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.stabilityai.platformapis.generation.v1.TransformColorAdjust.copy(block: com.stabilityai.platformapis.generation.v1.TransformColorAdjustKt.Dsl.() -> kotlin.Unit): com.stabilityai.platformapis.generation.v1.TransformColorAdjust =
  com.stabilityai.platformapis.generation.v1.TransformColorAdjustKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val com.stabilityai.platformapis.generation.v1.TransformColorAdjustOrBuilder.matchImageOrNull: com.stabilityai.platformapis.generation.v1.Artifact?
  get() = if (hasMatchImage()) getMatchImage() else null

