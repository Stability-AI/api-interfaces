// Code generated by connect-kotlin. DO NOT EDIT.
//
// Source: stabilityai/platformapis/project/v1/project.proto
//
package com.stabilityai.platformapis.project.v1

import build.buf.connect.Headers
import build.buf.connect.MethodSpec
import build.buf.connect.ProtocolClientInterface
import build.buf.connect.ResponseMessage
import build.buf.connect.ServerOnlyStreamInterface

/**
 *
 *  gRPC services
 */
public class ProjectServiceClient(
  private val client: ProtocolClientInterface,
) : ProjectServiceClientInterface {
  /**
   *  Create a new project if it does not exist
   */
  public override suspend fun create(request: CreateProjectRequest, headers: Headers):
      ResponseMessage<Project> = client.unary(
    request,
    headers,
    MethodSpec(
    "stabilityai.platformapis.project.v1.ProjectService/Create",
      com.stabilityai.platformapis.project.v1.CreateProjectRequest::class,
      com.stabilityai.platformapis.project.v1.Project::class
    ),
  )


  /**
   *  Update an existing project
   */
  public override suspend fun update(request: UpdateProjectRequest, headers: Headers):
      ResponseMessage<Project> = client.unary(
    request,
    headers,
    MethodSpec(
    "stabilityai.platformapis.project.v1.ProjectService/Update",
      com.stabilityai.platformapis.project.v1.UpdateProjectRequest::class,
      com.stabilityai.platformapis.project.v1.Project::class
    ),
  )


  /**
   *  List all the projects for an organization
   */
  public override suspend fun list(headers: Headers):
      ServerOnlyStreamInterface<ListProjectRequest, Project> = client.serverStream(
    headers,
    MethodSpec(
    "stabilityai.platformapis.project.v1.ProjectService/List",
      com.stabilityai.platformapis.project.v1.ListProjectRequest::class,
      com.stabilityai.platformapis.project.v1.Project::class
    ),
  )


  /**
   *  Get a project
   */
  public override suspend fun `get`(request: GetProjectRequest, headers: Headers):
      ResponseMessage<Project> = client.unary(
    request,
    headers,
    MethodSpec(
    "stabilityai.platformapis.project.v1.ProjectService/Get",
      com.stabilityai.platformapis.project.v1.GetProjectRequest::class,
      com.stabilityai.platformapis.project.v1.Project::class
    ),
  )


  /**
   *  Delete a project
   */
  public override suspend fun delete(request: DeleteProjectRequest, headers: Headers):
      ResponseMessage<Project> = client.unary(
    request,
    headers,
    MethodSpec(
    "stabilityai.platformapis.project.v1.ProjectService/Delete",
      com.stabilityai.platformapis.project.v1.DeleteProjectRequest::class,
      com.stabilityai.platformapis.project.v1.Project::class
    ),
  )


  /**
   *  Add or remove tags from an asset
   */
  public override suspend fun tagAssets(request: TagAssetsRequest, headers: Headers):
      ResponseMessage<TagAssetsResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "stabilityai.platformapis.project.v1.ProjectService/TagAssets",
      com.stabilityai.platformapis.project.v1.TagAssetsRequest::class,
      com.stabilityai.platformapis.project.v1.TagAssetsResponse::class
    ),
  )


  public override suspend fun untagAssets(request: UntagAssetsRequest, headers: Headers):
      ResponseMessage<UntagAssetsResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "stabilityai.platformapis.project.v1.ProjectService/UntagAssets",
      com.stabilityai.platformapis.project.v1.UntagAssetsRequest::class,
      com.stabilityai.platformapis.project.v1.UntagAssetsResponse::class
    ),
  )


  /**
   *  Query the assets of a project, with additional filtering
   */
  public override suspend fun queryAssets(request: QueryAssetsRequest, headers: Headers):
      ResponseMessage<QueryAssetsResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "stabilityai.platformapis.project.v1.ProjectService/QueryAssets",
      com.stabilityai.platformapis.project.v1.QueryAssetsRequest::class,
      com.stabilityai.platformapis.project.v1.QueryAssetsResponse::class
    ),
  )


  /**
   *  Delete one or more assets of a project
   */
  public override suspend fun deleteAssets(request: DeleteAssetsRequest, headers: Headers):
      ResponseMessage<DeleteAssetsResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "stabilityai.platformapis.project.v1.ProjectService/DeleteAssets",
      com.stabilityai.platformapis.project.v1.DeleteAssetsRequest::class,
      com.stabilityai.platformapis.project.v1.DeleteAssetsResponse::class
    ),
  )

}
