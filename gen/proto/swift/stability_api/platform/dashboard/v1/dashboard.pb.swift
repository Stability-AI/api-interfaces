// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stability_api/platform/dashboard/v1/dashboard.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Stabilityai_Api_Dashboard_V1_OrganizationRole: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case member // = 0
  case accountant // = 1
  case owner // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .member
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .member
    case 1: self = .accountant
    case 2: self = .owner
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .member: return 0
    case .accountant: return 1
    case .owner: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Stabilityai_Api_Dashboard_V1_OrganizationRole: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Stabilityai_Api_Dashboard_V1_OrganizationRole] = [
    .member,
    .accountant,
    .owner,
  ]
}

#endif  // swift(>=4.2)

struct Stabilityai_Api_Dashboard_V1_OrganizationMember {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var organization: Stabilityai_Api_Dashboard_V1_Organization {
    get {return _storage._organization ?? Stabilityai_Api_Dashboard_V1_Organization()}
    set {_uniqueStorage()._organization = newValue}
  }
  /// Returns true if `organization` has been explicitly set.
  var hasOrganization: Bool {return _storage._organization != nil}
  /// Clears the value of `organization`. Subsequent reads from it will return its default value.
  mutating func clearOrganization() {_uniqueStorage()._organization = nil}

  var user: Stabilityai_Api_Dashboard_V1_User {
    get {return _storage._user ?? Stabilityai_Api_Dashboard_V1_User()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_uniqueStorage()._user = nil}

  var role: Stabilityai_Api_Dashboard_V1_OrganizationRole {
    get {return _storage._role}
    set {_uniqueStorage()._role = newValue}
  }

  var isDefault: Bool {
    get {return _storage._isDefault}
    set {_uniqueStorage()._isDefault = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Stabilityai_Api_Dashboard_V1_OrganizationGrant {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var amountGranted: Double = 0

  var amountUsed: Double = 0

  var expiresAt: UInt64 = 0

  var grantedAt: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stabilityai_Api_Dashboard_V1_OrganizationPaymentInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var balance: Double = 0

  var grants: [Stabilityai_Api_Dashboard_V1_OrganizationGrant] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stabilityai_Api_Dashboard_V1_OrganizationAutoCharge {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var enabled: Bool = false

  var id: String = String()

  var createdAt: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stabilityai_Api_Dashboard_V1_Organization {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var name: String = String()

  var description_p: String = String()

  var members: [Stabilityai_Api_Dashboard_V1_OrganizationMember] = []

  var paymentInfo: Stabilityai_Api_Dashboard_V1_OrganizationPaymentInfo {
    get {return _paymentInfo ?? Stabilityai_Api_Dashboard_V1_OrganizationPaymentInfo()}
    set {_paymentInfo = newValue}
  }
  /// Returns true if `paymentInfo` has been explicitly set.
  var hasPaymentInfo: Bool {return self._paymentInfo != nil}
  /// Clears the value of `paymentInfo`. Subsequent reads from it will return its default value.
  mutating func clearPaymentInfo() {self._paymentInfo = nil}

  var stripeCustomerID: String {
    get {return _stripeCustomerID ?? String()}
    set {_stripeCustomerID = newValue}
  }
  /// Returns true if `stripeCustomerID` has been explicitly set.
  var hasStripeCustomerID: Bool {return self._stripeCustomerID != nil}
  /// Clears the value of `stripeCustomerID`. Subsequent reads from it will return its default value.
  mutating func clearStripeCustomerID() {self._stripeCustomerID = nil}

  var autoCharge: Stabilityai_Api_Dashboard_V1_OrganizationAutoCharge {
    get {return _autoCharge ?? Stabilityai_Api_Dashboard_V1_OrganizationAutoCharge()}
    set {_autoCharge = newValue}
  }
  /// Returns true if `autoCharge` has been explicitly set.
  var hasAutoCharge: Bool {return self._autoCharge != nil}
  /// Clears the value of `autoCharge`. Subsequent reads from it will return its default value.
  mutating func clearAutoCharge() {self._autoCharge = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _paymentInfo: Stabilityai_Api_Dashboard_V1_OrganizationPaymentInfo? = nil
  fileprivate var _stripeCustomerID: String? = nil
  fileprivate var _autoCharge: Stabilityai_Api_Dashboard_V1_OrganizationAutoCharge? = nil
}

struct Stabilityai_Api_Dashboard_V1_APIKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var key: String = String()

  var isSecret: Bool = false

  var createdAt: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stabilityai_Api_Dashboard_V1_User {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var authID: String {
    get {return _authID ?? String()}
    set {_authID = newValue}
  }
  /// Returns true if `authID` has been explicitly set.
  var hasAuthID: Bool {return self._authID != nil}
  /// Clears the value of `authID`. Subsequent reads from it will return its default value.
  mutating func clearAuthID() {self._authID = nil}

  var profilePicture: String = String()

  var email: String = String()

  var organizations: [Stabilityai_Api_Dashboard_V1_OrganizationMember] = []

  var apiKeys: [Stabilityai_Api_Dashboard_V1_APIKey] = []

  var createdAt: UInt64 = 0

  var emailVerified: Bool {
    get {return _emailVerified ?? false}
    set {_emailVerified = newValue}
  }
  /// Returns true if `emailVerified` has been explicitly set.
  var hasEmailVerified: Bool {return self._emailVerified != nil}
  /// Clears the value of `emailVerified`. Subsequent reads from it will return its default value.
  mutating func clearEmailVerified() {self._emailVerified = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _authID: String? = nil
  fileprivate var _emailVerified: Bool? = nil
}

struct Stabilityai_Api_Dashboard_V1_CostData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var amountTokens: UInt32 = 0

  var amountCredits: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stabilityai_Api_Dashboard_V1_UsageMetric {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var operation: String = String()

  var engine: String = String()

  var inputCost: Stabilityai_Api_Dashboard_V1_CostData {
    get {return _inputCost ?? Stabilityai_Api_Dashboard_V1_CostData()}
    set {_inputCost = newValue}
  }
  /// Returns true if `inputCost` has been explicitly set.
  var hasInputCost: Bool {return self._inputCost != nil}
  /// Clears the value of `inputCost`. Subsequent reads from it will return its default value.
  mutating func clearInputCost() {self._inputCost = nil}

  var outputCost: Stabilityai_Api_Dashboard_V1_CostData {
    get {return _outputCost ?? Stabilityai_Api_Dashboard_V1_CostData()}
    set {_outputCost = newValue}
  }
  /// Returns true if `outputCost` has been explicitly set.
  var hasOutputCost: Bool {return self._outputCost != nil}
  /// Clears the value of `outputCost`. Subsequent reads from it will return its default value.
  mutating func clearOutputCost() {self._outputCost = nil}

  var user: String {
    get {return _user ?? String()}
    set {_user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return self._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {self._user = nil}

  var aggregationTimestamp: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _inputCost: Stabilityai_Api_Dashboard_V1_CostData? = nil
  fileprivate var _outputCost: Stabilityai_Api_Dashboard_V1_CostData? = nil
  fileprivate var _user: String? = nil
}

struct Stabilityai_Api_Dashboard_V1_CostTotal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var amountTokens: UInt32 = 0

  var amountCredits: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stabilityai_Api_Dashboard_V1_TotalMetricsData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var inputTotal: Stabilityai_Api_Dashboard_V1_CostTotal {
    get {return _inputTotal ?? Stabilityai_Api_Dashboard_V1_CostTotal()}
    set {_inputTotal = newValue}
  }
  /// Returns true if `inputTotal` has been explicitly set.
  var hasInputTotal: Bool {return self._inputTotal != nil}
  /// Clears the value of `inputTotal`. Subsequent reads from it will return its default value.
  mutating func clearInputTotal() {self._inputTotal = nil}

  var outputTotal: Stabilityai_Api_Dashboard_V1_CostTotal {
    get {return _outputTotal ?? Stabilityai_Api_Dashboard_V1_CostTotal()}
    set {_outputTotal = newValue}
  }
  /// Returns true if `outputTotal` has been explicitly set.
  var hasOutputTotal: Bool {return self._outputTotal != nil}
  /// Clears the value of `outputTotal`. Subsequent reads from it will return its default value.
  mutating func clearOutputTotal() {self._outputTotal = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _inputTotal: Stabilityai_Api_Dashboard_V1_CostTotal? = nil
  fileprivate var _outputTotal: Stabilityai_Api_Dashboard_V1_CostTotal? = nil
}

struct Stabilityai_Api_Dashboard_V1_Metrics {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var metrics: [Stabilityai_Api_Dashboard_V1_UsageMetric] = []

  var total: Stabilityai_Api_Dashboard_V1_TotalMetricsData {
    get {return _total ?? Stabilityai_Api_Dashboard_V1_TotalMetricsData()}
    set {_total = newValue}
  }
  /// Returns true if `total` has been explicitly set.
  var hasTotal: Bool {return self._total != nil}
  /// Clears the value of `total`. Subsequent reads from it will return its default value.
  mutating func clearTotal() {self._total = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _total: Stabilityai_Api_Dashboard_V1_TotalMetricsData? = nil
}

struct Stabilityai_Api_Dashboard_V1_EmptyRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stabilityai_Api_Dashboard_V1_GetOrganizationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stabilityai_Api_Dashboard_V1_GetMetricsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var organizationID: String = String()

  var userID: String {
    get {return _userID ?? String()}
    set {_userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return self._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {self._userID = nil}

  var rangeFrom: UInt64 = 0

  var rangeTo: UInt64 = 0

  var includePerRequestMetrics: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _userID: String? = nil
}

struct Stabilityai_Api_Dashboard_V1_APIKeyRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var isSecret: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stabilityai_Api_Dashboard_V1_APIKeyFindRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stabilityai_Api_Dashboard_V1_UpdateDefaultOrganizationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var organizationID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stabilityai_Api_Dashboard_V1_ClientSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var settings: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stabilityai_Api_Dashboard_V1_CreateAutoChargeIntentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var organizationID: String = String()

  var monthlyMaximum: UInt64 = 0

  var minimumValue: UInt64 = 0

  var amountCredits: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stabilityai_Api_Dashboard_V1_CreateChargeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var amount: UInt64 = 0

  var organizationID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stabilityai_Api_Dashboard_V1_GetChargesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var organizationID: String = String()

  var rangeFrom: UInt64 = 0

  var rangeTo: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stabilityai_Api_Dashboard_V1_Charge {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var paid: Bool = false

  var receiptLink: String = String()

  var paymentLink: String = String()

  var createdAt: UInt64 = 0

  var amountCredits: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stabilityai_Api_Dashboard_V1_Charges {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var charges: [Stabilityai_Api_Dashboard_V1_Charge] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stabilityai_Api_Dashboard_V1_GetAutoChargeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var organizationID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stabilityai_Api_Dashboard_V1_AutoChargeIntent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var paymentLink: String = String()

  var createdAt: UInt64 = 0

  var monthlyMaximum: UInt64 = 0

  var minimumValue: UInt64 = 0

  var amountCredits: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stabilityai_Api_Dashboard_V1_UpdateUserInfoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var email: String {
    get {return _email ?? String()}
    set {_email = newValue}
  }
  /// Returns true if `email` has been explicitly set.
  var hasEmail: Bool {return self._email != nil}
  /// Clears the value of `email`. Subsequent reads from it will return its default value.
  mutating func clearEmail() {self._email = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _email: String? = nil
}

struct Stabilityai_Api_Dashboard_V1_UserPasswordChangeTicket {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ticket: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stabilityai_Api_Dashboard_V1_OrganizationRole: @unchecked Sendable {}
extension Stabilityai_Api_Dashboard_V1_OrganizationMember: @unchecked Sendable {}
extension Stabilityai_Api_Dashboard_V1_OrganizationGrant: @unchecked Sendable {}
extension Stabilityai_Api_Dashboard_V1_OrganizationPaymentInfo: @unchecked Sendable {}
extension Stabilityai_Api_Dashboard_V1_OrganizationAutoCharge: @unchecked Sendable {}
extension Stabilityai_Api_Dashboard_V1_Organization: @unchecked Sendable {}
extension Stabilityai_Api_Dashboard_V1_APIKey: @unchecked Sendable {}
extension Stabilityai_Api_Dashboard_V1_User: @unchecked Sendable {}
extension Stabilityai_Api_Dashboard_V1_CostData: @unchecked Sendable {}
extension Stabilityai_Api_Dashboard_V1_UsageMetric: @unchecked Sendable {}
extension Stabilityai_Api_Dashboard_V1_CostTotal: @unchecked Sendable {}
extension Stabilityai_Api_Dashboard_V1_TotalMetricsData: @unchecked Sendable {}
extension Stabilityai_Api_Dashboard_V1_Metrics: @unchecked Sendable {}
extension Stabilityai_Api_Dashboard_V1_EmptyRequest: @unchecked Sendable {}
extension Stabilityai_Api_Dashboard_V1_GetOrganizationRequest: @unchecked Sendable {}
extension Stabilityai_Api_Dashboard_V1_GetMetricsRequest: @unchecked Sendable {}
extension Stabilityai_Api_Dashboard_V1_APIKeyRequest: @unchecked Sendable {}
extension Stabilityai_Api_Dashboard_V1_APIKeyFindRequest: @unchecked Sendable {}
extension Stabilityai_Api_Dashboard_V1_UpdateDefaultOrganizationRequest: @unchecked Sendable {}
extension Stabilityai_Api_Dashboard_V1_ClientSettings: @unchecked Sendable {}
extension Stabilityai_Api_Dashboard_V1_CreateAutoChargeIntentRequest: @unchecked Sendable {}
extension Stabilityai_Api_Dashboard_V1_CreateChargeRequest: @unchecked Sendable {}
extension Stabilityai_Api_Dashboard_V1_GetChargesRequest: @unchecked Sendable {}
extension Stabilityai_Api_Dashboard_V1_Charge: @unchecked Sendable {}
extension Stabilityai_Api_Dashboard_V1_Charges: @unchecked Sendable {}
extension Stabilityai_Api_Dashboard_V1_GetAutoChargeRequest: @unchecked Sendable {}
extension Stabilityai_Api_Dashboard_V1_AutoChargeIntent: @unchecked Sendable {}
extension Stabilityai_Api_Dashboard_V1_UpdateUserInfoRequest: @unchecked Sendable {}
extension Stabilityai_Api_Dashboard_V1_UserPasswordChangeTicket: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stabilityai.api.dashboard.v1"

extension Stabilityai_Api_Dashboard_V1_OrganizationRole: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MEMBER"),
    1: .same(proto: "ACCOUNTANT"),
    2: .same(proto: "OWNER"),
  ]
}

extension Stabilityai_Api_Dashboard_V1_OrganizationMember: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OrganizationMember"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "organization"),
    2: .same(proto: "user"),
    3: .same(proto: "role"),
    4: .standard(proto: "is_default"),
  ]

  fileprivate class _StorageClass {
    var _organization: Stabilityai_Api_Dashboard_V1_Organization? = nil
    var _user: Stabilityai_Api_Dashboard_V1_User? = nil
    var _role: Stabilityai_Api_Dashboard_V1_OrganizationRole = .member
    var _isDefault: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _organization = source._organization
      _user = source._user
      _role = source._role
      _isDefault = source._isDefault
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._organization) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._user) }()
        case 3: try { try decoder.decodeSingularEnumField(value: &_storage._role) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._isDefault) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._organization {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if _storage._role != .member {
        try visitor.visitSingularEnumField(value: _storage._role, fieldNumber: 3)
      }
      if _storage._isDefault != false {
        try visitor.visitSingularBoolField(value: _storage._isDefault, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stabilityai_Api_Dashboard_V1_OrganizationMember, rhs: Stabilityai_Api_Dashboard_V1_OrganizationMember) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._organization != rhs_storage._organization {return false}
        if _storage._user != rhs_storage._user {return false}
        if _storage._role != rhs_storage._role {return false}
        if _storage._isDefault != rhs_storage._isDefault {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stabilityai_Api_Dashboard_V1_OrganizationGrant: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OrganizationGrant"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "amount_granted"),
    2: .standard(proto: "amount_used"),
    3: .standard(proto: "expires_at"),
    4: .standard(proto: "granted_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.amountGranted) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.amountUsed) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.expiresAt) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.grantedAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.amountGranted != 0 {
      try visitor.visitSingularDoubleField(value: self.amountGranted, fieldNumber: 1)
    }
    if self.amountUsed != 0 {
      try visitor.visitSingularDoubleField(value: self.amountUsed, fieldNumber: 2)
    }
    if self.expiresAt != 0 {
      try visitor.visitSingularUInt64Field(value: self.expiresAt, fieldNumber: 3)
    }
    if self.grantedAt != 0 {
      try visitor.visitSingularUInt64Field(value: self.grantedAt, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stabilityai_Api_Dashboard_V1_OrganizationGrant, rhs: Stabilityai_Api_Dashboard_V1_OrganizationGrant) -> Bool {
    if lhs.amountGranted != rhs.amountGranted {return false}
    if lhs.amountUsed != rhs.amountUsed {return false}
    if lhs.expiresAt != rhs.expiresAt {return false}
    if lhs.grantedAt != rhs.grantedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stabilityai_Api_Dashboard_V1_OrganizationPaymentInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OrganizationPaymentInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "balance"),
    2: .same(proto: "grants"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.balance) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.grants) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.balance != 0 {
      try visitor.visitSingularDoubleField(value: self.balance, fieldNumber: 1)
    }
    if !self.grants.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.grants, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stabilityai_Api_Dashboard_V1_OrganizationPaymentInfo, rhs: Stabilityai_Api_Dashboard_V1_OrganizationPaymentInfo) -> Bool {
    if lhs.balance != rhs.balance {return false}
    if lhs.grants != rhs.grants {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stabilityai_Api_Dashboard_V1_OrganizationAutoCharge: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OrganizationAutoCharge"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enabled"),
    2: .same(proto: "id"),
    3: .standard(proto: "created_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.enabled) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.createdAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enabled != false {
      try visitor.visitSingularBoolField(value: self.enabled, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if self.createdAt != 0 {
      try visitor.visitSingularUInt64Field(value: self.createdAt, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stabilityai_Api_Dashboard_V1_OrganizationAutoCharge, rhs: Stabilityai_Api_Dashboard_V1_OrganizationAutoCharge) -> Bool {
    if lhs.enabled != rhs.enabled {return false}
    if lhs.id != rhs.id {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stabilityai_Api_Dashboard_V1_Organization: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Organization"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "description"),
    4: .same(proto: "members"),
    5: .standard(proto: "payment_info"),
    6: .standard(proto: "stripe_customer_id"),
    7: .standard(proto: "auto_charge"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.members) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._paymentInfo) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._stripeCustomerID) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._autoCharge) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if !self.members.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.members, fieldNumber: 4)
    }
    try { if let v = self._paymentInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._stripeCustomerID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._autoCharge {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stabilityai_Api_Dashboard_V1_Organization, rhs: Stabilityai_Api_Dashboard_V1_Organization) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.members != rhs.members {return false}
    if lhs._paymentInfo != rhs._paymentInfo {return false}
    if lhs._stripeCustomerID != rhs._stripeCustomerID {return false}
    if lhs._autoCharge != rhs._autoCharge {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stabilityai_Api_Dashboard_V1_APIKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".APIKey"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .standard(proto: "is_secret"),
    3: .standard(proto: "created_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.key) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isSecret) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.createdAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if self.isSecret != false {
      try visitor.visitSingularBoolField(value: self.isSecret, fieldNumber: 2)
    }
    if self.createdAt != 0 {
      try visitor.visitSingularUInt64Field(value: self.createdAt, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stabilityai_Api_Dashboard_V1_APIKey, rhs: Stabilityai_Api_Dashboard_V1_APIKey) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.isSecret != rhs.isSecret {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stabilityai_Api_Dashboard_V1_User: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".User"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "auth_id"),
    3: .standard(proto: "profile_picture"),
    4: .same(proto: "email"),
    5: .same(proto: "organizations"),
    7: .standard(proto: "api_keys"),
    8: .standard(proto: "created_at"),
    9: .standard(proto: "email_verified"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._authID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.profilePicture) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.email) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.organizations) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.apiKeys) }()
      case 8: try { try decoder.decodeSingularUInt64Field(value: &self.createdAt) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self._emailVerified) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._authID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    if !self.profilePicture.isEmpty {
      try visitor.visitSingularStringField(value: self.profilePicture, fieldNumber: 3)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 4)
    }
    if !self.organizations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.organizations, fieldNumber: 5)
    }
    if !self.apiKeys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.apiKeys, fieldNumber: 7)
    }
    if self.createdAt != 0 {
      try visitor.visitSingularUInt64Field(value: self.createdAt, fieldNumber: 8)
    }
    try { if let v = self._emailVerified {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stabilityai_Api_Dashboard_V1_User, rhs: Stabilityai_Api_Dashboard_V1_User) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._authID != rhs._authID {return false}
    if lhs.profilePicture != rhs.profilePicture {return false}
    if lhs.email != rhs.email {return false}
    if lhs.organizations != rhs.organizations {return false}
    if lhs.apiKeys != rhs.apiKeys {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs._emailVerified != rhs._emailVerified {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stabilityai_Api_Dashboard_V1_CostData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CostData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "amount_tokens"),
    2: .standard(proto: "amount_credits"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.amountTokens) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.amountCredits) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.amountTokens != 0 {
      try visitor.visitSingularUInt32Field(value: self.amountTokens, fieldNumber: 1)
    }
    if self.amountCredits != 0 {
      try visitor.visitSingularDoubleField(value: self.amountCredits, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stabilityai_Api_Dashboard_V1_CostData, rhs: Stabilityai_Api_Dashboard_V1_CostData) -> Bool {
    if lhs.amountTokens != rhs.amountTokens {return false}
    if lhs.amountCredits != rhs.amountCredits {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stabilityai_Api_Dashboard_V1_UsageMetric: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UsageMetric"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operation"),
    2: .same(proto: "engine"),
    3: .standard(proto: "input_cost"),
    4: .standard(proto: "output_cost"),
    5: .same(proto: "user"),
    6: .standard(proto: "aggregation_timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.operation) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.engine) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._inputCost) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._outputCost) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._user) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.aggregationTimestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.operation.isEmpty {
      try visitor.visitSingularStringField(value: self.operation, fieldNumber: 1)
    }
    if !self.engine.isEmpty {
      try visitor.visitSingularStringField(value: self.engine, fieldNumber: 2)
    }
    try { if let v = self._inputCost {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._outputCost {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._user {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    if self.aggregationTimestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.aggregationTimestamp, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stabilityai_Api_Dashboard_V1_UsageMetric, rhs: Stabilityai_Api_Dashboard_V1_UsageMetric) -> Bool {
    if lhs.operation != rhs.operation {return false}
    if lhs.engine != rhs.engine {return false}
    if lhs._inputCost != rhs._inputCost {return false}
    if lhs._outputCost != rhs._outputCost {return false}
    if lhs._user != rhs._user {return false}
    if lhs.aggregationTimestamp != rhs.aggregationTimestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stabilityai_Api_Dashboard_V1_CostTotal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CostTotal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "amount_tokens"),
    2: .standard(proto: "amount_credits"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.amountTokens) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.amountCredits) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.amountTokens != 0 {
      try visitor.visitSingularUInt32Field(value: self.amountTokens, fieldNumber: 1)
    }
    if self.amountCredits != 0 {
      try visitor.visitSingularDoubleField(value: self.amountCredits, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stabilityai_Api_Dashboard_V1_CostTotal, rhs: Stabilityai_Api_Dashboard_V1_CostTotal) -> Bool {
    if lhs.amountTokens != rhs.amountTokens {return false}
    if lhs.amountCredits != rhs.amountCredits {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stabilityai_Api_Dashboard_V1_TotalMetricsData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TotalMetricsData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "input_total"),
    2: .standard(proto: "output_total"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._inputTotal) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._outputTotal) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._inputTotal {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._outputTotal {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stabilityai_Api_Dashboard_V1_TotalMetricsData, rhs: Stabilityai_Api_Dashboard_V1_TotalMetricsData) -> Bool {
    if lhs._inputTotal != rhs._inputTotal {return false}
    if lhs._outputTotal != rhs._outputTotal {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stabilityai_Api_Dashboard_V1_Metrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Metrics"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metrics"),
    2: .same(proto: "total"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.metrics) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._total) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.metrics.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.metrics, fieldNumber: 1)
    }
    try { if let v = self._total {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stabilityai_Api_Dashboard_V1_Metrics, rhs: Stabilityai_Api_Dashboard_V1_Metrics) -> Bool {
    if lhs.metrics != rhs.metrics {return false}
    if lhs._total != rhs._total {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stabilityai_Api_Dashboard_V1_EmptyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EmptyRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stabilityai_Api_Dashboard_V1_EmptyRequest, rhs: Stabilityai_Api_Dashboard_V1_EmptyRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stabilityai_Api_Dashboard_V1_GetOrganizationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetOrganizationRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stabilityai_Api_Dashboard_V1_GetOrganizationRequest, rhs: Stabilityai_Api_Dashboard_V1_GetOrganizationRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stabilityai_Api_Dashboard_V1_GetMetricsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetMetricsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "organization_id"),
    2: .standard(proto: "user_id"),
    3: .standard(proto: "range_from"),
    4: .standard(proto: "range_to"),
    5: .standard(proto: "include_per_request_metrics"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.organizationID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._userID) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.rangeFrom) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.rangeTo) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.includePerRequestMetrics) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.organizationID.isEmpty {
      try visitor.visitSingularStringField(value: self.organizationID, fieldNumber: 1)
    }
    try { if let v = self._userID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    if self.rangeFrom != 0 {
      try visitor.visitSingularUInt64Field(value: self.rangeFrom, fieldNumber: 3)
    }
    if self.rangeTo != 0 {
      try visitor.visitSingularUInt64Field(value: self.rangeTo, fieldNumber: 4)
    }
    if self.includePerRequestMetrics != false {
      try visitor.visitSingularBoolField(value: self.includePerRequestMetrics, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stabilityai_Api_Dashboard_V1_GetMetricsRequest, rhs: Stabilityai_Api_Dashboard_V1_GetMetricsRequest) -> Bool {
    if lhs.organizationID != rhs.organizationID {return false}
    if lhs._userID != rhs._userID {return false}
    if lhs.rangeFrom != rhs.rangeFrom {return false}
    if lhs.rangeTo != rhs.rangeTo {return false}
    if lhs.includePerRequestMetrics != rhs.includePerRequestMetrics {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stabilityai_Api_Dashboard_V1_APIKeyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".APIKeyRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_secret"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isSecret) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isSecret != false {
      try visitor.visitSingularBoolField(value: self.isSecret, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stabilityai_Api_Dashboard_V1_APIKeyRequest, rhs: Stabilityai_Api_Dashboard_V1_APIKeyRequest) -> Bool {
    if lhs.isSecret != rhs.isSecret {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stabilityai_Api_Dashboard_V1_APIKeyFindRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".APIKeyFindRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stabilityai_Api_Dashboard_V1_APIKeyFindRequest, rhs: Stabilityai_Api_Dashboard_V1_APIKeyFindRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stabilityai_Api_Dashboard_V1_UpdateDefaultOrganizationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateDefaultOrganizationRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "organization_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.organizationID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.organizationID.isEmpty {
      try visitor.visitSingularStringField(value: self.organizationID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stabilityai_Api_Dashboard_V1_UpdateDefaultOrganizationRequest, rhs: Stabilityai_Api_Dashboard_V1_UpdateDefaultOrganizationRequest) -> Bool {
    if lhs.organizationID != rhs.organizationID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stabilityai_Api_Dashboard_V1_ClientSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClientSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "settings"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.settings) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.settings.isEmpty {
      try visitor.visitSingularBytesField(value: self.settings, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stabilityai_Api_Dashboard_V1_ClientSettings, rhs: Stabilityai_Api_Dashboard_V1_ClientSettings) -> Bool {
    if lhs.settings != rhs.settings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stabilityai_Api_Dashboard_V1_CreateAutoChargeIntentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateAutoChargeIntentRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "organization_id"),
    2: .standard(proto: "monthly_maximum"),
    3: .standard(proto: "minimum_value"),
    4: .standard(proto: "amount_credits"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.organizationID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.monthlyMaximum) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.minimumValue) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.amountCredits) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.organizationID.isEmpty {
      try visitor.visitSingularStringField(value: self.organizationID, fieldNumber: 1)
    }
    if self.monthlyMaximum != 0 {
      try visitor.visitSingularUInt64Field(value: self.monthlyMaximum, fieldNumber: 2)
    }
    if self.minimumValue != 0 {
      try visitor.visitSingularUInt64Field(value: self.minimumValue, fieldNumber: 3)
    }
    if self.amountCredits != 0 {
      try visitor.visitSingularUInt64Field(value: self.amountCredits, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stabilityai_Api_Dashboard_V1_CreateAutoChargeIntentRequest, rhs: Stabilityai_Api_Dashboard_V1_CreateAutoChargeIntentRequest) -> Bool {
    if lhs.organizationID != rhs.organizationID {return false}
    if lhs.monthlyMaximum != rhs.monthlyMaximum {return false}
    if lhs.minimumValue != rhs.minimumValue {return false}
    if lhs.amountCredits != rhs.amountCredits {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stabilityai_Api_Dashboard_V1_CreateChargeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateChargeRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amount"),
    2: .standard(proto: "organization_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.amount) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.organizationID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.amount != 0 {
      try visitor.visitSingularUInt64Field(value: self.amount, fieldNumber: 1)
    }
    if !self.organizationID.isEmpty {
      try visitor.visitSingularStringField(value: self.organizationID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stabilityai_Api_Dashboard_V1_CreateChargeRequest, rhs: Stabilityai_Api_Dashboard_V1_CreateChargeRequest) -> Bool {
    if lhs.amount != rhs.amount {return false}
    if lhs.organizationID != rhs.organizationID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stabilityai_Api_Dashboard_V1_GetChargesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetChargesRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "organization_id"),
    2: .standard(proto: "range_from"),
    3: .standard(proto: "range_to"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.organizationID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.rangeFrom) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.rangeTo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.organizationID.isEmpty {
      try visitor.visitSingularStringField(value: self.organizationID, fieldNumber: 1)
    }
    if self.rangeFrom != 0 {
      try visitor.visitSingularUInt64Field(value: self.rangeFrom, fieldNumber: 2)
    }
    if self.rangeTo != 0 {
      try visitor.visitSingularUInt64Field(value: self.rangeTo, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stabilityai_Api_Dashboard_V1_GetChargesRequest, rhs: Stabilityai_Api_Dashboard_V1_GetChargesRequest) -> Bool {
    if lhs.organizationID != rhs.organizationID {return false}
    if lhs.rangeFrom != rhs.rangeFrom {return false}
    if lhs.rangeTo != rhs.rangeTo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stabilityai_Api_Dashboard_V1_Charge: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Charge"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "paid"),
    3: .standard(proto: "receipt_link"),
    4: .standard(proto: "payment_link"),
    5: .standard(proto: "created_at"),
    6: .standard(proto: "amount_credits"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.paid) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.receiptLink) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.paymentLink) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.createdAt) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.amountCredits) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.paid != false {
      try visitor.visitSingularBoolField(value: self.paid, fieldNumber: 2)
    }
    if !self.receiptLink.isEmpty {
      try visitor.visitSingularStringField(value: self.receiptLink, fieldNumber: 3)
    }
    if !self.paymentLink.isEmpty {
      try visitor.visitSingularStringField(value: self.paymentLink, fieldNumber: 4)
    }
    if self.createdAt != 0 {
      try visitor.visitSingularUInt64Field(value: self.createdAt, fieldNumber: 5)
    }
    if self.amountCredits != 0 {
      try visitor.visitSingularUInt64Field(value: self.amountCredits, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stabilityai_Api_Dashboard_V1_Charge, rhs: Stabilityai_Api_Dashboard_V1_Charge) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.paid != rhs.paid {return false}
    if lhs.receiptLink != rhs.receiptLink {return false}
    if lhs.paymentLink != rhs.paymentLink {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.amountCredits != rhs.amountCredits {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stabilityai_Api_Dashboard_V1_Charges: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Charges"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "charges"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.charges) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.charges.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.charges, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stabilityai_Api_Dashboard_V1_Charges, rhs: Stabilityai_Api_Dashboard_V1_Charges) -> Bool {
    if lhs.charges != rhs.charges {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stabilityai_Api_Dashboard_V1_GetAutoChargeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetAutoChargeRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "organization_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.organizationID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.organizationID.isEmpty {
      try visitor.visitSingularStringField(value: self.organizationID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stabilityai_Api_Dashboard_V1_GetAutoChargeRequest, rhs: Stabilityai_Api_Dashboard_V1_GetAutoChargeRequest) -> Bool {
    if lhs.organizationID != rhs.organizationID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stabilityai_Api_Dashboard_V1_AutoChargeIntent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AutoChargeIntent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "payment_link"),
    3: .standard(proto: "created_at"),
    4: .standard(proto: "monthly_maximum"),
    5: .standard(proto: "minimum_value"),
    6: .standard(proto: "amount_credits"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.paymentLink) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.createdAt) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.monthlyMaximum) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.minimumValue) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.amountCredits) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.paymentLink.isEmpty {
      try visitor.visitSingularStringField(value: self.paymentLink, fieldNumber: 2)
    }
    if self.createdAt != 0 {
      try visitor.visitSingularUInt64Field(value: self.createdAt, fieldNumber: 3)
    }
    if self.monthlyMaximum != 0 {
      try visitor.visitSingularUInt64Field(value: self.monthlyMaximum, fieldNumber: 4)
    }
    if self.minimumValue != 0 {
      try visitor.visitSingularUInt64Field(value: self.minimumValue, fieldNumber: 5)
    }
    if self.amountCredits != 0 {
      try visitor.visitSingularUInt64Field(value: self.amountCredits, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stabilityai_Api_Dashboard_V1_AutoChargeIntent, rhs: Stabilityai_Api_Dashboard_V1_AutoChargeIntent) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.paymentLink != rhs.paymentLink {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.monthlyMaximum != rhs.monthlyMaximum {return false}
    if lhs.minimumValue != rhs.minimumValue {return false}
    if lhs.amountCredits != rhs.amountCredits {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stabilityai_Api_Dashboard_V1_UpdateUserInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateUserInfoRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "email"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._email) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._email {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stabilityai_Api_Dashboard_V1_UpdateUserInfoRequest, rhs: Stabilityai_Api_Dashboard_V1_UpdateUserInfoRequest) -> Bool {
    if lhs._email != rhs._email {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stabilityai_Api_Dashboard_V1_UserPasswordChangeTicket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserPasswordChangeTicket"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ticket"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.ticket) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ticket.isEmpty {
      try visitor.visitSingularStringField(value: self.ticket, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stabilityai_Api_Dashboard_V1_UserPasswordChangeTicket, rhs: Stabilityai_Api_Dashboard_V1_UserPasswordChangeTicket) -> Bool {
    if lhs.ticket != rhs.ticket {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
