// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stability_api/platform/engines/v1/engines.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Possible engine type
enum Stabilityai_Platformapis_Engines_V1_EngineType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case text // = 0
  case picture // = 1
  case audio // = 2
  case video // = 3
  case classification // = 4
  case storage // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .text
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .text
    case 1: self = .picture
    case 2: self = .audio
    case 3: self = .video
    case 4: self = .classification
    case 5: self = .storage
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .text: return 0
    case .picture: return 1
    case .audio: return 2
    case .video: return 3
    case .classification: return 4
    case .storage: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Stabilityai_Platformapis_Engines_V1_EngineType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Stabilityai_Platformapis_Engines_V1_EngineType] = [
    .text,
    .picture,
    .audio,
    .video,
    .classification,
    .storage,
  ]
}

#endif  // swift(>=4.2)

enum Stabilityai_Platformapis_Engines_V1_EngineTokenizer: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case gpt2 // = 0
  case pile // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .gpt2
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .gpt2
    case 1: self = .pile
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .gpt2: return 0
    case .pile: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Stabilityai_Platformapis_Engines_V1_EngineTokenizer: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Stabilityai_Platformapis_Engines_V1_EngineTokenizer] = [
    .gpt2,
    .pile,
  ]
}

#endif  // swift(>=4.2)

/// Engine info struct
struct Stabilityai_Platformapis_Engines_V1_EngineInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var owner: String = String()

  var ready: Bool = false

  var type: Stabilityai_Platformapis_Engines_V1_EngineType = .text

  var tokenizer: Stabilityai_Platformapis_Engines_V1_EngineTokenizer = .gpt2

  var name: String = String()

  var description_p: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Empty
struct Stabilityai_Platformapis_Engines_V1_ListEnginesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Engine info list
struct Stabilityai_Platformapis_Engines_V1_Engines {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var engine: [Stabilityai_Platformapis_Engines_V1_EngineInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stabilityai_Platformapis_Engines_V1_EngineType: @unchecked Sendable {}
extension Stabilityai_Platformapis_Engines_V1_EngineTokenizer: @unchecked Sendable {}
extension Stabilityai_Platformapis_Engines_V1_EngineInfo: @unchecked Sendable {}
extension Stabilityai_Platformapis_Engines_V1_ListEnginesRequest: @unchecked Sendable {}
extension Stabilityai_Platformapis_Engines_V1_Engines: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stabilityai.platformapis.engines.v1"

extension Stabilityai_Platformapis_Engines_V1_EngineType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TEXT"),
    1: .same(proto: "PICTURE"),
    2: .same(proto: "AUDIO"),
    3: .same(proto: "VIDEO"),
    4: .same(proto: "CLASSIFICATION"),
    5: .same(proto: "STORAGE"),
  ]
}

extension Stabilityai_Platformapis_Engines_V1_EngineTokenizer: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GPT2"),
    1: .same(proto: "PILE"),
  ]
}

extension Stabilityai_Platformapis_Engines_V1_EngineInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EngineInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "owner"),
    3: .same(proto: "ready"),
    4: .same(proto: "type"),
    5: .same(proto: "tokenizer"),
    6: .same(proto: "name"),
    7: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.owner) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.ready) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.tokenizer) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.owner.isEmpty {
      try visitor.visitSingularStringField(value: self.owner, fieldNumber: 2)
    }
    if self.ready != false {
      try visitor.visitSingularBoolField(value: self.ready, fieldNumber: 3)
    }
    if self.type != .text {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 4)
    }
    if self.tokenizer != .gpt2 {
      try visitor.visitSingularEnumField(value: self.tokenizer, fieldNumber: 5)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 6)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stabilityai_Platformapis_Engines_V1_EngineInfo, rhs: Stabilityai_Platformapis_Engines_V1_EngineInfo) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.owner != rhs.owner {return false}
    if lhs.ready != rhs.ready {return false}
    if lhs.type != rhs.type {return false}
    if lhs.tokenizer != rhs.tokenizer {return false}
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stabilityai_Platformapis_Engines_V1_ListEnginesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListEnginesRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stabilityai_Platformapis_Engines_V1_ListEnginesRequest, rhs: Stabilityai_Platformapis_Engines_V1_ListEnginesRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stabilityai_Platformapis_Engines_V1_Engines: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Engines"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "engine"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.engine) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.engine.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.engine, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stabilityai_Platformapis_Engines_V1_Engines, rhs: Stabilityai_Platformapis_Engines_V1_Engines) -> Bool {
    if lhs.engine != rhs.engine {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
