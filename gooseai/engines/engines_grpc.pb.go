// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package engines

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EnginesServiceClient is the client API for EnginesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnginesServiceClient interface {
	ListEngines(ctx context.Context, in *ListEnginesRequest, opts ...grpc.CallOption) (*Engines, error)
}

type enginesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnginesServiceClient(cc grpc.ClientConnInterface) EnginesServiceClient {
	return &enginesServiceClient{cc}
}

func (c *enginesServiceClient) ListEngines(ctx context.Context, in *ListEnginesRequest, opts ...grpc.CallOption) (*Engines, error) {
	out := new(Engines)
	err := c.cc.Invoke(ctx, "/gooseai.EnginesService/ListEngines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnginesServiceServer is the server API for EnginesService service.
// All implementations must embed UnimplementedEnginesServiceServer
// for forward compatibility
type EnginesServiceServer interface {
	ListEngines(context.Context, *ListEnginesRequest) (*Engines, error)
	mustEmbedUnimplementedEnginesServiceServer()
}

// UnimplementedEnginesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEnginesServiceServer struct {
}

func (UnimplementedEnginesServiceServer) ListEngines(context.Context, *ListEnginesRequest) (*Engines, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEngines not implemented")
}
func (UnimplementedEnginesServiceServer) mustEmbedUnimplementedEnginesServiceServer() {}

// UnsafeEnginesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnginesServiceServer will
// result in compilation errors.
type UnsafeEnginesServiceServer interface {
	mustEmbedUnimplementedEnginesServiceServer()
}

func RegisterEnginesServiceServer(s grpc.ServiceRegistrar, srv EnginesServiceServer) {
	s.RegisterService(&EnginesService_ServiceDesc, srv)
}

func _EnginesService_ListEngines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnginesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnginesServiceServer).ListEngines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooseai.EnginesService/ListEngines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnginesServiceServer).ListEngines(ctx, req.(*ListEnginesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnginesService_ServiceDesc is the grpc.ServiceDesc for EnginesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnginesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gooseai.EnginesService",
	HandlerType: (*EnginesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListEngines",
			Handler:    _EnginesService_ListEngines_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "engines/engines.proto",
}
