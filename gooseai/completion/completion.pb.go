// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.12.2
// source: completion.proto

package completion

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Reasons why the request finished
type FinishReason int32

const (
	FinishReason_NULL   FinishReason = 0
	FinishReason_LENGTH FinishReason = 1
	FinishReason_STOP   FinishReason = 2
	FinishReason_ERROR  FinishReason = 3
)

// Enum value maps for FinishReason.
var (
	FinishReason_name = map[int32]string{
		0: "NULL",
		1: "LENGTH",
		2: "STOP",
		3: "ERROR",
	}
	FinishReason_value = map[string]int32{
		"NULL":   0,
		"LENGTH": 1,
		"STOP":   2,
		"ERROR":  3,
	}
)

func (x FinishReason) Enum() *FinishReason {
	p := new(FinishReason)
	*p = x
	return p
}

func (x FinishReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FinishReason) Descriptor() protoreflect.EnumDescriptor {
	return file_completion_proto_enumTypes[0].Descriptor()
}

func (FinishReason) Type() protoreflect.EnumType {
	return &file_completion_proto_enumTypes[0]
}

func (x FinishReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FinishReason.Descriptor instead.
func (FinishReason) EnumDescriptor() ([]byte, []int) {
	return file_completion_proto_rawDescGZIP(), []int{0}
}

type SamplingMethod int32

const (
	SamplingMethod_NONE        SamplingMethod = 0
	SamplingMethod_TEMPERATURE SamplingMethod = 1
	SamplingMethod_TOP_K       SamplingMethod = 2
	SamplingMethod_TOP_P       SamplingMethod = 3
	SamplingMethod_TFS         SamplingMethod = 4
	SamplingMethod_TOP_A       SamplingMethod = 5
	SamplingMethod_TYPICAL_P   SamplingMethod = 6
)

// Enum value maps for SamplingMethod.
var (
	SamplingMethod_name = map[int32]string{
		0: "NONE",
		1: "TEMPERATURE",
		2: "TOP_K",
		3: "TOP_P",
		4: "TFS",
		5: "TOP_A",
		6: "TYPICAL_P",
	}
	SamplingMethod_value = map[string]int32{
		"NONE":        0,
		"TEMPERATURE": 1,
		"TOP_K":       2,
		"TOP_P":       3,
		"TFS":         4,
		"TOP_A":       5,
		"TYPICAL_P":   6,
	}
)

func (x SamplingMethod) Enum() *SamplingMethod {
	p := new(SamplingMethod)
	*p = x
	return p
}

func (x SamplingMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SamplingMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_completion_proto_enumTypes[1].Descriptor()
}

func (SamplingMethod) Type() protoreflect.EnumType {
	return &file_completion_proto_enumTypes[1]
}

func (x SamplingMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SamplingMethod.Descriptor instead.
func (SamplingMethod) EnumDescriptor() ([]byte, []int) {
	return file_completion_proto_rawDescGZIP(), []int{1}
}

type NumType int32

const (
	NumType_FP16 NumType = 0
	NumType_FP32 NumType = 1
	NumType_BF16 NumType = 2
)

// Enum value maps for NumType.
var (
	NumType_name = map[int32]string{
		0: "FP16",
		1: "FP32",
		2: "BF16",
	}
	NumType_value = map[string]int32{
		"FP16": 0,
		"FP32": 1,
		"BF16": 2,
	}
)

func (x NumType) Enum() *NumType {
	p := new(NumType)
	*p = x
	return p
}

func (x NumType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NumType) Descriptor() protoreflect.EnumDescriptor {
	return file_completion_proto_enumTypes[2].Descriptor()
}

func (NumType) Type() protoreflect.EnumType {
	return &file_completion_proto_enumTypes[2]
}

func (x NumType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NumType.Descriptor instead.
func (NumType) EnumDescriptor() ([]byte, []int) {
	return file_completion_proto_rawDescGZIP(), []int{2}
}

type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Id   uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_completion_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_completion_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_completion_proto_rawDescGZIP(), []int{0}
}

func (x *Token) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Token) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type Tokens struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tokens []*Token `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *Tokens) Reset() {
	*x = Tokens{}
	if protoimpl.UnsafeEnabled {
		mi := &file_completion_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tokens) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tokens) ProtoMessage() {}

func (x *Tokens) ProtoReflect() protoreflect.Message {
	mi := &file_completion_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tokens.ProtoReflect.Descriptor instead.
func (*Tokens) Descriptor() ([]byte, []int) {
	return file_completion_proto_rawDescGZIP(), []int{1}
}

func (x *Tokens) GetTokens() []*Token {
	if x != nil {
		return x.Tokens
	}
	return nil
}

// The input can be provided in either string or sequence of tokens. Extensible
// to other input types in the future, thanks to Protobuf.
type Prompt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Prompt:
	//	*Prompt_Text
	//	*Prompt_Tokens
	Prompt isPrompt_Prompt `protobuf_oneof:"prompt"`
}

func (x *Prompt) Reset() {
	*x = Prompt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_completion_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prompt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prompt) ProtoMessage() {}

func (x *Prompt) ProtoReflect() protoreflect.Message {
	mi := &file_completion_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prompt.ProtoReflect.Descriptor instead.
func (*Prompt) Descriptor() ([]byte, []int) {
	return file_completion_proto_rawDescGZIP(), []int{2}
}

func (m *Prompt) GetPrompt() isPrompt_Prompt {
	if m != nil {
		return m.Prompt
	}
	return nil
}

func (x *Prompt) GetText() string {
	if x, ok := x.GetPrompt().(*Prompt_Text); ok {
		return x.Text
	}
	return ""
}

func (x *Prompt) GetTokens() *Tokens {
	if x, ok := x.GetPrompt().(*Prompt_Tokens); ok {
		return x.Tokens
	}
	return nil
}

type isPrompt_Prompt interface {
	isPrompt_Prompt()
}

type Prompt_Text struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3,oneof"`
}

type Prompt_Tokens struct {
	Tokens *Tokens `protobuf:"bytes,2,opt,name=tokens,proto3,oneof"`
}

func (*Prompt_Text) isPrompt_Prompt() {}

func (*Prompt_Tokens) isPrompt_Prompt() {}

// Pairing of token sequences with bias values.
type LogitBias struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tokens *Tokens `protobuf:"bytes,1,opt,name=tokens,proto3" json:"tokens,omitempty"`
	Bias   float64 `protobuf:"fixed64,2,opt,name=bias,proto3" json:"bias,omitempty"`
}

func (x *LogitBias) Reset() {
	*x = LogitBias{}
	if protoimpl.UnsafeEnabled {
		mi := &file_completion_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogitBias) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogitBias) ProtoMessage() {}

func (x *LogitBias) ProtoReflect() protoreflect.Message {
	mi := &file_completion_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogitBias.ProtoReflect.Descriptor instead.
func (*LogitBias) Descriptor() ([]byte, []int) {
	return file_completion_proto_rawDescGZIP(), []int{3}
}

func (x *LogitBias) GetTokens() *Tokens {
	if x != nil {
		return x.Tokens
	}
	return nil
}

func (x *LogitBias) GetBias() float64 {
	if x != nil {
		return x.Bias
	}
	return 0
}

type LogitBiases struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Biases []*LogitBias `protobuf:"bytes,1,rep,name=biases,proto3" json:"biases,omitempty"`
}

func (x *LogitBiases) Reset() {
	*x = LogitBiases{}
	if protoimpl.UnsafeEnabled {
		mi := &file_completion_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogitBiases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogitBiases) ProtoMessage() {}

func (x *LogitBiases) ProtoReflect() protoreflect.Message {
	mi := &file_completion_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogitBiases.ProtoReflect.Descriptor instead.
func (*LogitBiases) Descriptor() ([]byte, []int) {
	return file_completion_proto_rawDescGZIP(), []int{4}
}

func (x *LogitBiases) GetBiases() []*LogitBias {
	if x != nil {
		return x.Biases
	}
	return nil
}

type FrequencyParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PresencePenalty        *float64 `protobuf:"fixed64,1,opt,name=presence_penalty,json=presencePenalty,proto3,oneof" json:"presence_penalty,omitempty"`                        // OAI: -2.0 to 2.0, penalize new tokens if seen in text
	FrequencyPenalty       *float64 `protobuf:"fixed64,2,opt,name=frequency_penalty,json=frequencyPenalty,proto3,oneof" json:"frequency_penalty,omitempty"`                     // OAI: -2.0 to 2.0, penalize new tokens based on fqcy
	RepetitionPenalty      *float64 `protobuf:"fixed64,3,opt,name=repetition_penalty,json=repetitionPenalty,proto3,oneof" json:"repetition_penalty,omitempty"`                  // GAI: Factor to divide logits
	RepetitionPenaltySlope *float64 `protobuf:"fixed64,4,opt,name=repetition_penalty_slope,json=repetitionPenaltySlope,proto3,oneof" json:"repetition_penalty_slope,omitempty"` // GAI: slope applied against rp
	RepetitionPenaltyRange *uint32  `protobuf:"varint,5,opt,name=repetition_penalty_range,json=repetitionPenaltyRange,proto3,oneof" json:"repetition_penalty_range,omitempty"`  // GAI: number of tokens for rp
}

func (x *FrequencyParams) Reset() {
	*x = FrequencyParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_completion_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrequencyParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrequencyParams) ProtoMessage() {}

func (x *FrequencyParams) ProtoReflect() protoreflect.Message {
	mi := &file_completion_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrequencyParams.ProtoReflect.Descriptor instead.
func (*FrequencyParams) Descriptor() ([]byte, []int) {
	return file_completion_proto_rawDescGZIP(), []int{5}
}

func (x *FrequencyParams) GetPresencePenalty() float64 {
	if x != nil && x.PresencePenalty != nil {
		return *x.PresencePenalty
	}
	return 0
}

func (x *FrequencyParams) GetFrequencyPenalty() float64 {
	if x != nil && x.FrequencyPenalty != nil {
		return *x.FrequencyPenalty
	}
	return 0
}

func (x *FrequencyParams) GetRepetitionPenalty() float64 {
	if x != nil && x.RepetitionPenalty != nil {
		return *x.RepetitionPenalty
	}
	return 0
}

func (x *FrequencyParams) GetRepetitionPenaltySlope() float64 {
	if x != nil && x.RepetitionPenaltySlope != nil {
		return *x.RepetitionPenaltySlope
	}
	return 0
}

func (x *FrequencyParams) GetRepetitionPenaltyRange() uint32 {
	if x != nil && x.RepetitionPenaltyRange != nil {
		return *x.RepetitionPenaltyRange
	}
	return 0
}

type SamplingParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order            []SamplingMethod `protobuf:"varint,1,rep,packed,name=order,proto3,enum=gooseai.SamplingMethod" json:"order,omitempty"`                     // GAI: Order to apply transforms to
	Temperature      *float64         `protobuf:"fixed64,2,opt,name=temperature,proto3,oneof" json:"temperature,omitempty"`                                     // OAI: What sampling temperature to
	TopP             *float64         `protobuf:"fixed64,3,opt,name=top_p,json=topP,proto3,oneof" json:"top_p,omitempty"`                                       // OAI: nucleus sampling value
	TopK             *uint32          `protobuf:"varint,4,opt,name=top_k,json=topK,proto3,oneof" json:"top_k,omitempty"`                                        // GAI: truncates logits to highest N
	TailFreeSampling *float64         `protobuf:"fixed64,5,opt,name=tail_free_sampling,json=tailFreeSampling,proto3,oneof" json:"tail_free_sampling,omitempty"` // GAI: tail free sampling
	TypicalP         *float64         `protobuf:"fixed64,6,opt,name=typical_p,json=typicalP,proto3,oneof" json:"typical_p,omitempty"`                           // GAI: typical sampling
	TopA             *float64         `protobuf:"fixed64,7,opt,name=top_a,json=topA,proto3,oneof" json:"top_a,omitempty"`                                       // GAI: Kurumuz's wild invention
}

func (x *SamplingParams) Reset() {
	*x = SamplingParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_completion_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamplingParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplingParams) ProtoMessage() {}

func (x *SamplingParams) ProtoReflect() protoreflect.Message {
	mi := &file_completion_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplingParams.ProtoReflect.Descriptor instead.
func (*SamplingParams) Descriptor() ([]byte, []int) {
	return file_completion_proto_rawDescGZIP(), []int{6}
}

func (x *SamplingParams) GetOrder() []SamplingMethod {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *SamplingParams) GetTemperature() float64 {
	if x != nil && x.Temperature != nil {
		return *x.Temperature
	}
	return 0
}

func (x *SamplingParams) GetTopP() float64 {
	if x != nil && x.TopP != nil {
		return *x.TopP
	}
	return 0
}

func (x *SamplingParams) GetTopK() uint32 {
	if x != nil && x.TopK != nil {
		return *x.TopK
	}
	return 0
}

func (x *SamplingParams) GetTailFreeSampling() float64 {
	if x != nil && x.TailFreeSampling != nil {
		return *x.TailFreeSampling
	}
	return 0
}

func (x *SamplingParams) GetTypicalP() float64 {
	if x != nil && x.TypicalP != nil {
		return *x.TypicalP
	}
	return 0
}

func (x *SamplingParams) GetTopA() float64 {
	if x != nil && x.TopA != nil {
		return *x.TopA
	}
	return 0
}

// Model parameters
type ModelParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SamplingParams  *SamplingParams  `protobuf:"bytes,1,opt,name=sampling_params,json=samplingParams,proto3,oneof" json:"sampling_params,omitempty"`
	FrequencyParams *FrequencyParams `protobuf:"bytes,2,opt,name=frequency_params,json=frequencyParams,proto3,oneof" json:"frequency_params,omitempty"` // Rep frequency parameters
	LogitBias       *LogitBiases     `protobuf:"bytes,3,opt,name=logit_bias,json=logitBias,proto3,oneof" json:"logit_bias,omitempty"`                   // OAI: Modify likelihood of specific tokens appearing.
}

func (x *ModelParams) Reset() {
	*x = ModelParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_completion_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelParams) ProtoMessage() {}

func (x *ModelParams) ProtoReflect() protoreflect.Message {
	mi := &file_completion_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelParams.ProtoReflect.Descriptor instead.
func (*ModelParams) Descriptor() ([]byte, []int) {
	return file_completion_proto_rawDescGZIP(), []int{7}
}

func (x *ModelParams) GetSamplingParams() *SamplingParams {
	if x != nil {
		return x.SamplingParams
	}
	return nil
}

func (x *ModelParams) GetFrequencyParams() *FrequencyParams {
	if x != nil {
		return x.FrequencyParams
	}
	return nil
}

func (x *ModelParams) GetLogitBias() *LogitBiases {
	if x != nil {
		return x.LogitBias
	}
	return nil
}

type Echo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index *int32 `protobuf:"varint,1,opt,name=index,proto3,oneof" json:"index,omitempty"` // GAI: Prompt token index to begin echo at, absence or zero is 'entire prompt'
}

func (x *Echo) Reset() {
	*x = Echo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_completion_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Echo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Echo) ProtoMessage() {}

func (x *Echo) ProtoReflect() protoreflect.Message {
	mi := &file_completion_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Echo.ProtoReflect.Descriptor instead.
func (*Echo) Descriptor() ([]byte, []int) {
	return file_completion_proto_rawDescGZIP(), []int{8}
}

func (x *Echo) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type ModuleEmbedding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`   // GAI: id of embedding, straight key or filename get
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"` // GAI: key to decrypt embedding
}

func (x *ModuleEmbedding) Reset() {
	*x = ModuleEmbedding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_completion_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleEmbedding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleEmbedding) ProtoMessage() {}

func (x *ModuleEmbedding) ProtoReflect() protoreflect.Message {
	mi := &file_completion_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleEmbedding.ProtoReflect.Descriptor instead.
func (*ModuleEmbedding) Descriptor() ([]byte, []int) {
	return file_completion_proto_rawDescGZIP(), []int{9}
}

func (x *ModuleEmbedding) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ModuleEmbedding) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type Tensor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Typ  NumType  `protobuf:"varint,1,opt,name=typ,proto3,enum=gooseai.NumType" json:"typ,omitempty"` // GAI: Numeric type of tensor.
	Dims []uint32 `protobuf:"varint,2,rep,packed,name=dims,proto3" json:"dims,omitempty"`             // GAI: Tensor dimensions.
	Data []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`                     // GAI: Linear bytes serialization of tensor.
}

func (x *Tensor) Reset() {
	*x = Tensor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_completion_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tensor) ProtoMessage() {}

func (x *Tensor) ProtoReflect() protoreflect.Message {
	mi := &file_completion_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tensor.ProtoReflect.Descriptor instead.
func (*Tensor) Descriptor() ([]byte, []int) {
	return file_completion_proto_rawDescGZIP(), []int{10}
}

func (x *Tensor) GetTyp() NumType {
	if x != nil {
		return x.Typ
	}
	return NumType_FP16
}

func (x *Tensor) GetDims() []uint32 {
	if x != nil {
		return x.Dims
	}
	return nil
}

func (x *Tensor) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Embedding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Embedding:
	//	*Embedding_Raw
	//	*Embedding_Module
	Embedding isEmbedding_Embedding `protobuf_oneof:"embedding"`
	Pos       *uint32               `protobuf:"varint,3,opt,name=pos,proto3,oneof" json:"pos,omitempty"` // GAI: Where in the context to insert the embedding.
}

func (x *Embedding) Reset() {
	*x = Embedding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_completion_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Embedding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Embedding) ProtoMessage() {}

func (x *Embedding) ProtoReflect() protoreflect.Message {
	mi := &file_completion_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Embedding.ProtoReflect.Descriptor instead.
func (*Embedding) Descriptor() ([]byte, []int) {
	return file_completion_proto_rawDescGZIP(), []int{11}
}

func (m *Embedding) GetEmbedding() isEmbedding_Embedding {
	if m != nil {
		return m.Embedding
	}
	return nil
}

func (x *Embedding) GetRaw() *Tensor {
	if x, ok := x.GetEmbedding().(*Embedding_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *Embedding) GetModule() *ModuleEmbedding {
	if x, ok := x.GetEmbedding().(*Embedding_Module); ok {
		return x.Module
	}
	return nil
}

func (x *Embedding) GetPos() uint32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

type isEmbedding_Embedding interface {
	isEmbedding_Embedding()
}

type Embedding_Raw struct {
	Raw *Tensor `protobuf:"bytes,1,opt,name=raw,proto3,oneof"` // GAI: Serialization of an embedding tensor.
}

type Embedding_Module struct {
	Module *ModuleEmbedding `protobuf:"bytes,2,opt,name=module,proto3,oneof"` // GAI: ID + key of embedding to retrieve from object store
}

func (*Embedding_Raw) isEmbedding_Embedding() {}

func (*Embedding_Module) isEmbedding_Embedding() {}

type EngineParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxTokens   *uint32   `protobuf:"varint,1,opt,name=max_tokens,json=maxTokens,proto3,oneof" json:"max_tokens,omitempty"` // OAI: The maximum number of tokens to generate
	Completions *uint32   `protobuf:"varint,2,opt,name=completions,proto3,oneof" json:"completions,omitempty"`              // OAI: How many completions to generate per prompt
	Logprobs    *uint32   `protobuf:"varint,3,opt,name=logprobs,proto3,oneof" json:"logprobs,omitempty"`                    // OAI: Return N logprobs on most likely and picked tokens
	Echo        *Echo     `protobuf:"bytes,4,opt,name=echo,proto3,oneof" json:"echo,omitempty"`                             // OAI: Echo back the prompt in addition to completion
	BestOf      *uint32   `protobuf:"varint,5,opt,name=best_of,json=bestOf,proto3,oneof" json:"best_of,omitempty"`          // OAI: Generate # of `best_of` w. lowest logprob
	Stop        []*Prompt `protobuf:"bytes,6,rep,name=stop,proto3" json:"stop,omitempty"`                                   // OAI: Up to 4 sequences where API will stop generating
	MinTokens   *uint32   `protobuf:"varint,7,opt,name=min_tokens,json=minTokens,proto3,oneof" json:"min_tokens,omitempty"` // GAI: Minimum tokens before stop sequences activate.
}

func (x *EngineParams) Reset() {
	*x = EngineParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_completion_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineParams) ProtoMessage() {}

func (x *EngineParams) ProtoReflect() protoreflect.Message {
	mi := &file_completion_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineParams.ProtoReflect.Descriptor instead.
func (*EngineParams) Descriptor() ([]byte, []int) {
	return file_completion_proto_rawDescGZIP(), []int{12}
}

func (x *EngineParams) GetMaxTokens() uint32 {
	if x != nil && x.MaxTokens != nil {
		return *x.MaxTokens
	}
	return 0
}

func (x *EngineParams) GetCompletions() uint32 {
	if x != nil && x.Completions != nil {
		return *x.Completions
	}
	return 0
}

func (x *EngineParams) GetLogprobs() uint32 {
	if x != nil && x.Logprobs != nil {
		return *x.Logprobs
	}
	return 0
}

func (x *EngineParams) GetEcho() *Echo {
	if x != nil {
		return x.Echo
	}
	return nil
}

func (x *EngineParams) GetBestOf() uint32 {
	if x != nil && x.BestOf != nil {
		return *x.BestOf
	}
	return 0
}

func (x *EngineParams) GetStop() []*Prompt {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *EngineParams) GetMinTokens() uint32 {
	if x != nil && x.MinTokens != nil {
		return *x.MinTokens
	}
	return 0
}

type RequestMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Streaming *bool `protobuf:"varint,1,opt,name=streaming,proto3,oneof" json:"streaming,omitempty"`
}

func (x *RequestMeta) Reset() {
	*x = RequestMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_completion_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestMeta) ProtoMessage() {}

func (x *RequestMeta) ProtoReflect() protoreflect.Message {
	mi := &file_completion_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestMeta.ProtoReflect.Descriptor instead.
func (*RequestMeta) Descriptor() ([]byte, []int) {
	return file_completion_proto_rawDescGZIP(), []int{13}
}

func (x *RequestMeta) GetStreaming() bool {
	if x != nil && x.Streaming != nil {
		return *x.Streaming
	}
	return false
}

// A 'generation' request.
type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EngineId       string        `protobuf:"bytes,1,opt,name=engine_id,json=engineId,proto3" json:"engine_id,omitempty"`                          // OAI: The ID of the engine to use for this request
	Prompt         []*Prompt     `protobuf:"bytes,2,rep,name=prompt,proto3" json:"prompt,omitempty"`                                              // OAI: The prompt(s) to generate completions for
	ModelParams    *ModelParams  `protobuf:"bytes,3,opt,name=model_params,json=modelParams,proto3,oneof" json:"model_params,omitempty"`           //
	EngineParams   *EngineParams `protobuf:"bytes,4,opt,name=engine_params,json=engineParams,proto3,oneof" json:"engine_params,omitempty"`        //
	RequestId      *string       `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3,oneof" json:"request_id,omitempty"`                 // GAI: Request UUID, will be assigned if blank
	Embeddings     []*Embedding  `protobuf:"bytes,6,rep,name=embeddings,proto3" json:"embeddings,omitempty"`                                      // GAI: Embeddings for model.
	OriginReceived *uint64       `protobuf:"varint,7,opt,name=origin_received,json=originReceived,proto3,oneof" json:"origin_received,omitempty"` // GAI: When we received the request from the origin.
	Meta           *RequestMeta  `protobuf:"bytes,8,opt,name=meta,proto3,oneof" json:"meta,omitempty"`                                            // GAI: Optional metadata about our request.
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_completion_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_completion_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_completion_proto_rawDescGZIP(), []int{14}
}

func (x *Request) GetEngineId() string {
	if x != nil {
		return x.EngineId
	}
	return ""
}

func (x *Request) GetPrompt() []*Prompt {
	if x != nil {
		return x.Prompt
	}
	return nil
}

func (x *Request) GetModelParams() *ModelParams {
	if x != nil {
		return x.ModelParams
	}
	return nil
}

func (x *Request) GetEngineParams() *EngineParams {
	if x != nil {
		return x.EngineParams
	}
	return nil
}

func (x *Request) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

func (x *Request) GetEmbeddings() []*Embedding {
	if x != nil {
		return x.Embeddings
	}
	return nil
}

func (x *Request) GetOriginReceived() uint64 {
	if x != nil && x.OriginReceived != nil {
		return *x.OriginReceived
	}
	return 0
}

func (x *Request) GetMeta() *RequestMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type LogProb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token         *Token   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`                                              // tuple of token ...
	Logprob       *float64 `protobuf:"fixed64,2,opt,name=logprob,proto3,oneof" json:"logprob,omitempty"`                                  // ... with logprobs
	LogprobBefore *float64 `protobuf:"fixed64,3,opt,name=logprob_before,json=logprobBefore,proto3,oneof" json:"logprob_before,omitempty"` // ... and optionally, logprobs before processing
}

func (x *LogProb) Reset() {
	*x = LogProb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_completion_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogProb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogProb) ProtoMessage() {}

func (x *LogProb) ProtoReflect() protoreflect.Message {
	mi := &file_completion_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogProb.ProtoReflect.Descriptor instead.
func (*LogProb) Descriptor() ([]byte, []int) {
	return file_completion_proto_rawDescGZIP(), []int{15}
}

func (x *LogProb) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *LogProb) GetLogprob() float64 {
	if x != nil && x.Logprob != nil {
		return *x.Logprob
	}
	return 0
}

func (x *LogProb) GetLogprobBefore() float64 {
	if x != nil && x.LogprobBefore != nil {
		return *x.LogprobBefore
	}
	return 0
}

type TokenLogProbs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logprobs []*LogProb `protobuf:"bytes,1,rep,name=logprobs,proto3" json:"logprobs,omitempty"` // zero or more logprobs
}

func (x *TokenLogProbs) Reset() {
	*x = TokenLogProbs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_completion_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenLogProbs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenLogProbs) ProtoMessage() {}

func (x *TokenLogProbs) ProtoReflect() protoreflect.Message {
	mi := &file_completion_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenLogProbs.ProtoReflect.Descriptor instead.
func (*TokenLogProbs) Descriptor() ([]byte, []int) {
	return file_completion_proto_rawDescGZIP(), []int{16}
}

func (x *TokenLogProbs) GetLogprobs() []*LogProb {
	if x != nil {
		return x.Logprobs
	}
	return nil
}

type LogProbs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tokens     *TokenLogProbs   `protobuf:"bytes,1,opt,name=tokens,proto3" json:"tokens,omitempty"`                                   // OAI: logprobs of chosen tokens
	TextOffset []uint32         `protobuf:"varint,2,rep,packed,name=text_offset,json=textOffset,proto3" json:"text_offset,omitempty"` // OAI: indexed offsets of tokens
	Top        []*TokenLogProbs `protobuf:"bytes,3,rep,name=top,proto3" json:"top,omitempty"`                                         // OAI: top N logprobs after processing
	TopBefore  []*TokenLogProbs `protobuf:"bytes,4,rep,name=top_before,json=topBefore,proto3" json:"top_before,omitempty"`            // GAI: top N logprobs before processing
}

func (x *LogProbs) Reset() {
	*x = LogProbs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_completion_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogProbs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogProbs) ProtoMessage() {}

func (x *LogProbs) ProtoReflect() protoreflect.Message {
	mi := &file_completion_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogProbs.ProtoReflect.Descriptor instead.
func (*LogProbs) Descriptor() ([]byte, []int) {
	return file_completion_proto_rawDescGZIP(), []int{17}
}

func (x *LogProbs) GetTokens() *TokenLogProbs {
	if x != nil {
		return x.Tokens
	}
	return nil
}

func (x *LogProbs) GetTextOffset() []uint32 {
	if x != nil {
		return x.TextOffset
	}
	return nil
}

func (x *LogProbs) GetTop() []*TokenLogProbs {
	if x != nil {
		return x.Top
	}
	return nil
}

func (x *LogProbs) GetTopBefore() []*TokenLogProbs {
	if x != nil {
		return x.TopBefore
	}
	return nil
}

type Completion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text         string       `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`                                                                // OAI: The completion in string format.
	Index        uint32       `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`                                                             // OAI: The index of the completion.
	Logprobs     *LogProbs    `protobuf:"bytes,3,opt,name=logprobs,proto3" json:"logprobs,omitempty"`                                                        // OAI: Our answer with logprobs
	FinishReason FinishReason `protobuf:"varint,4,opt,name=finish_reason,json=finishReason,proto3,enum=gooseai.FinishReason" json:"finish_reason,omitempty"` // OAI: Why the completions finished.
	TokenIndex   uint32       `protobuf:"varint,5,opt,name=token_index,json=tokenIndex,proto3" json:"token_index,omitempty"`                                 // GAI: where the completion starts
	Started      uint64       `protobuf:"varint,6,opt,name=started,proto3" json:"started,omitempty"`                                                         // GAI: when the completion was started
}

func (x *Completion) Reset() {
	*x = Completion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_completion_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Completion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Completion) ProtoMessage() {}

func (x *Completion) ProtoReflect() protoreflect.Message {
	mi := &file_completion_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Completion.ProtoReflect.Descriptor instead.
func (*Completion) Descriptor() ([]byte, []int) {
	return file_completion_proto_rawDescGZIP(), []int{18}
}

func (x *Completion) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Completion) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Completion) GetLogprobs() *LogProbs {
	if x != nil {
		return x.Logprobs
	}
	return nil
}

func (x *Completion) GetFinishReason() FinishReason {
	if x != nil {
		return x.FinishReason
	}
	return FinishReason_NULL
}

func (x *Completion) GetTokenIndex() uint32 {
	if x != nil {
		return x.TokenIndex
	}
	return 0
}

func (x *Completion) GetStarted() uint64 {
	if x != nil {
		return x.Started
	}
	return 0
}

type AnswerMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GpuId  *string `protobuf:"bytes,1,opt,name=gpu_id,json=gpuId,proto3,oneof" json:"gpu_id,omitempty"`
	CpuId  *string `protobuf:"bytes,2,opt,name=cpu_id,json=cpuId,proto3,oneof" json:"cpu_id,omitempty"`
	NodeId *string `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3,oneof" json:"node_id,omitempty"`
}

func (x *AnswerMeta) Reset() {
	*x = AnswerMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_completion_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnswerMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerMeta) ProtoMessage() {}

func (x *AnswerMeta) ProtoReflect() protoreflect.Message {
	mi := &file_completion_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerMeta.ProtoReflect.Descriptor instead.
func (*AnswerMeta) Descriptor() ([]byte, []int) {
	return file_completion_proto_rawDescGZIP(), []int{19}
}

func (x *AnswerMeta) GetGpuId() string {
	if x != nil && x.GpuId != nil {
		return *x.GpuId
	}
	return ""
}

func (x *AnswerMeta) GetCpuId() string {
	if x != nil && x.CpuId != nil {
		return *x.CpuId
	}
	return ""
}

func (x *AnswerMeta) GetNodeId() string {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return ""
}

type Answer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnswerId          string        `protobuf:"bytes,1,opt,name=answer_id,json=answerId,proto3" json:"answer_id,omitempty"` // OAI: Unique answer ID.
	Created           uint64        `protobuf:"varint,2,opt,name=created,proto3" json:"created,omitempty"`                  // OAI: When the answer was created at.
	Model             string        `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`                       // OAI: What model and version answered.
	Choices           []*Completion `protobuf:"bytes,4,rep,name=choices,proto3" json:"choices,omitempty"`
	RequestId         *string       `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3,oneof" json:"request_id,omitempty"`                    // GAI: Request UUID this answer is to.
	InferenceReceived uint64        `protobuf:"varint,6,opt,name=inference_received,json=inferenceReceived,proto3" json:"inference_received,omitempty"` // GAI: When the request was received
	Meta              *AnswerMeta   `protobuf:"bytes,7,opt,name=meta,proto3,oneof" json:"meta,omitempty"`                                               // GAI: Return request servicing metadata
}

func (x *Answer) Reset() {
	*x = Answer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_completion_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Answer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Answer) ProtoMessage() {}

func (x *Answer) ProtoReflect() protoreflect.Message {
	mi := &file_completion_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Answer.ProtoReflect.Descriptor instead.
func (*Answer) Descriptor() ([]byte, []int) {
	return file_completion_proto_rawDescGZIP(), []int{20}
}

func (x *Answer) GetAnswerId() string {
	if x != nil {
		return x.AnswerId
	}
	return ""
}

func (x *Answer) GetCreated() uint64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Answer) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Answer) GetChoices() []*Completion {
	if x != nil {
		return x.Choices
	}
	return nil
}

func (x *Answer) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

func (x *Answer) GetInferenceReceived() uint64 {
	if x != nil {
		return x.InferenceReceived
	}
	return 0
}

func (x *Answer) GetMeta() *AnswerMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

var File_completion_proto protoreflect.FileDescriptor

var file_completion_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x07, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x22, 0x2b, 0x0a, 0x05, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x06, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0x53, 0x0a, 0x06, 0x50, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x6f, 0x6f,
	0x73, 0x65, 0x61, 0x69, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x06, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x22,
	0x48, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x74, 0x42, 0x69, 0x61, 0x73, 0x12, 0x27, 0x0a, 0x06,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67,
	0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x06, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x62, 0x69, 0x61, 0x73, 0x22, 0x39, 0x0a, 0x0b, 0x4c, 0x6f, 0x67,
	0x69, 0x74, 0x42, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x62, 0x69, 0x61, 0x73,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65,
	0x61, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x74, 0x42, 0x69, 0x61, 0x73, 0x52, 0x06, 0x62, 0x69,
	0x61, 0x73, 0x65, 0x73, 0x22, 0xa1, 0x03, 0x0a, 0x0f, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x10, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x72, 0x65,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x11, 0x72, 0x65, 0x70, 0x65, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x3d,
	0x0a, 0x18, 0x72, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x6e,
	0x61, 0x6c, 0x74, 0x79, 0x5f, 0x73, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x03, 0x52, 0x16, 0x72, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x53, 0x6c, 0x6f, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a,
	0x18, 0x72, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x6e, 0x61,
	0x6c, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x04, 0x52, 0x16, 0x72, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x6e,
	0x61, 0x6c, 0x74, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74,
	0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x70, 0x65,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x42, 0x1b,
	0x0a, 0x19, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x73, 0x6c, 0x6f, 0x70, 0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f,
	0x72, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c,
	0x74, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xdc, 0x02, 0x0a, 0x0e, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x73, 0x65, 0x61, 0x69, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0b, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x00, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x18, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x01, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x50, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x05, 0x74,
	0x6f, 0x70, 0x5f, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x04, 0x74, 0x6f,
	0x70, 0x4b, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x66, 0x72,
	0x65, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x03, 0x52, 0x10, 0x74, 0x61, 0x69, 0x6c, 0x46, 0x72, 0x65, 0x65, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x08, 0x74,
	0x79, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x05, 0x74, 0x6f,
	0x70, 0x5f, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52, 0x04, 0x74, 0x6f, 0x70,
	0x41, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6b, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x74, 0x61, 0x69,
	0x6c, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x79, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x61, 0x22, 0x90, 0x02, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x48,
	0x0a, 0x10, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65,
	0x61, 0x69, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x48, 0x01, 0x52, 0x0f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69,
	0x74, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x74, 0x42, 0x69, 0x61, 0x73,
	0x65, 0x73, 0x48, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x74, 0x42, 0x69, 0x61, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x74, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x22, 0x2b, 0x0a, 0x04, 0x45, 0x63,
	0x68, 0x6f, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x33, 0x0a, 0x0f, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x54, 0x0a, 0x06,
	0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x03, 0x74, 0x79, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x4e, 0x75,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x74, 0x79, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x69, 0x6d, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x90, 0x01, 0x0a, 0x09, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x23, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x48,
	0x00, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x70, 0x6f, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x88, 0x01, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x70, 0x6f, 0x73, 0x22, 0xd9, 0x02, 0x0a, 0x0c, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x61,
	0x78, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x48,
	0x03, 0x52, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x62, 0x65,
	0x73, 0x74, 0x5f, 0x6f, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x06, 0x62,
	0x65, 0x73, 0x74, 0x4f, 0x66, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69,
	0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x22, 0x0a,
	0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x05, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f,
	0x6f, 0x66, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x22, 0x3e, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x12, 0x21, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x22, 0xd2, 0x03, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x70, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x6f, 0x6f,
	0x73, 0x65, 0x61, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x06, 0x70, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x73,
	0x65, 0x61, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48,
	0x00, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65,
	0x61, 0x69, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48,
	0x01, 0x52, 0x0c, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0a, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f,
	0x73, 0x65, 0x61, 0x69, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0a,
	0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x0f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x04, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x99, 0x01, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x50, 0x72,
	0x6f, 0x62, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x70,
	0x72, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x6f, 0x67,
	0x70, 0x72, 0x6f, 0x62, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x70, 0x72,
	0x6f, 0x62, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x01, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x5f, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x22, 0x3d, 0x0a, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x6f, 0x67, 0x50, 0x72,
	0x6f, 0x62, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e,
	0x4c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x62, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62,
	0x73, 0x22, 0xbc, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x62, 0x73, 0x12, 0x2e,
	0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x6f,
	0x67, 0x50, 0x72, 0x6f, 0x62, 0x73, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x28, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x6f, 0x67, 0x50,
	0x72, 0x6f, 0x62, 0x73, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x35, 0x0a, 0x0a, 0x74, 0x6f, 0x70,
	0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x6f, 0x67,
	0x50, 0x72, 0x6f, 0x62, 0x73, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x22, 0xdc, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2d, 0x0a, 0x08, 0x6c, 0x6f, 0x67,
	0x70, 0x72, 0x6f, 0x62, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f,
	0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x62, 0x73, 0x52, 0x08,
	0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x22,
	0x84, 0x01, 0x0a, 0x0a, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1a,
	0x0a, 0x06, 0x67, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x67, 0x70, 0x75, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x63, 0x70,
	0x75, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x63, 0x70,
	0x75, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x9d, 0x02, 0x0a, 0x06, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2d,
	0x0a, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x2c, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x61, 0x48, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x2a, 0x39, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x53, 0x54, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x03, 0x2a, 0x64, 0x0a, 0x0e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x54, 0x4f, 0x50, 0x5f, 0x4b, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x4f, 0x50,
	0x5f, 0x50, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x46, 0x53, 0x10, 0x04, 0x12, 0x09, 0x0a,
	0x05, 0x54, 0x4f, 0x50, 0x5f, 0x41, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x49,
	0x43, 0x41, 0x4c, 0x5f, 0x50, 0x10, 0x06, 0x2a, 0x27, 0x0a, 0x07, 0x4e, 0x75, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x50, 0x31, 0x36, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x46, 0x50, 0x33, 0x32, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x46, 0x31, 0x36, 0x10, 0x02,
	0x32, 0x48, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x00, 0x30, 0x01, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f,
	0x3b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_completion_proto_rawDescOnce sync.Once
	file_completion_proto_rawDescData = file_completion_proto_rawDesc
)

func file_completion_proto_rawDescGZIP() []byte {
	file_completion_proto_rawDescOnce.Do(func() {
		file_completion_proto_rawDescData = protoimpl.X.CompressGZIP(file_completion_proto_rawDescData)
	})
	return file_completion_proto_rawDescData
}

var file_completion_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_completion_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_completion_proto_goTypes = []interface{}{
	(FinishReason)(0),       // 0: gooseai.FinishReason
	(SamplingMethod)(0),     // 1: gooseai.SamplingMethod
	(NumType)(0),            // 2: gooseai.NumType
	(*Token)(nil),           // 3: gooseai.Token
	(*Tokens)(nil),          // 4: gooseai.Tokens
	(*Prompt)(nil),          // 5: gooseai.Prompt
	(*LogitBias)(nil),       // 6: gooseai.LogitBias
	(*LogitBiases)(nil),     // 7: gooseai.LogitBiases
	(*FrequencyParams)(nil), // 8: gooseai.FrequencyParams
	(*SamplingParams)(nil),  // 9: gooseai.SamplingParams
	(*ModelParams)(nil),     // 10: gooseai.ModelParams
	(*Echo)(nil),            // 11: gooseai.Echo
	(*ModuleEmbedding)(nil), // 12: gooseai.ModuleEmbedding
	(*Tensor)(nil),          // 13: gooseai.Tensor
	(*Embedding)(nil),       // 14: gooseai.Embedding
	(*EngineParams)(nil),    // 15: gooseai.EngineParams
	(*RequestMeta)(nil),     // 16: gooseai.RequestMeta
	(*Request)(nil),         // 17: gooseai.Request
	(*LogProb)(nil),         // 18: gooseai.LogProb
	(*TokenLogProbs)(nil),   // 19: gooseai.TokenLogProbs
	(*LogProbs)(nil),        // 20: gooseai.LogProbs
	(*Completion)(nil),      // 21: gooseai.Completion
	(*AnswerMeta)(nil),      // 22: gooseai.AnswerMeta
	(*Answer)(nil),          // 23: gooseai.Answer
}
var file_completion_proto_depIdxs = []int32{
	3,  // 0: gooseai.Tokens.tokens:type_name -> gooseai.Token
	4,  // 1: gooseai.Prompt.tokens:type_name -> gooseai.Tokens
	4,  // 2: gooseai.LogitBias.tokens:type_name -> gooseai.Tokens
	6,  // 3: gooseai.LogitBiases.biases:type_name -> gooseai.LogitBias
	1,  // 4: gooseai.SamplingParams.order:type_name -> gooseai.SamplingMethod
	9,  // 5: gooseai.ModelParams.sampling_params:type_name -> gooseai.SamplingParams
	8,  // 6: gooseai.ModelParams.frequency_params:type_name -> gooseai.FrequencyParams
	7,  // 7: gooseai.ModelParams.logit_bias:type_name -> gooseai.LogitBiases
	2,  // 8: gooseai.Tensor.typ:type_name -> gooseai.NumType
	13, // 9: gooseai.Embedding.raw:type_name -> gooseai.Tensor
	12, // 10: gooseai.Embedding.module:type_name -> gooseai.ModuleEmbedding
	11, // 11: gooseai.EngineParams.echo:type_name -> gooseai.Echo
	5,  // 12: gooseai.EngineParams.stop:type_name -> gooseai.Prompt
	5,  // 13: gooseai.Request.prompt:type_name -> gooseai.Prompt
	10, // 14: gooseai.Request.model_params:type_name -> gooseai.ModelParams
	15, // 15: gooseai.Request.engine_params:type_name -> gooseai.EngineParams
	14, // 16: gooseai.Request.embeddings:type_name -> gooseai.Embedding
	16, // 17: gooseai.Request.meta:type_name -> gooseai.RequestMeta
	3,  // 18: gooseai.LogProb.token:type_name -> gooseai.Token
	18, // 19: gooseai.TokenLogProbs.logprobs:type_name -> gooseai.LogProb
	19, // 20: gooseai.LogProbs.tokens:type_name -> gooseai.TokenLogProbs
	19, // 21: gooseai.LogProbs.top:type_name -> gooseai.TokenLogProbs
	19, // 22: gooseai.LogProbs.top_before:type_name -> gooseai.TokenLogProbs
	20, // 23: gooseai.Completion.logprobs:type_name -> gooseai.LogProbs
	0,  // 24: gooseai.Completion.finish_reason:type_name -> gooseai.FinishReason
	21, // 25: gooseai.Answer.choices:type_name -> gooseai.Completion
	22, // 26: gooseai.Answer.meta:type_name -> gooseai.AnswerMeta
	17, // 27: gooseai.CompletionService.Completion:input_type -> gooseai.Request
	23, // 28: gooseai.CompletionService.Completion:output_type -> gooseai.Answer
	28, // [28:29] is the sub-list for method output_type
	27, // [27:28] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_completion_proto_init() }
func file_completion_proto_init() {
	if File_completion_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_completion_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_completion_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tokens); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_completion_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prompt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_completion_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogitBias); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_completion_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogitBiases); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_completion_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrequencyParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_completion_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SamplingParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_completion_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_completion_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Echo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_completion_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleEmbedding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_completion_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tensor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_completion_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Embedding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_completion_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_completion_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_completion_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_completion_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogProb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_completion_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenLogProbs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_completion_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogProbs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_completion_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Completion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_completion_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnswerMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_completion_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Answer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_completion_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Prompt_Text)(nil),
		(*Prompt_Tokens)(nil),
	}
	file_completion_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_completion_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_completion_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_completion_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_completion_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*Embedding_Raw)(nil),
		(*Embedding_Module)(nil),
	}
	file_completion_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_completion_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_completion_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_completion_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_completion_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_completion_proto_msgTypes[20].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_completion_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_completion_proto_goTypes,
		DependencyIndexes: file_completion_proto_depIdxs,
		EnumInfos:         file_completion_proto_enumTypes,
		MessageInfos:      file_completion_proto_msgTypes,
	}.Build()
	File_completion_proto = out.File
	file_completion_proto_rawDesc = nil
	file_completion_proto_goTypes = nil
	file_completion_proto_depIdxs = nil
}
