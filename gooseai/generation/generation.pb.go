// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.5
// source: generation.proto

package generation

import (
	tensors "github.com/coreweave/tensorizer/tensors"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FinishReason int32

const (
	FinishReason_NULL   FinishReason = 0
	FinishReason_LENGTH FinishReason = 1
	FinishReason_STOP   FinishReason = 2
	FinishReason_ERROR  FinishReason = 3
	FinishReason_FILTER FinishReason = 4
)

// Enum value maps for FinishReason.
var (
	FinishReason_name = map[int32]string{
		0: "NULL",
		1: "LENGTH",
		2: "STOP",
		3: "ERROR",
		4: "FILTER",
	}
	FinishReason_value = map[string]int32{
		"NULL":   0,
		"LENGTH": 1,
		"STOP":   2,
		"ERROR":  3,
		"FILTER": 4,
	}
)

func (x FinishReason) Enum() *FinishReason {
	p := new(FinishReason)
	*p = x
	return p
}

func (x FinishReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FinishReason) Descriptor() protoreflect.EnumDescriptor {
	return file_generation_proto_enumTypes[0].Descriptor()
}

func (FinishReason) Type() protoreflect.EnumType {
	return &file_generation_proto_enumTypes[0]
}

func (x FinishReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FinishReason.Descriptor instead.
func (FinishReason) EnumDescriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{0}
}

type ArtifactType int32

const (
	ArtifactType_ARTIFACT_NONE            ArtifactType = 0
	ArtifactType_ARTIFACT_IMAGE           ArtifactType = 1
	ArtifactType_ARTIFACT_VIDEO           ArtifactType = 2
	ArtifactType_ARTIFACT_TEXT            ArtifactType = 3
	ArtifactType_ARTIFACT_TOKENS          ArtifactType = 4
	ArtifactType_ARTIFACT_EMBEDDING       ArtifactType = 5
	ArtifactType_ARTIFACT_CLASSIFICATIONS ArtifactType = 6
	ArtifactType_ARTIFACT_MASK            ArtifactType = 7
	ArtifactType_ARTIFACT_LATENT          ArtifactType = 8
	ArtifactType_ARTIFACT_TENSOR          ArtifactType = 9
	ArtifactType_ARTIFACT_DEPTH           ArtifactType = 10
)

// Enum value maps for ArtifactType.
var (
	ArtifactType_name = map[int32]string{
		0:  "ARTIFACT_NONE",
		1:  "ARTIFACT_IMAGE",
		2:  "ARTIFACT_VIDEO",
		3:  "ARTIFACT_TEXT",
		4:  "ARTIFACT_TOKENS",
		5:  "ARTIFACT_EMBEDDING",
		6:  "ARTIFACT_CLASSIFICATIONS",
		7:  "ARTIFACT_MASK",
		8:  "ARTIFACT_LATENT",
		9:  "ARTIFACT_TENSOR",
		10: "ARTIFACT_DEPTH",
	}
	ArtifactType_value = map[string]int32{
		"ARTIFACT_NONE":            0,
		"ARTIFACT_IMAGE":           1,
		"ARTIFACT_VIDEO":           2,
		"ARTIFACT_TEXT":            3,
		"ARTIFACT_TOKENS":          4,
		"ARTIFACT_EMBEDDING":       5,
		"ARTIFACT_CLASSIFICATIONS": 6,
		"ARTIFACT_MASK":            7,
		"ARTIFACT_LATENT":          8,
		"ARTIFACT_TENSOR":          9,
		"ARTIFACT_DEPTH":           10,
	}
)

func (x ArtifactType) Enum() *ArtifactType {
	p := new(ArtifactType)
	*p = x
	return p
}

func (x ArtifactType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtifactType) Descriptor() protoreflect.EnumDescriptor {
	return file_generation_proto_enumTypes[1].Descriptor()
}

func (ArtifactType) Type() protoreflect.EnumType {
	return &file_generation_proto_enumTypes[1]
}

func (x ArtifactType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArtifactType.Descriptor instead.
func (ArtifactType) EnumDescriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{1}
}

type MaskedAreaInit int32

const (
	MaskedAreaInit_MASKED_AREA_INIT_ZERO     MaskedAreaInit = 0
	MaskedAreaInit_MASKED_AREA_INIT_RANDOM   MaskedAreaInit = 1
	MaskedAreaInit_MASKED_AREA_INIT_ORIGINAL MaskedAreaInit = 2
)

// Enum value maps for MaskedAreaInit.
var (
	MaskedAreaInit_name = map[int32]string{
		0: "MASKED_AREA_INIT_ZERO",
		1: "MASKED_AREA_INIT_RANDOM",
		2: "MASKED_AREA_INIT_ORIGINAL",
	}
	MaskedAreaInit_value = map[string]int32{
		"MASKED_AREA_INIT_ZERO":     0,
		"MASKED_AREA_INIT_RANDOM":   1,
		"MASKED_AREA_INIT_ORIGINAL": 2,
	}
)

func (x MaskedAreaInit) Enum() *MaskedAreaInit {
	p := new(MaskedAreaInit)
	*p = x
	return p
}

func (x MaskedAreaInit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MaskedAreaInit) Descriptor() protoreflect.EnumDescriptor {
	return file_generation_proto_enumTypes[2].Descriptor()
}

func (MaskedAreaInit) Type() protoreflect.EnumType {
	return &file_generation_proto_enumTypes[2]
}

func (x MaskedAreaInit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MaskedAreaInit.Descriptor instead.
func (MaskedAreaInit) EnumDescriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{2}
}

type WeightMethod int32

const (
	WeightMethod_TEXT_ENCODER    WeightMethod = 0
	WeightMethod_CROSS_ATTENTION WeightMethod = 1
)

// Enum value maps for WeightMethod.
var (
	WeightMethod_name = map[int32]string{
		0: "TEXT_ENCODER",
		1: "CROSS_ATTENTION",
	}
	WeightMethod_value = map[string]int32{
		"TEXT_ENCODER":    0,
		"CROSS_ATTENTION": 1,
	}
)

func (x WeightMethod) Enum() *WeightMethod {
	p := new(WeightMethod)
	*p = x
	return p
}

func (x WeightMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WeightMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_generation_proto_enumTypes[3].Descriptor()
}

func (WeightMethod) Type() protoreflect.EnumType {
	return &file_generation_proto_enumTypes[3]
}

func (x WeightMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WeightMethod.Descriptor instead.
func (WeightMethod) EnumDescriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{3}
}

// DiffusionSampler identifies which sampler to use for Diffusion, and represents
// the internal set of supported samplers.
type DiffusionSampler int32

const (
	DiffusionSampler_SAMPLER_DDIM                 DiffusionSampler = 0
	DiffusionSampler_SAMPLER_DDPM                 DiffusionSampler = 1
	DiffusionSampler_SAMPLER_K_EULER              DiffusionSampler = 2
	DiffusionSampler_SAMPLER_K_EULER_ANCESTRAL    DiffusionSampler = 3
	DiffusionSampler_SAMPLER_K_HEUN               DiffusionSampler = 4
	DiffusionSampler_SAMPLER_K_DPM_2              DiffusionSampler = 5
	DiffusionSampler_SAMPLER_K_DPM_2_ANCESTRAL    DiffusionSampler = 6
	DiffusionSampler_SAMPLER_K_LMS                DiffusionSampler = 7
	DiffusionSampler_SAMPLER_K_DPMPP_2S_ANCESTRAL DiffusionSampler = 8
	DiffusionSampler_SAMPLER_K_DPMPP_2M           DiffusionSampler = 9
	DiffusionSampler_SAMPLER_K_DPMPP_SDE          DiffusionSampler = 10
)

// Enum value maps for DiffusionSampler.
var (
	DiffusionSampler_name = map[int32]string{
		0:  "SAMPLER_DDIM",
		1:  "SAMPLER_DDPM",
		2:  "SAMPLER_K_EULER",
		3:  "SAMPLER_K_EULER_ANCESTRAL",
		4:  "SAMPLER_K_HEUN",
		5:  "SAMPLER_K_DPM_2",
		6:  "SAMPLER_K_DPM_2_ANCESTRAL",
		7:  "SAMPLER_K_LMS",
		8:  "SAMPLER_K_DPMPP_2S_ANCESTRAL",
		9:  "SAMPLER_K_DPMPP_2M",
		10: "SAMPLER_K_DPMPP_SDE",
	}
	DiffusionSampler_value = map[string]int32{
		"SAMPLER_DDIM":                 0,
		"SAMPLER_DDPM":                 1,
		"SAMPLER_K_EULER":              2,
		"SAMPLER_K_EULER_ANCESTRAL":    3,
		"SAMPLER_K_HEUN":               4,
		"SAMPLER_K_DPM_2":              5,
		"SAMPLER_K_DPM_2_ANCESTRAL":    6,
		"SAMPLER_K_LMS":                7,
		"SAMPLER_K_DPMPP_2S_ANCESTRAL": 8,
		"SAMPLER_K_DPMPP_2M":           9,
		"SAMPLER_K_DPMPP_SDE":          10,
	}
)

func (x DiffusionSampler) Enum() *DiffusionSampler {
	p := new(DiffusionSampler)
	*p = x
	return p
}

func (x DiffusionSampler) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiffusionSampler) Descriptor() protoreflect.EnumDescriptor {
	return file_generation_proto_enumTypes[4].Descriptor()
}

func (DiffusionSampler) Type() protoreflect.EnumType {
	return &file_generation_proto_enumTypes[4]
}

func (x DiffusionSampler) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiffusionSampler.Descriptor instead.
func (DiffusionSampler) EnumDescriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{4}
}

// Future, unimplemented.
type Upscaler int32

const (
	Upscaler_UPSCALER_RGB    Upscaler = 0
	Upscaler_UPSCALER_GFPGAN Upscaler = 1
	Upscaler_UPSCALER_ESRGAN Upscaler = 2
)

// Enum value maps for Upscaler.
var (
	Upscaler_name = map[int32]string{
		0: "UPSCALER_RGB",
		1: "UPSCALER_GFPGAN",
		2: "UPSCALER_ESRGAN",
	}
	Upscaler_value = map[string]int32{
		"UPSCALER_RGB":    0,
		"UPSCALER_GFPGAN": 1,
		"UPSCALER_ESRGAN": 2,
	}
)

func (x Upscaler) Enum() *Upscaler {
	p := new(Upscaler)
	*p = x
	return p
}

func (x Upscaler) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Upscaler) Descriptor() protoreflect.EnumDescriptor {
	return file_generation_proto_enumTypes[5].Descriptor()
}

func (Upscaler) Type() protoreflect.EnumType {
	return &file_generation_proto_enumTypes[5]
}

func (x Upscaler) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Upscaler.Descriptor instead.
func (Upscaler) EnumDescriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{5}
}

// Presets for CLIP guidance.
type GuidancePreset int32

const (
	GuidancePreset_GUIDANCE_PRESET_NONE       GuidancePreset = 0
	GuidancePreset_GUIDANCE_PRESET_SIMPLE     GuidancePreset = 1
	GuidancePreset_GUIDANCE_PRESET_FAST_BLUE  GuidancePreset = 2
	GuidancePreset_GUIDANCE_PRESET_FAST_GREEN GuidancePreset = 3
	GuidancePreset_GUIDANCE_PRESET_SLOW       GuidancePreset = 4
	GuidancePreset_GUIDANCE_PRESET_SLOWER     GuidancePreset = 5
	GuidancePreset_GUIDANCE_PRESET_SLOWEST    GuidancePreset = 6
)

// Enum value maps for GuidancePreset.
var (
	GuidancePreset_name = map[int32]string{
		0: "GUIDANCE_PRESET_NONE",
		1: "GUIDANCE_PRESET_SIMPLE",
		2: "GUIDANCE_PRESET_FAST_BLUE",
		3: "GUIDANCE_PRESET_FAST_GREEN",
		4: "GUIDANCE_PRESET_SLOW",
		5: "GUIDANCE_PRESET_SLOWER",
		6: "GUIDANCE_PRESET_SLOWEST",
	}
	GuidancePreset_value = map[string]int32{
		"GUIDANCE_PRESET_NONE":       0,
		"GUIDANCE_PRESET_SIMPLE":     1,
		"GUIDANCE_PRESET_FAST_BLUE":  2,
		"GUIDANCE_PRESET_FAST_GREEN": 3,
		"GUIDANCE_PRESET_SLOW":       4,
		"GUIDANCE_PRESET_SLOWER":     5,
		"GUIDANCE_PRESET_SLOWEST":    6,
	}
)

func (x GuidancePreset) Enum() *GuidancePreset {
	p := new(GuidancePreset)
	*p = x
	return p
}

func (x GuidancePreset) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuidancePreset) Descriptor() protoreflect.EnumDescriptor {
	return file_generation_proto_enumTypes[6].Descriptor()
}

func (GuidancePreset) Type() protoreflect.EnumType {
	return &file_generation_proto_enumTypes[6]
}

func (x GuidancePreset) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GuidancePreset.Descriptor instead.
func (GuidancePreset) EnumDescriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{6}
}

type ModelArchitecture int32

const (
	ModelArchitecture_MODEL_ARCHITECTURE_NONE        ModelArchitecture = 0
	ModelArchitecture_MODEL_ARCHITECTURE_CLIP_VIT    ModelArchitecture = 1
	ModelArchitecture_MODEL_ARCHITECTURE_CLIP_RESNET ModelArchitecture = 2
	ModelArchitecture_MODEL_ARCHITECTURE_LDM         ModelArchitecture = 3
)

// Enum value maps for ModelArchitecture.
var (
	ModelArchitecture_name = map[int32]string{
		0: "MODEL_ARCHITECTURE_NONE",
		1: "MODEL_ARCHITECTURE_CLIP_VIT",
		2: "MODEL_ARCHITECTURE_CLIP_RESNET",
		3: "MODEL_ARCHITECTURE_LDM",
	}
	ModelArchitecture_value = map[string]int32{
		"MODEL_ARCHITECTURE_NONE":        0,
		"MODEL_ARCHITECTURE_CLIP_VIT":    1,
		"MODEL_ARCHITECTURE_CLIP_RESNET": 2,
		"MODEL_ARCHITECTURE_LDM":         3,
	}
)

func (x ModelArchitecture) Enum() *ModelArchitecture {
	p := new(ModelArchitecture)
	*p = x
	return p
}

func (x ModelArchitecture) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelArchitecture) Descriptor() protoreflect.EnumDescriptor {
	return file_generation_proto_enumTypes[7].Descriptor()
}

func (ModelArchitecture) Type() protoreflect.EnumType {
	return &file_generation_proto_enumTypes[7]
}

func (x ModelArchitecture) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelArchitecture.Descriptor instead.
func (ModelArchitecture) EnumDescriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{7}
}

type Action int32

const (
	Action_ACTION_PASSTHROUGH          Action = 0
	Action_ACTION_REGENERATE_DUPLICATE Action = 1
	Action_ACTION_REGENERATE           Action = 2
	Action_ACTION_OBFUSCATE_DUPLICATE  Action = 3
	Action_ACTION_OBFUSCATE            Action = 4
	Action_ACTION_DISCARD              Action = 5
)

// Enum value maps for Action.
var (
	Action_name = map[int32]string{
		0: "ACTION_PASSTHROUGH",
		1: "ACTION_REGENERATE_DUPLICATE",
		2: "ACTION_REGENERATE",
		3: "ACTION_OBFUSCATE_DUPLICATE",
		4: "ACTION_OBFUSCATE",
		5: "ACTION_DISCARD",
	}
	Action_value = map[string]int32{
		"ACTION_PASSTHROUGH":          0,
		"ACTION_REGENERATE_DUPLICATE": 1,
		"ACTION_REGENERATE":           2,
		"ACTION_OBFUSCATE_DUPLICATE":  3,
		"ACTION_OBFUSCATE":            4,
		"ACTION_DISCARD":              5,
	}
)

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}

func (x Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action) Descriptor() protoreflect.EnumDescriptor {
	return file_generation_proto_enumTypes[8].Descriptor()
}

func (Action) Type() protoreflect.EnumType {
	return &file_generation_proto_enumTypes[8]
}

func (x Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action.Descriptor instead.
func (Action) EnumDescriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{8}
}

type ClassifierMode int32

const (
	ClassifierMode_CLSFR_MODE_ZEROSHOT   ClassifierMode = 0
	ClassifierMode_CLSFR_MODE_MULTICLASS ClassifierMode = 1 //CLSFR_MODE_ODDSRATIO = 2;
)

// Enum value maps for ClassifierMode.
var (
	ClassifierMode_name = map[int32]string{
		0: "CLSFR_MODE_ZEROSHOT",
		1: "CLSFR_MODE_MULTICLASS",
	}
	ClassifierMode_value = map[string]int32{
		"CLSFR_MODE_ZEROSHOT":   0,
		"CLSFR_MODE_MULTICLASS": 1,
	}
)

func (x ClassifierMode) Enum() *ClassifierMode {
	p := new(ClassifierMode)
	*p = x
	return p
}

func (x ClassifierMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClassifierMode) Descriptor() protoreflect.EnumDescriptor {
	return file_generation_proto_enumTypes[9].Descriptor()
}

func (ClassifierMode) Type() protoreflect.EnumType {
	return &file_generation_proto_enumTypes[9]
}

func (x ClassifierMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClassifierMode.Descriptor instead.
func (ClassifierMode) EnumDescriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{9}
}

type InterpolateMode int32

const (
	InterpolateMode_INTERPOLATE_LINEAR     InterpolateMode = 0
	InterpolateMode_INTERPOLATE_RIFE       InterpolateMode = 1
	InterpolateMode_INTERPOLATE_VAE_LINEAR InterpolateMode = 2
	InterpolateMode_INTERPOLATE_VAE_SLERP  InterpolateMode = 3
	InterpolateMode_INTERPOLATE_FILM       InterpolateMode = 4
)

// Enum value maps for InterpolateMode.
var (
	InterpolateMode_name = map[int32]string{
		0: "INTERPOLATE_LINEAR",
		1: "INTERPOLATE_RIFE",
		2: "INTERPOLATE_VAE_LINEAR",
		3: "INTERPOLATE_VAE_SLERP",
		4: "INTERPOLATE_FILM",
	}
	InterpolateMode_value = map[string]int32{
		"INTERPOLATE_LINEAR":     0,
		"INTERPOLATE_RIFE":       1,
		"INTERPOLATE_VAE_LINEAR": 2,
		"INTERPOLATE_VAE_SLERP":  3,
		"INTERPOLATE_FILM":       4,
	}
)

func (x InterpolateMode) Enum() *InterpolateMode {
	p := new(InterpolateMode)
	*p = x
	return p
}

func (x InterpolateMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterpolateMode) Descriptor() protoreflect.EnumDescriptor {
	return file_generation_proto_enumTypes[10].Descriptor()
}

func (InterpolateMode) Type() protoreflect.EnumType {
	return &file_generation_proto_enumTypes[10]
}

func (x InterpolateMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterpolateMode.Descriptor instead.
func (InterpolateMode) EnumDescriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{10}
}

type BorderMode int32

const (
	BorderMode_BORDER_REFLECT   BorderMode = 0 // reflect image values across the border
	BorderMode_BORDER_REPLICATE BorderMode = 1 // replicate border values outside the image
	BorderMode_BORDER_WRAP      BorderMode = 2 // wrap around / tile the image values
	BorderMode_BORDER_ZERO      BorderMode = 3 // use 0 for locations outside the image
	BorderMode_BORDER_PREFILL   BorderMode = 4 // prefill border areas with values matching the colors around the area
)

// Enum value maps for BorderMode.
var (
	BorderMode_name = map[int32]string{
		0: "BORDER_REFLECT",
		1: "BORDER_REPLICATE",
		2: "BORDER_WRAP",
		3: "BORDER_ZERO",
		4: "BORDER_PREFILL",
	}
	BorderMode_value = map[string]int32{
		"BORDER_REFLECT":   0,
		"BORDER_REPLICATE": 1,
		"BORDER_WRAP":      2,
		"BORDER_ZERO":      3,
		"BORDER_PREFILL":   4,
	}
)

func (x BorderMode) Enum() *BorderMode {
	p := new(BorderMode)
	*p = x
	return p
}

func (x BorderMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BorderMode) Descriptor() protoreflect.EnumDescriptor {
	return file_generation_proto_enumTypes[11].Descriptor()
}

func (BorderMode) Type() protoreflect.EnumType {
	return &file_generation_proto_enumTypes[11]
}

func (x BorderMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BorderMode.Descriptor instead.
func (BorderMode) EnumDescriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{11}
}

type ColorMatchMode int32

const (
	ColorMatchMode_COLOR_MATCH_HSV ColorMatchMode = 0 // match hue, saturation, and value histograms
	ColorMatchMode_COLOR_MATCH_LAB ColorMatchMode = 1 // match lightness, a, and b histograms
	ColorMatchMode_COLOR_MATCH_RGB ColorMatchMode = 2 // match red, green, and blue histograms
)

// Enum value maps for ColorMatchMode.
var (
	ColorMatchMode_name = map[int32]string{
		0: "COLOR_MATCH_HSV",
		1: "COLOR_MATCH_LAB",
		2: "COLOR_MATCH_RGB",
	}
	ColorMatchMode_value = map[string]int32{
		"COLOR_MATCH_HSV": 0,
		"COLOR_MATCH_LAB": 1,
		"COLOR_MATCH_RGB": 2,
	}
)

func (x ColorMatchMode) Enum() *ColorMatchMode {
	p := new(ColorMatchMode)
	*p = x
	return p
}

func (x ColorMatchMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColorMatchMode) Descriptor() protoreflect.EnumDescriptor {
	return file_generation_proto_enumTypes[12].Descriptor()
}

func (ColorMatchMode) Type() protoreflect.EnumType {
	return &file_generation_proto_enumTypes[12]
}

func (x ColorMatchMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColorMatchMode.Descriptor instead.
func (ColorMatchMode) EnumDescriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{12}
}

type CameraType int32

const (
	CameraType_CAMERA_PERSPECTIVE  CameraType = 0 // Perspective camera
	CameraType_CAMERA_ORTHOGRAPHIC CameraType = 1 // Orthographic camera. Well suited for isometric animations
)

// Enum value maps for CameraType.
var (
	CameraType_name = map[int32]string{
		0: "CAMERA_PERSPECTIVE",
		1: "CAMERA_ORTHOGRAPHIC",
	}
	CameraType_value = map[string]int32{
		"CAMERA_PERSPECTIVE":  0,
		"CAMERA_ORTHOGRAPHIC": 1,
	}
)

func (x CameraType) Enum() *CameraType {
	p := new(CameraType)
	*p = x
	return p
}

func (x CameraType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CameraType) Descriptor() protoreflect.EnumDescriptor {
	return file_generation_proto_enumTypes[13].Descriptor()
}

func (CameraType) Type() protoreflect.EnumType {
	return &file_generation_proto_enumTypes[13]
}

func (x CameraType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CameraType.Descriptor instead.
func (CameraType) EnumDescriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{13}
}

type AssetAction int32

const (
	AssetAction_ASSET_PUT    AssetAction = 0
	AssetAction_ASSET_GET    AssetAction = 1
	AssetAction_ASSET_DELETE AssetAction = 2
)

// Enum value maps for AssetAction.
var (
	AssetAction_name = map[int32]string{
		0: "ASSET_PUT",
		1: "ASSET_GET",
		2: "ASSET_DELETE",
	}
	AssetAction_value = map[string]int32{
		"ASSET_PUT":    0,
		"ASSET_GET":    1,
		"ASSET_DELETE": 2,
	}
)

func (x AssetAction) Enum() *AssetAction {
	p := new(AssetAction)
	*p = x
	return p
}

func (x AssetAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetAction) Descriptor() protoreflect.EnumDescriptor {
	return file_generation_proto_enumTypes[14].Descriptor()
}

func (AssetAction) Type() protoreflect.EnumType {
	return &file_generation_proto_enumTypes[14]
}

func (x AssetAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetAction.Descriptor instead.
func (AssetAction) EnumDescriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{14}
}

// AssetUse defines how the asset is used within a project.  This enum matches
// the values the project proto.
type AssetUse int32

const (
	AssetUse_ASSET_USE_UNDEFINED    AssetUse = 0 // Asset does not have use defined
	AssetUse_ASSET_USE_INPUT        AssetUse = 1 // Asset is used as an input for the project
	AssetUse_ASSET_USE_OUTPUT       AssetUse = 2 // Asset is an output from the project
	AssetUse_ASSET_USE_INTERMEDIATE AssetUse = 3 // Asset is an output from an intermediate step of the project
	AssetUse_ASSET_USE_PROJECT      AssetUse = 4 // Asset is used as the project file for the project
)

// Enum value maps for AssetUse.
var (
	AssetUse_name = map[int32]string{
		0: "ASSET_USE_UNDEFINED",
		1: "ASSET_USE_INPUT",
		2: "ASSET_USE_OUTPUT",
		3: "ASSET_USE_INTERMEDIATE",
		4: "ASSET_USE_PROJECT",
	}
	AssetUse_value = map[string]int32{
		"ASSET_USE_UNDEFINED":    0,
		"ASSET_USE_INPUT":        1,
		"ASSET_USE_OUTPUT":       2,
		"ASSET_USE_INTERMEDIATE": 3,
		"ASSET_USE_PROJECT":      4,
	}
)

func (x AssetUse) Enum() *AssetUse {
	p := new(AssetUse)
	*p = x
	return p
}

func (x AssetUse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetUse) Descriptor() protoreflect.EnumDescriptor {
	return file_generation_proto_enumTypes[15].Descriptor()
}

func (AssetUse) Type() protoreflect.EnumType {
	return &file_generation_proto_enumTypes[15]
}

func (x AssetUse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetUse.Descriptor instead.
func (AssetUse) EnumDescriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{15}
}

type StageAction int32

const (
	StageAction_STAGE_ACTION_PASS    StageAction = 0
	StageAction_STAGE_ACTION_DISCARD StageAction = 1
	StageAction_STAGE_ACTION_RETURN  StageAction = 2
)

// Enum value maps for StageAction.
var (
	StageAction_name = map[int32]string{
		0: "STAGE_ACTION_PASS",
		1: "STAGE_ACTION_DISCARD",
		2: "STAGE_ACTION_RETURN",
	}
	StageAction_value = map[string]int32{
		"STAGE_ACTION_PASS":    0,
		"STAGE_ACTION_DISCARD": 1,
		"STAGE_ACTION_RETURN":  2,
	}
)

func (x StageAction) Enum() *StageAction {
	p := new(StageAction)
	*p = x
	return p
}

func (x StageAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StageAction) Descriptor() protoreflect.EnumDescriptor {
	return file_generation_proto_enumTypes[16].Descriptor()
}

func (StageAction) Type() protoreflect.EnumType {
	return &file_generation_proto_enumTypes[16]
}

func (x StageAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StageAction.Descriptor instead.
func (StageAction) EnumDescriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{16}
}

// Generally, a GPT BPE 16-bit token, paired with an optional string representation.
type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text *string `protobuf:"bytes,1,opt,name=text,proto3,oneof" json:"text,omitempty"`
	Id   uint32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{0}
}

func (x *Token) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *Token) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Sequence of tokens, paired with the id of the tokenizer used to generate them.
type Tokens struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tokens      []*Token `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
	TokenizerId *string  `protobuf:"bytes,2,opt,name=tokenizer_id,json=tokenizerId,proto3,oneof" json:"tokenizer_id,omitempty"`
}

func (x *Tokens) Reset() {
	*x = Tokens{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tokens) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tokens) ProtoMessage() {}

func (x *Tokens) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tokens.ProtoReflect.Descriptor instead.
func (*Tokens) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{1}
}

func (x *Tokens) GetTokens() []*Token {
	if x != nil {
		return x.Tokens
	}
	return nil
}

func (x *Tokens) GetTokenizerId() string {
	if x != nil && x.TokenizerId != nil {
		return *x.TokenizerId
	}
	return ""
}

// A tangible Artifact, such as an image, video, or text that is used for input
// or output.
type Artifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type  ArtifactType `protobuf:"varint,2,opt,name=type,proto3,enum=gooseai.ArtifactType" json:"type,omitempty"`
	Mime  string       `protobuf:"bytes,3,opt,name=mime,proto3" json:"mime,omitempty"`         // MIME type identifier, e.g. "image/png"
	Magic *string      `protobuf:"bytes,4,opt,name=magic,proto3,oneof" json:"magic,omitempty"` // Magic number, e.g. "PNG"
	// Types that are assignable to Data:
	//	*Artifact_Binary
	//	*Artifact_Text
	//	*Artifact_Tokens
	//	*Artifact_Classifier
	//	*Artifact_Tensor
	Data         isArtifact_Data `protobuf_oneof:"data"`
	Index        uint32          `protobuf:"varint,8,opt,name=index,proto3" json:"index,omitempty"`                                                             // Index of this artifact in input/output list
	FinishReason FinishReason    `protobuf:"varint,9,opt,name=finish_reason,json=finishReason,proto3,enum=gooseai.FinishReason" json:"finish_reason,omitempty"` // Reason for finishing, if applicable
	Seed         uint32          `protobuf:"varint,10,opt,name=seed,proto3" json:"seed,omitempty"`                                                              // Seed used to generate this artifact
	Uuid         string          `protobuf:"bytes,12,opt,name=uuid,proto3" json:"uuid,omitempty"`                                                               // UUIDv4 of the artifact, used for asset lookup
	Size         uint64          `protobuf:"varint,13,opt,name=size,proto3" json:"size,omitempty"`                                                              // Size of the artifact in bytes
}

func (x *Artifact) Reset() {
	*x = Artifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Artifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Artifact) ProtoMessage() {}

func (x *Artifact) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Artifact.ProtoReflect.Descriptor instead.
func (*Artifact) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{2}
}

func (x *Artifact) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Artifact) GetType() ArtifactType {
	if x != nil {
		return x.Type
	}
	return ArtifactType_ARTIFACT_NONE
}

func (x *Artifact) GetMime() string {
	if x != nil {
		return x.Mime
	}
	return ""
}

func (x *Artifact) GetMagic() string {
	if x != nil && x.Magic != nil {
		return *x.Magic
	}
	return ""
}

func (m *Artifact) GetData() isArtifact_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *Artifact) GetBinary() []byte {
	if x, ok := x.GetData().(*Artifact_Binary); ok {
		return x.Binary
	}
	return nil
}

func (x *Artifact) GetText() string {
	if x, ok := x.GetData().(*Artifact_Text); ok {
		return x.Text
	}
	return ""
}

func (x *Artifact) GetTokens() *Tokens {
	if x, ok := x.GetData().(*Artifact_Tokens); ok {
		return x.Tokens
	}
	return nil
}

func (x *Artifact) GetClassifier() *ClassifierParameters {
	if x, ok := x.GetData().(*Artifact_Classifier); ok {
		return x.Classifier
	}
	return nil
}

func (x *Artifact) GetTensor() *tensors.Tensor {
	if x, ok := x.GetData().(*Artifact_Tensor); ok {
		return x.Tensor
	}
	return nil
}

func (x *Artifact) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Artifact) GetFinishReason() FinishReason {
	if x != nil {
		return x.FinishReason
	}
	return FinishReason_NULL
}

func (x *Artifact) GetSeed() uint32 {
	if x != nil {
		return x.Seed
	}
	return 0
}

func (x *Artifact) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Artifact) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type isArtifact_Data interface {
	isArtifact_Data()
}

type Artifact_Binary struct {
	Binary []byte `protobuf:"bytes,5,opt,name=binary,proto3,oneof"` // Binary data, e.g. PNG image
}

type Artifact_Text struct {
	Text string `protobuf:"bytes,6,opt,name=text,proto3,oneof"` // Text data, e.g. text prompt
}

type Artifact_Tokens struct {
	Tokens *Tokens `protobuf:"bytes,7,opt,name=tokens,proto3,oneof"` // Tokenized text data, e.g. GPT tokens
}

type Artifact_Classifier struct {
	Classifier *ClassifierParameters `protobuf:"bytes,11,opt,name=classifier,proto3,oneof"`
}

type Artifact_Tensor struct {
	Tensor *tensors.Tensor `protobuf:"bytes,14,opt,name=tensor,proto3,oneof"` // torch.Tensor:
}

func (*Artifact_Binary) isArtifact_Data() {}

func (*Artifact_Text) isArtifact_Data() {}

func (*Artifact_Tokens) isArtifact_Data() {}

func (*Artifact_Classifier) isArtifact_Data() {}

func (*Artifact_Tensor) isArtifact_Data() {}

// A set of parameters for each individual Prompt.
type PromptParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Init   *bool    `protobuf:"varint,1,opt,name=init,proto3,oneof" json:"init,omitempty"` // deprecated, no longer used
	Weight *float32 `protobuf:"fixed32,2,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
}

func (x *PromptParameters) Reset() {
	*x = PromptParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromptParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromptParameters) ProtoMessage() {}

func (x *PromptParameters) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromptParameters.ProtoReflect.Descriptor instead.
func (*PromptParameters) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{3}
}

func (x *PromptParameters) GetInit() bool {
	if x != nil && x.Init != nil {
		return *x.Init
	}
	return false
}

func (x *PromptParameters) GetWeight() float32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

// A Prompt is a special type of Artifact that is used to generate an output.
// There can be multiple Prompts that affect the same output. Currently, the
// only Prompts supported are:
//   - Text (singular)
//   - Init Image (singular, optional, type ARTIFACT_IMAGE)
//   - Mask (singular, optional, type ARTIFACT_MASK)
//   - Depth (singular, optional, type ARTIFACT_DEPTH)
type Prompt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameters *PromptParameters `protobuf:"bytes,1,opt,name=parameters,proto3,oneof" json:"parameters,omitempty"`
	// Types that are assignable to Prompt:
	//	*Prompt_Text
	//	*Prompt_Tokens
	//	*Prompt_Artifact
	Prompt isPrompt_Prompt `protobuf_oneof:"prompt"`
}

func (x *Prompt) Reset() {
	*x = Prompt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prompt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prompt) ProtoMessage() {}

func (x *Prompt) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prompt.ProtoReflect.Descriptor instead.
func (*Prompt) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{4}
}

func (x *Prompt) GetParameters() *PromptParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (m *Prompt) GetPrompt() isPrompt_Prompt {
	if m != nil {
		return m.Prompt
	}
	return nil
}

func (x *Prompt) GetText() string {
	if x, ok := x.GetPrompt().(*Prompt_Text); ok {
		return x.Text
	}
	return ""
}

func (x *Prompt) GetTokens() *Tokens {
	if x, ok := x.GetPrompt().(*Prompt_Tokens); ok {
		return x.Tokens
	}
	return nil
}

func (x *Prompt) GetArtifact() *Artifact {
	if x, ok := x.GetPrompt().(*Prompt_Artifact); ok {
		return x.Artifact
	}
	return nil
}

type isPrompt_Prompt interface {
	isPrompt_Prompt()
}

type Prompt_Text struct {
	Text string `protobuf:"bytes,2,opt,name=text,proto3,oneof"`
}

type Prompt_Tokens struct {
	Tokens *Tokens `protobuf:"bytes,3,opt,name=tokens,proto3,oneof"`
}

type Prompt_Artifact struct {
	Artifact *Artifact `protobuf:"bytes,4,opt,name=artifact,proto3,oneof"`
}

func (*Prompt_Text) isPrompt_Prompt() {}

func (*Prompt_Tokens) isPrompt_Prompt() {}

func (*Prompt_Artifact) isPrompt_Prompt() {}

// Parameters that affect the behavior of the sampler, typically used for CFG.
type SamplerParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eta                *float32 `protobuf:"fixed32,1,opt,name=eta,proto3,oneof" json:"eta,omitempty"`
	SamplingSteps      *uint64  `protobuf:"varint,2,opt,name=sampling_steps,json=samplingSteps,proto3,oneof" json:"sampling_steps,omitempty"`
	LatentChannels     *uint64  `protobuf:"varint,3,opt,name=latent_channels,json=latentChannels,proto3,oneof" json:"latent_channels,omitempty"`
	DownsamplingFactor *uint64  `protobuf:"varint,4,opt,name=downsampling_factor,json=downsamplingFactor,proto3,oneof" json:"downsampling_factor,omitempty"`
	CfgScale           *float32 `protobuf:"fixed32,5,opt,name=cfg_scale,json=cfgScale,proto3,oneof" json:"cfg_scale,omitempty"`
	InitNoiseScale     *float32 `protobuf:"fixed32,6,opt,name=init_noise_scale,json=initNoiseScale,proto3,oneof" json:"init_noise_scale,omitempty"` // defaults to 0.99
	StepNoiseScale     *float32 `protobuf:"fixed32,7,opt,name=step_noise_scale,json=stepNoiseScale,proto3,oneof" json:"step_noise_scale,omitempty"` // defaults to 0.99
}

func (x *SamplerParameters) Reset() {
	*x = SamplerParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamplerParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplerParameters) ProtoMessage() {}

func (x *SamplerParameters) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplerParameters.ProtoReflect.Descriptor instead.
func (*SamplerParameters) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{5}
}

func (x *SamplerParameters) GetEta() float32 {
	if x != nil && x.Eta != nil {
		return *x.Eta
	}
	return 0
}

func (x *SamplerParameters) GetSamplingSteps() uint64 {
	if x != nil && x.SamplingSteps != nil {
		return *x.SamplingSteps
	}
	return 0
}

func (x *SamplerParameters) GetLatentChannels() uint64 {
	if x != nil && x.LatentChannels != nil {
		return *x.LatentChannels
	}
	return 0
}

func (x *SamplerParameters) GetDownsamplingFactor() uint64 {
	if x != nil && x.DownsamplingFactor != nil {
		return *x.DownsamplingFactor
	}
	return 0
}

func (x *SamplerParameters) GetCfgScale() float32 {
	if x != nil && x.CfgScale != nil {
		return *x.CfgScale
	}
	return 0
}

func (x *SamplerParameters) GetInitNoiseScale() float32 {
	if x != nil && x.InitNoiseScale != nil {
		return *x.InitNoiseScale
	}
	return 0
}

func (x *SamplerParameters) GetStepNoiseScale() float32 {
	if x != nil && x.StepNoiseScale != nil {
		return *x.StepNoiseScale
	}
	return 0
}

// Unused, but reserved for future use. Adjustments to the latents after
// initialization.
type ConditionerParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VectorAdjustPrior *string `protobuf:"bytes,1,opt,name=vector_adjust_prior,json=vectorAdjustPrior,proto3,oneof" json:"vector_adjust_prior,omitempty"`
	Conditioner       *Model  `protobuf:"bytes,2,opt,name=conditioner,proto3,oneof" json:"conditioner,omitempty"`
}

func (x *ConditionerParameters) Reset() {
	*x = ConditionerParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionerParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionerParameters) ProtoMessage() {}

func (x *ConditionerParameters) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionerParameters.ProtoReflect.Descriptor instead.
func (*ConditionerParameters) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{6}
}

func (x *ConditionerParameters) GetVectorAdjustPrior() string {
	if x != nil && x.VectorAdjustPrior != nil {
		return *x.VectorAdjustPrior
	}
	return ""
}

func (x *ConditionerParameters) GetConditioner() *Model {
	if x != nil {
		return x.Conditioner
	}
	return nil
}

// When does this schedule definition apply?
type ScheduleParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *float32 `protobuf:"fixed32,1,opt,name=start,proto3,oneof" json:"start,omitempty"` // 0.0 to 1.0
	End   *float32 `protobuf:"fixed32,2,opt,name=end,proto3,oneof" json:"end,omitempty"`     // 0.0 to 1.0
	Value *float32 `protobuf:"fixed32,3,opt,name=value,proto3,oneof" json:"value,omitempty"` // float value to apply on this schedule
}

func (x *ScheduleParameters) Reset() {
	*x = ScheduleParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleParameters) ProtoMessage() {}

func (x *ScheduleParameters) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleParameters.ProtoReflect.Descriptor instead.
func (*ScheduleParameters) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{7}
}

func (x *ScheduleParameters) GetStart() float32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *ScheduleParameters) GetEnd() float32 {
	if x != nil && x.End != nil {
		return *x.End
	}
	return 0
}

func (x *ScheduleParameters) GetValue() float32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

// Parameters that apply to this block of the schedule.
type StepParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScaledStep float32             `protobuf:"fixed32,1,opt,name=scaled_step,json=scaledStep,proto3" json:"scaled_step,omitempty"`
	Sampler    *SamplerParameters  `protobuf:"bytes,2,opt,name=sampler,proto3,oneof" json:"sampler,omitempty"`
	Schedule   *ScheduleParameters `protobuf:"bytes,3,opt,name=schedule,proto3,oneof" json:"schedule,omitempty"`
	Guidance   *GuidanceParameters `protobuf:"bytes,4,opt,name=guidance,proto3,oneof" json:"guidance,omitempty"`
}

func (x *StepParameter) Reset() {
	*x = StepParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StepParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepParameter) ProtoMessage() {}

func (x *StepParameter) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepParameter.ProtoReflect.Descriptor instead.
func (*StepParameter) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{8}
}

func (x *StepParameter) GetScaledStep() float32 {
	if x != nil {
		return x.ScaledStep
	}
	return 0
}

func (x *StepParameter) GetSampler() *SamplerParameters {
	if x != nil {
		return x.Sampler
	}
	return nil
}

func (x *StepParameter) GetSchedule() *ScheduleParameters {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *StepParameter) GetGuidance() *GuidanceParameters {
	if x != nil {
		return x.Guidance
	}
	return nil
}

type Model struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Architecture    ModelArchitecture `protobuf:"varint,1,opt,name=architecture,proto3,enum=gooseai.ModelArchitecture" json:"architecture,omitempty"`
	Publisher       string            `protobuf:"bytes,2,opt,name=publisher,proto3" json:"publisher,omitempty"`
	Dataset         string            `protobuf:"bytes,3,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Version         float32           `protobuf:"fixed32,4,opt,name=version,proto3" json:"version,omitempty"`
	SemanticVersion string            `protobuf:"bytes,5,opt,name=semantic_version,json=semanticVersion,proto3" json:"semantic_version,omitempty"`
	Alias           string            `protobuf:"bytes,6,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *Model) Reset() {
	*x = Model{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Model) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model) ProtoMessage() {}

func (x *Model) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model.ProtoReflect.Descriptor instead.
func (*Model) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{9}
}

func (x *Model) GetArchitecture() ModelArchitecture {
	if x != nil {
		return x.Architecture
	}
	return ModelArchitecture_MODEL_ARCHITECTURE_NONE
}

func (x *Model) GetPublisher() string {
	if x != nil {
		return x.Publisher
	}
	return ""
}

func (x *Model) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *Model) GetVersion() float32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Model) GetSemanticVersion() string {
	if x != nil {
		return x.SemanticVersion
	}
	return ""
}

func (x *Model) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

type CutoutParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cutouts   []*CutoutParameters `protobuf:"bytes,1,rep,name=cutouts,proto3" json:"cutouts,omitempty"`                              // Nested cutouts, unsupported
	Count     *uint32             `protobuf:"varint,2,opt,name=count,proto3,oneof" json:"count,omitempty"`                           // 0 to n, usually 8 to 32, 0 inner
	Gray      *float32            `protobuf:"fixed32,3,opt,name=gray,proto3,oneof" json:"gray,omitempty"`                            // 0.0 to 1.0, defaults to 0.2
	Blur      *float32            `protobuf:"fixed32,4,opt,name=blur,proto3,oneof" json:"blur,omitempty"`                            // percentage of cutouts to blur
	SizePower *float32            `protobuf:"fixed32,5,opt,name=size_power,json=sizePower,proto3,oneof" json:"size_power,omitempty"` // defaults to inner: 0.5, outer: 0.0
}

func (x *CutoutParameters) Reset() {
	*x = CutoutParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CutoutParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CutoutParameters) ProtoMessage() {}

func (x *CutoutParameters) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CutoutParameters.ProtoReflect.Descriptor instead.
func (*CutoutParameters) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{10}
}

func (x *CutoutParameters) GetCutouts() []*CutoutParameters {
	if x != nil {
		return x.Cutouts
	}
	return nil
}

func (x *CutoutParameters) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CutoutParameters) GetGray() float32 {
	if x != nil && x.Gray != nil {
		return *x.Gray
	}
	return 0
}

func (x *CutoutParameters) GetBlur() float32 {
	if x != nil && x.Blur != nil {
		return *x.Blur
	}
	return 0
}

func (x *CutoutParameters) GetSizePower() float32 {
	if x != nil && x.SizePower != nil {
		return *x.SizePower
	}
	return 0
}

// GuidanceScheduleParameters are used to define a schedule for CLIP guidance, and
// are used to define the behavior of the guidance over time. They are relative
// to the total number of steps, and are scaled to the number of steps in the
// current run.
type GuidanceScheduleParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration float32 `protobuf:"fixed32,1,opt,name=duration,proto3" json:"duration,omitempty"`
	Value    float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GuidanceScheduleParameters) Reset() {
	*x = GuidanceScheduleParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuidanceScheduleParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuidanceScheduleParameters) ProtoMessage() {}

func (x *GuidanceScheduleParameters) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuidanceScheduleParameters.ProtoReflect.Descriptor instead.
func (*GuidanceScheduleParameters) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{11}
}

func (x *GuidanceScheduleParameters) GetDuration() float32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *GuidanceScheduleParameters) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Parameters that affect the behavior of the guidance, typically used for CLIP.
// We can specify more than one model, and the guidance will be a weighted sum
// of the models.
type GuidanceInstanceParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Models           []*Model                      `protobuf:"bytes,2,rep,name=models,proto3" json:"models,omitempty"`                                                     // models to use for this set
	GuidanceStrength *float32                      `protobuf:"fixed32,3,opt,name=guidance_strength,json=guidanceStrength,proto3,oneof" json:"guidance_strength,omitempty"` // 0.0 to 1.0, usually 0.05 to 0.225
	Schedule         []*GuidanceScheduleParameters `protobuf:"bytes,4,rep,name=schedule,proto3" json:"schedule,omitempty"`                                                 // when to apply guidance
	Cutouts          *CutoutParameters             `protobuf:"bytes,5,opt,name=cutouts,proto3,oneof" json:"cutouts,omitempty"`                                             // cutout parameters
	Prompt           *Prompt                       `protobuf:"bytes,6,opt,name=prompt,proto3,oneof" json:"prompt,omitempty"`                                               // prompt to use for guidance
}

func (x *GuidanceInstanceParameters) Reset() {
	*x = GuidanceInstanceParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuidanceInstanceParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuidanceInstanceParameters) ProtoMessage() {}

func (x *GuidanceInstanceParameters) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuidanceInstanceParameters.ProtoReflect.Descriptor instead.
func (*GuidanceInstanceParameters) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{12}
}

func (x *GuidanceInstanceParameters) GetModels() []*Model {
	if x != nil {
		return x.Models
	}
	return nil
}

func (x *GuidanceInstanceParameters) GetGuidanceStrength() float32 {
	if x != nil && x.GuidanceStrength != nil {
		return *x.GuidanceStrength
	}
	return 0
}

func (x *GuidanceInstanceParameters) GetSchedule() []*GuidanceScheduleParameters {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *GuidanceInstanceParameters) GetCutouts() *CutoutParameters {
	if x != nil {
		return x.Cutouts
	}
	return nil
}

func (x *GuidanceInstanceParameters) GetPrompt() *Prompt {
	if x != nil {
		return x.Prompt
	}
	return nil
}

// Parameters that affect the behavior of the guidance, typically used for CLIP.
// The omission of this field implies the default guidance of CFG.
type GuidanceParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuidancePreset GuidancePreset                `protobuf:"varint,1,opt,name=guidance_preset,json=guidancePreset,proto3,enum=gooseai.GuidancePreset" json:"guidance_preset,omitempty"` // base preset for guidance
	Instances      []*GuidanceInstanceParameters `protobuf:"bytes,2,rep,name=instances,proto3" json:"instances,omitempty"`                                                              // guidance instances
}

func (x *GuidanceParameters) Reset() {
	*x = GuidanceParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuidanceParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuidanceParameters) ProtoMessage() {}

func (x *GuidanceParameters) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuidanceParameters.ProtoReflect.Descriptor instead.
func (*GuidanceParameters) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{13}
}

func (x *GuidanceParameters) GetGuidancePreset() GuidancePreset {
	if x != nil {
		return x.GuidancePreset
	}
	return GuidancePreset_GUIDANCE_PRESET_NONE
}

func (x *GuidanceParameters) GetInstances() []*GuidanceInstanceParameters {
	if x != nil {
		return x.Instances
	}
	return nil
}

type TransformType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*TransformType_Diffusion
	//	*TransformType_Upscaler
	Type isTransformType_Type `protobuf_oneof:"type"`
}

func (x *TransformType) Reset() {
	*x = TransformType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformType) ProtoMessage() {}

func (x *TransformType) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformType.ProtoReflect.Descriptor instead.
func (*TransformType) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{14}
}

func (m *TransformType) GetType() isTransformType_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *TransformType) GetDiffusion() DiffusionSampler {
	if x, ok := x.GetType().(*TransformType_Diffusion); ok {
		return x.Diffusion
	}
	return DiffusionSampler_SAMPLER_DDIM
}

func (x *TransformType) GetUpscaler() Upscaler {
	if x, ok := x.GetType().(*TransformType_Upscaler); ok {
		return x.Upscaler
	}
	return Upscaler_UPSCALER_RGB
}

type isTransformType_Type interface {
	isTransformType_Type()
}

type TransformType_Diffusion struct {
	Diffusion DiffusionSampler `protobuf:"varint,1,opt,name=diffusion,proto3,enum=gooseai.DiffusionSampler,oneof"`
}

type TransformType_Upscaler struct {
	Upscaler Upscaler `protobuf:"varint,2,opt,name=upscaler,proto3,enum=gooseai.Upscaler,oneof"`
}

func (*TransformType_Diffusion) isTransformType_Type() {}

func (*TransformType_Upscaler) isTransformType_Type() {}

type ImageParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height         *uint64          `protobuf:"varint,1,opt,name=height,proto3,oneof" json:"height,omitempty"`
	Width          *uint64          `protobuf:"varint,2,opt,name=width,proto3,oneof" json:"width,omitempty"`
	Seed           []uint32         `protobuf:"varint,3,rep,packed,name=seed,proto3" json:"seed,omitempty"`
	Samples        *uint64          `protobuf:"varint,4,opt,name=samples,proto3,oneof" json:"samples,omitempty"`
	Steps          *uint64          `protobuf:"varint,5,opt,name=steps,proto3,oneof" json:"steps,omitempty"`
	Transform      *TransformType   `protobuf:"bytes,6,opt,name=transform,proto3,oneof" json:"transform,omitempty"`
	Parameters     []*StepParameter `protobuf:"bytes,7,rep,name=parameters,proto3" json:"parameters,omitempty"`
	MaskedAreaInit *MaskedAreaInit  `protobuf:"varint,8,opt,name=masked_area_init,json=maskedAreaInit,proto3,enum=gooseai.MaskedAreaInit,oneof" json:"masked_area_init,omitempty"` // defaults to MASKED_AREA_INIT_ZERO
	WeightMethod   *WeightMethod    `protobuf:"varint,9,opt,name=weight_method,json=weightMethod,proto3,enum=gooseai.WeightMethod,oneof" json:"weight_method,omitempty"`           //defaults to TEXT_ENCODER
	Quantize       *bool            `protobuf:"varint,10,opt,name=quantize,proto3,oneof" json:"quantize,omitempty"`                                                                //defaults to true
}

func (x *ImageParameters) Reset() {
	*x = ImageParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageParameters) ProtoMessage() {}

func (x *ImageParameters) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageParameters.ProtoReflect.Descriptor instead.
func (*ImageParameters) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{15}
}

func (x *ImageParameters) GetHeight() uint64 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *ImageParameters) GetWidth() uint64 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *ImageParameters) GetSeed() []uint32 {
	if x != nil {
		return x.Seed
	}
	return nil
}

func (x *ImageParameters) GetSamples() uint64 {
	if x != nil && x.Samples != nil {
		return *x.Samples
	}
	return 0
}

func (x *ImageParameters) GetSteps() uint64 {
	if x != nil && x.Steps != nil {
		return *x.Steps
	}
	return 0
}

func (x *ImageParameters) GetTransform() *TransformType {
	if x != nil {
		return x.Transform
	}
	return nil
}

func (x *ImageParameters) GetParameters() []*StepParameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *ImageParameters) GetMaskedAreaInit() MaskedAreaInit {
	if x != nil && x.MaskedAreaInit != nil {
		return *x.MaskedAreaInit
	}
	return MaskedAreaInit_MASKED_AREA_INIT_ZERO
}

func (x *ImageParameters) GetWeightMethod() WeightMethod {
	if x != nil && x.WeightMethod != nil {
		return *x.WeightMethod
	}
	return WeightMethod_TEXT_ENCODER
}

func (x *ImageParameters) GetQuantize() bool {
	if x != nil && x.Quantize != nil {
		return *x.Quantize
	}
	return false
}

type ClassifierConcept struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Concept   string   `protobuf:"bytes,1,opt,name=concept,proto3" json:"concept,omitempty"`
	Threshold *float32 `protobuf:"fixed32,2,opt,name=threshold,proto3,oneof" json:"threshold,omitempty"`
}

func (x *ClassifierConcept) Reset() {
	*x = ClassifierConcept{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassifierConcept) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassifierConcept) ProtoMessage() {}

func (x *ClassifierConcept) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassifierConcept.ProtoReflect.Descriptor instead.
func (*ClassifierConcept) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{16}
}

func (x *ClassifierConcept) GetConcept() string {
	if x != nil {
		return x.Concept
	}
	return ""
}

func (x *ClassifierConcept) GetThreshold() float32 {
	if x != nil && x.Threshold != nil {
		return *x.Threshold
	}
	return 0
}

type ClassifierCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Concepts       []*ClassifierConcept `protobuf:"bytes,2,rep,name=concepts,proto3" json:"concepts,omitempty"`
	Adjustment     *float32             `protobuf:"fixed32,3,opt,name=adjustment,proto3,oneof" json:"adjustment,omitempty"`
	Action         *Action              `protobuf:"varint,4,opt,name=action,proto3,enum=gooseai.Action,oneof" json:"action,omitempty"`
	ClassifierMode *ClassifierMode      `protobuf:"varint,5,opt,name=classifier_mode,json=classifierMode,proto3,enum=gooseai.ClassifierMode,oneof" json:"classifier_mode,omitempty"`
}

func (x *ClassifierCategory) Reset() {
	*x = ClassifierCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassifierCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassifierCategory) ProtoMessage() {}

func (x *ClassifierCategory) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassifierCategory.ProtoReflect.Descriptor instead.
func (*ClassifierCategory) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{17}
}

func (x *ClassifierCategory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClassifierCategory) GetConcepts() []*ClassifierConcept {
	if x != nil {
		return x.Concepts
	}
	return nil
}

func (x *ClassifierCategory) GetAdjustment() float32 {
	if x != nil && x.Adjustment != nil {
		return *x.Adjustment
	}
	return 0
}

func (x *ClassifierCategory) GetAction() Action {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return Action_ACTION_PASSTHROUGH
}

func (x *ClassifierCategory) GetClassifierMode() ClassifierMode {
	if x != nil && x.ClassifierMode != nil {
		return *x.ClassifierMode
	}
	return ClassifierMode_CLSFR_MODE_ZEROSHOT
}

type ClassifierParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories     []*ClassifierCategory `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
	Exceeds        []*ClassifierCategory `protobuf:"bytes,2,rep,name=exceeds,proto3" json:"exceeds,omitempty"`
	RealizedAction *Action               `protobuf:"varint,3,opt,name=realized_action,json=realizedAction,proto3,enum=gooseai.Action,oneof" json:"realized_action,omitempty"`
}

func (x *ClassifierParameters) Reset() {
	*x = ClassifierParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassifierParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassifierParameters) ProtoMessage() {}

func (x *ClassifierParameters) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassifierParameters.ProtoReflect.Descriptor instead.
func (*ClassifierParameters) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{18}
}

func (x *ClassifierParameters) GetCategories() []*ClassifierCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *ClassifierParameters) GetExceeds() []*ClassifierCategory {
	if x != nil {
		return x.Exceeds
	}
	return nil
}

func (x *ClassifierParameters) GetRealizedAction() Action {
	if x != nil && x.RealizedAction != nil {
		return *x.RealizedAction
	}
	return Action_ACTION_PASSTHROUGH
}

// Interpolation between two images applied at specified blend ratios
type InterpolateParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ratios []float32        `protobuf:"fixed32,1,rep,packed,name=ratios,proto3" json:"ratios,omitempty"`
	Mode   *InterpolateMode `protobuf:"varint,2,opt,name=mode,proto3,enum=gooseai.InterpolateMode,oneof" json:"mode,omitempty"`
}

func (x *InterpolateParameters) Reset() {
	*x = InterpolateParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterpolateParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterpolateParameters) ProtoMessage() {}

func (x *InterpolateParameters) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterpolateParameters.ProtoReflect.Descriptor instead.
func (*InterpolateParameters) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{19}
}

func (x *InterpolateParameters) GetRatios() []float32 {
	if x != nil {
		return x.Ratios
	}
	return nil
}

func (x *InterpolateParameters) GetMode() InterpolateMode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return InterpolateMode_INTERPOLATE_LINEAR
}

type TransformColorAdjust struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Brightness  *float32        `protobuf:"fixed32,1,opt,name=brightness,proto3,oneof" json:"brightness,omitempty"`                                           // scale pixel intensities, 1.0 is no change
	Contrast    *float32        `protobuf:"fixed32,2,opt,name=contrast,proto3,oneof" json:"contrast,omitempty"`                                               // contrast adjustment, 1.0 is no change
	Hue         *float32        `protobuf:"fixed32,3,opt,name=hue,proto3,oneof" json:"hue,omitempty"`                                                         // -180 to 180 hue adjustment, 0.0 is no change
	Saturation  *float32        `protobuf:"fixed32,4,opt,name=saturation,proto3,oneof" json:"saturation,omitempty"`                                           // 0.0 to 2.0 saturation scale, 1.0 is no change
	Lightness   *float32        `protobuf:"fixed32,5,opt,name=lightness,proto3,oneof" json:"lightness,omitempty"`                                             // -1.0 to 1.0 lightness adjustment, 0.0 is no change
	MatchImage  *Artifact       `protobuf:"bytes,6,opt,name=match_image,json=matchImage,proto3,oneof" json:"match_image,omitempty"`                           // image to color match
	MatchMode   *ColorMatchMode `protobuf:"varint,7,opt,name=match_mode,json=matchMode,proto3,enum=gooseai.ColorMatchMode,oneof" json:"match_mode,omitempty"` // color match mode to use
	NoiseAmount *float32        `protobuf:"fixed32,8,opt,name=noise_amount,json=noiseAmount,proto3,oneof" json:"noise_amount,omitempty"`                      // amount of gaussian noise to add
	NoiseSeed   *uint32         `protobuf:"varint,9,opt,name=noise_seed,json=noiseSeed,proto3,oneof" json:"noise_seed,omitempty"`                             // random seed for noise
}

func (x *TransformColorAdjust) Reset() {
	*x = TransformColorAdjust{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformColorAdjust) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformColorAdjust) ProtoMessage() {}

func (x *TransformColorAdjust) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformColorAdjust.ProtoReflect.Descriptor instead.
func (*TransformColorAdjust) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{20}
}

func (x *TransformColorAdjust) GetBrightness() float32 {
	if x != nil && x.Brightness != nil {
		return *x.Brightness
	}
	return 0
}

func (x *TransformColorAdjust) GetContrast() float32 {
	if x != nil && x.Contrast != nil {
		return *x.Contrast
	}
	return 0
}

func (x *TransformColorAdjust) GetHue() float32 {
	if x != nil && x.Hue != nil {
		return *x.Hue
	}
	return 0
}

func (x *TransformColorAdjust) GetSaturation() float32 {
	if x != nil && x.Saturation != nil {
		return *x.Saturation
	}
	return 0
}

func (x *TransformColorAdjust) GetLightness() float32 {
	if x != nil && x.Lightness != nil {
		return *x.Lightness
	}
	return 0
}

func (x *TransformColorAdjust) GetMatchImage() *Artifact {
	if x != nil {
		return x.MatchImage
	}
	return nil
}

func (x *TransformColorAdjust) GetMatchMode() ColorMatchMode {
	if x != nil && x.MatchMode != nil {
		return *x.MatchMode
	}
	return ColorMatchMode_COLOR_MATCH_HSV
}

func (x *TransformColorAdjust) GetNoiseAmount() float32 {
	if x != nil && x.NoiseAmount != nil {
		return *x.NoiseAmount
	}
	return 0
}

func (x *TransformColorAdjust) GetNoiseSeed() uint32 {
	if x != nil && x.NoiseSeed != nil {
		return *x.NoiseSeed
	}
	return 0
}

type TransformDepthCalc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlendWeight *float32 `protobuf:"fixed32,1,opt,name=blend_weight,json=blendWeight,proto3,oneof" json:"blend_weight,omitempty"` // blend factor between AdaBins (0.0) and MiDaS (1.0)
	BlurRadius  *uint32  `protobuf:"varint,2,opt,name=blur_radius,json=blurRadius,proto3,oneof" json:"blur_radius,omitempty"`     // defaults to 0.0
	Reverse     *bool    `protobuf:"varint,3,opt,name=reverse,proto3,oneof" json:"reverse,omitempty"`                             // make near depths have higher values
}

func (x *TransformDepthCalc) Reset() {
	*x = TransformDepthCalc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformDepthCalc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformDepthCalc) ProtoMessage() {}

func (x *TransformDepthCalc) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformDepthCalc.ProtoReflect.Descriptor instead.
func (*TransformDepthCalc) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{21}
}

func (x *TransformDepthCalc) GetBlendWeight() float32 {
	if x != nil && x.BlendWeight != nil {
		return *x.BlendWeight
	}
	return 0
}

func (x *TransformDepthCalc) GetBlurRadius() uint32 {
	if x != nil && x.BlurRadius != nil {
		return *x.BlurRadius
	}
	return 0
}

func (x *TransformDepthCalc) GetReverse() bool {
	if x != nil && x.Reverse != nil {
		return *x.Reverse
	}
	return false
}

type TransformMatrix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Column-major 3x3 or 4x4 perspective matrix
	// [sx, 10, 20, tx]   [x]
	// [01, sy, 21, ty] . [y]
	// [02, 12, sz, tz]   [z]
	// [03, 13, 23, 33]   [1]
	Data []float32 `protobuf:"fixed32,1,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (x *TransformMatrix) Reset() {
	*x = TransformMatrix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformMatrix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformMatrix) ProtoMessage() {}

func (x *TransformMatrix) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformMatrix.ProtoReflect.Descriptor instead.
func (*TransformMatrix) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{22}
}

func (x *TransformMatrix) GetData() []float32 {
	if x != nil {
		return x.Data
	}
	return nil
}

type TransformResample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BorderMode    BorderMode       `protobuf:"varint,1,opt,name=border_mode,json=borderMode,proto3,enum=gooseai.BorderMode" json:"border_mode,omitempty"` // extrapolation of border pixels
	Transform     *TransformMatrix `protobuf:"bytes,2,opt,name=transform,proto3" json:"transform,omitempty"`                                              // 3x3 or 4x4 matrix
	PrevTransform *TransformMatrix `protobuf:"bytes,3,opt,name=prev_transform,json=prevTransform,proto3,oneof" json:"prev_transform,omitempty"`           // 3x3 or 4x4 matrix, defaults to identity
	DepthWarp     *float32         `protobuf:"fixed32,4,opt,name=depth_warp,json=depthWarp,proto3,oneof" json:"depth_warp,omitempty"`                     // depth warp factor, defaults to 1.0
	ExportMask    *bool            `protobuf:"varint,5,opt,name=export_mask,json=exportMask,proto3,oneof" json:"export_mask,omitempty"`                   // return inpaint mask
}

func (x *TransformResample) Reset() {
	*x = TransformResample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformResample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformResample) ProtoMessage() {}

func (x *TransformResample) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformResample.ProtoReflect.Descriptor instead.
func (*TransformResample) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{23}
}

func (x *TransformResample) GetBorderMode() BorderMode {
	if x != nil {
		return x.BorderMode
	}
	return BorderMode_BORDER_REFLECT
}

func (x *TransformResample) GetTransform() *TransformMatrix {
	if x != nil {
		return x.Transform
	}
	return nil
}

func (x *TransformResample) GetPrevTransform() *TransformMatrix {
	if x != nil {
		return x.PrevTransform
	}
	return nil
}

func (x *TransformResample) GetDepthWarp() float32 {
	if x != nil && x.DepthWarp != nil {
		return *x.DepthWarp
	}
	return 0
}

func (x *TransformResample) GetExportMask() bool {
	if x != nil && x.ExportMask != nil {
		return *x.ExportMask
	}
	return false
}

type PointCloudRenderParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Radius         float32 `protobuf:"fixed32,1,opt,name=radius,proto3" json:"radius,omitempty"`                                        // The radius (in NDC units) of each disk to be rasterized
	PointsPerPixel uint32  `protobuf:"varint,2,opt,name=points_per_pixel,json=pointsPerPixel,proto3" json:"points_per_pixel,omitempty"` // Number of points to keep track of per pixel
}

func (x *PointCloudRenderParameters) Reset() {
	*x = PointCloudRenderParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointCloudRenderParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointCloudRenderParameters) ProtoMessage() {}

func (x *PointCloudRenderParameters) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointCloudRenderParameters.ProtoReflect.Descriptor instead.
func (*PointCloudRenderParameters) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{24}
}

func (x *PointCloudRenderParameters) GetRadius() float32 {
	if x != nil {
		return x.Radius
	}
	return 0
}

func (x *PointCloudRenderParameters) GetPointsPerPixel() uint32 {
	if x != nil {
		return x.PointsPerPixel
	}
	return 0
}

type MeshRenderParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxMeshEdge float32 `protobuf:"fixed32,1,opt,name=max_mesh_edge,json=maxMeshEdge,proto3" json:"max_mesh_edge,omitempty"` // Mesh edges longer than this value are discarded
}

func (x *MeshRenderParameters) Reset() {
	*x = MeshRenderParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshRenderParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshRenderParameters) ProtoMessage() {}

func (x *MeshRenderParameters) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshRenderParameters.ProtoReflect.Descriptor instead.
func (*MeshRenderParameters) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{25}
}

func (x *MeshRenderParameters) GetMaxMeshEdge() float32 {
	if x != nil {
		return x.MaxMeshEdge
	}
	return 0
}

type RenderParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RenderParameters:
	//	*RenderParameters_PointcloudParameters
	//	*RenderParameters_MeshParameters
	RenderParameters isRenderParameters_RenderParameters `protobuf_oneof:"render_parameters"`
}

func (x *RenderParameters) Reset() {
	*x = RenderParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderParameters) ProtoMessage() {}

func (x *RenderParameters) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderParameters.ProtoReflect.Descriptor instead.
func (*RenderParameters) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{26}
}

func (m *RenderParameters) GetRenderParameters() isRenderParameters_RenderParameters {
	if m != nil {
		return m.RenderParameters
	}
	return nil
}

func (x *RenderParameters) GetPointcloudParameters() *PointCloudRenderParameters {
	if x, ok := x.GetRenderParameters().(*RenderParameters_PointcloudParameters); ok {
		return x.PointcloudParameters
	}
	return nil
}

func (x *RenderParameters) GetMeshParameters() *MeshRenderParameters {
	if x, ok := x.GetRenderParameters().(*RenderParameters_MeshParameters); ok {
		return x.MeshParameters
	}
	return nil
}

type isRenderParameters_RenderParameters interface {
	isRenderParameters_RenderParameters()
}

type RenderParameters_PointcloudParameters struct {
	PointcloudParameters *PointCloudRenderParameters `protobuf:"bytes,1,opt,name=pointcloud_parameters,json=pointcloudParameters,proto3,oneof"`
}

type RenderParameters_MeshParameters struct {
	MeshParameters *MeshRenderParameters `protobuf:"bytes,2,opt,name=mesh_parameters,json=meshParameters,proto3,oneof"`
}

func (*RenderParameters_PointcloudParameters) isRenderParameters_RenderParameters() {}

func (*RenderParameters_MeshParameters) isRenderParameters_RenderParameters() {}

type CameraParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraType CameraType `protobuf:"varint,1,opt,name=camera_type,json=cameraType,proto3,enum=gooseai.CameraType" json:"camera_type,omitempty"`
	NearPlane  float32    `protobuf:"fixed32,2,opt,name=near_plane,json=nearPlane,proto3" json:"near_plane,omitempty"` // Nearest plane depth of a rendered frustum
	FarPlane   float32    `protobuf:"fixed32,3,opt,name=far_plane,json=farPlane,proto3" json:"far_plane,omitempty"`    // Farthest plane depth of a rendered frustum
	Fov        *float32   `protobuf:"fixed32,4,opt,name=fov,proto3,oneof" json:"fov,omitempty"`                        // Camera field of view (in degrees). Must be set for CAMERA_PERSPECTIVE type.
}

func (x *CameraParameters) Reset() {
	*x = CameraParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CameraParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraParameters) ProtoMessage() {}

func (x *CameraParameters) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraParameters.ProtoReflect.Descriptor instead.
func (*CameraParameters) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{27}
}

func (x *CameraParameters) GetCameraType() CameraType {
	if x != nil {
		return x.CameraType
	}
	return CameraType_CAMERA_PERSPECTIVE
}

func (x *CameraParameters) GetNearPlane() float32 {
	if x != nil {
		return x.NearPlane
	}
	return 0
}

func (x *CameraParameters) GetFarPlane() float32 {
	if x != nil {
		return x.FarPlane
	}
	return 0
}

func (x *CameraParameters) GetFov() float32 {
	if x != nil && x.Fov != nil {
		return *x.Fov
	}
	return 0
}

type TransformCameraPose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorldToViewMatrix     *TransformMatrix  `protobuf:"bytes,1,opt,name=world_to_view_matrix,json=worldToViewMatrix,proto3" json:"world_to_view_matrix,omitempty"` // 4x4 transform matrix for the next frame
	CameraParameters      *CameraParameters `protobuf:"bytes,2,opt,name=camera_parameters,json=cameraParameters,proto3" json:"camera_parameters,omitempty"`
	ImageRenderParameters *RenderParameters `protobuf:"bytes,3,opt,name=image_render_parameters,json=imageRenderParameters,proto3" json:"image_render_parameters,omitempty"`
	MaskRenderParameters  *RenderParameters `protobuf:"bytes,4,opt,name=mask_render_parameters,json=maskRenderParameters,proto3" json:"mask_render_parameters,omitempty"`
	DoPrefill             bool              `protobuf:"varint,5,opt,name=do_prefill,json=doPrefill,proto3" json:"do_prefill,omitempty"` // Prefill masked areas with values matching the colors around the area
}

func (x *TransformCameraPose) Reset() {
	*x = TransformCameraPose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformCameraPose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformCameraPose) ProtoMessage() {}

func (x *TransformCameraPose) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformCameraPose.ProtoReflect.Descriptor instead.
func (*TransformCameraPose) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{28}
}

func (x *TransformCameraPose) GetWorldToViewMatrix() *TransformMatrix {
	if x != nil {
		return x.WorldToViewMatrix
	}
	return nil
}

func (x *TransformCameraPose) GetCameraParameters() *CameraParameters {
	if x != nil {
		return x.CameraParameters
	}
	return nil
}

func (x *TransformCameraPose) GetImageRenderParameters() *RenderParameters {
	if x != nil {
		return x.ImageRenderParameters
	}
	return nil
}

func (x *TransformCameraPose) GetMaskRenderParameters() *RenderParameters {
	if x != nil {
		return x.MaskRenderParameters
	}
	return nil
}

func (x *TransformCameraPose) GetDoPrefill() bool {
	if x != nil {
		return x.DoPrefill
	}
	return false
}

type TransformParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Transform:
	//	*TransformParameters_ColorAdjust
	//	*TransformParameters_DepthCalc
	//	*TransformParameters_Resample
	//	*TransformParameters_CameraPose
	Transform isTransformParameters_Transform `protobuf_oneof:"transform"`
}

func (x *TransformParameters) Reset() {
	*x = TransformParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformParameters) ProtoMessage() {}

func (x *TransformParameters) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformParameters.ProtoReflect.Descriptor instead.
func (*TransformParameters) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{29}
}

func (m *TransformParameters) GetTransform() isTransformParameters_Transform {
	if m != nil {
		return m.Transform
	}
	return nil
}

func (x *TransformParameters) GetColorAdjust() *TransformColorAdjust {
	if x, ok := x.GetTransform().(*TransformParameters_ColorAdjust); ok {
		return x.ColorAdjust
	}
	return nil
}

func (x *TransformParameters) GetDepthCalc() *TransformDepthCalc {
	if x, ok := x.GetTransform().(*TransformParameters_DepthCalc); ok {
		return x.DepthCalc
	}
	return nil
}

func (x *TransformParameters) GetResample() *TransformResample {
	if x, ok := x.GetTransform().(*TransformParameters_Resample); ok {
		return x.Resample
	}
	return nil
}

func (x *TransformParameters) GetCameraPose() *TransformCameraPose {
	if x, ok := x.GetTransform().(*TransformParameters_CameraPose); ok {
		return x.CameraPose
	}
	return nil
}

type isTransformParameters_Transform interface {
	isTransformParameters_Transform()
}

type TransformParameters_ColorAdjust struct {
	ColorAdjust *TransformColorAdjust `protobuf:"bytes,2,opt,name=color_adjust,json=colorAdjust,proto3,oneof"`
}

type TransformParameters_DepthCalc struct {
	DepthCalc *TransformDepthCalc `protobuf:"bytes,4,opt,name=depth_calc,json=depthCalc,proto3,oneof"`
}

type TransformParameters_Resample struct {
	Resample *TransformResample `protobuf:"bytes,5,opt,name=resample,proto3,oneof"`
}

type TransformParameters_CameraPose struct {
	CameraPose *TransformCameraPose `protobuf:"bytes,6,opt,name=camera_pose,json=cameraPose,proto3,oneof"`
}

func (*TransformParameters_ColorAdjust) isTransformParameters_Transform() {}

func (*TransformParameters_DepthCalc) isTransformParameters_Transform() {}

func (*TransformParameters_Resample) isTransformParameters_Transform() {}

func (*TransformParameters_CameraPose) isTransformParameters_Transform() {}

type AssetParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action    AssetAction `protobuf:"varint,1,opt,name=action,proto3,enum=gooseai.AssetAction" json:"action,omitempty"`
	ProjectId string      `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Use       AssetUse    `protobuf:"varint,3,opt,name=use,proto3,enum=gooseai.AssetUse" json:"use,omitempty"`
}

func (x *AssetParameters) Reset() {
	*x = AssetParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetParameters) ProtoMessage() {}

func (x *AssetParameters) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetParameters.ProtoReflect.Descriptor instead.
func (*AssetParameters) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{30}
}

func (x *AssetParameters) GetAction() AssetAction {
	if x != nil {
		return x.Action
	}
	return AssetAction_ASSET_PUT
}

func (x *AssetParameters) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AssetParameters) GetUse() AssetUse {
	if x != nil {
		return x.Use
	}
	return AssetUse_ASSET_USE_UNDEFINED
}

// AnswerMeta is a set of metadata about an answer, usually the operating
// environment.
type AnswerMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GpuId    *string `protobuf:"bytes,1,opt,name=gpu_id,json=gpuId,proto3,oneof" json:"gpu_id,omitempty"`
	CpuId    *string `protobuf:"bytes,2,opt,name=cpu_id,json=cpuId,proto3,oneof" json:"cpu_id,omitempty"`
	NodeId   *string `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3,oneof" json:"node_id,omitempty"`
	EngineId *string `protobuf:"bytes,4,opt,name=engine_id,json=engineId,proto3,oneof" json:"engine_id,omitempty"`
}

func (x *AnswerMeta) Reset() {
	*x = AnswerMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnswerMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerMeta) ProtoMessage() {}

func (x *AnswerMeta) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerMeta.ProtoReflect.Descriptor instead.
func (*AnswerMeta) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{31}
}

func (x *AnswerMeta) GetGpuId() string {
	if x != nil && x.GpuId != nil {
		return *x.GpuId
	}
	return ""
}

func (x *AnswerMeta) GetCpuId() string {
	if x != nil && x.CpuId != nil {
		return *x.CpuId
	}
	return ""
}

func (x *AnswerMeta) GetNodeId() string {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return ""
}

func (x *AnswerMeta) GetEngineId() string {
	if x != nil && x.EngineId != nil {
		return *x.EngineId
	}
	return ""
}

// An Answer is a response to a Request. It is a set of Artifacts, which can be
// of any type and forwarded to the client or the next stage.
type Answer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnswerId  string      `protobuf:"bytes,1,opt,name=answer_id,json=answerId,proto3" json:"answer_id,omitempty"`
	RequestId string      `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Received  uint64      `protobuf:"varint,3,opt,name=received,proto3" json:"received,omitempty"`
	Created   uint64      `protobuf:"varint,4,opt,name=created,proto3" json:"created,omitempty"`
	Meta      *AnswerMeta `protobuf:"bytes,6,opt,name=meta,proto3,oneof" json:"meta,omitempty"`
	Artifacts []*Artifact `protobuf:"bytes,7,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
}

func (x *Answer) Reset() {
	*x = Answer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Answer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Answer) ProtoMessage() {}

func (x *Answer) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Answer.ProtoReflect.Descriptor instead.
func (*Answer) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{32}
}

func (x *Answer) GetAnswerId() string {
	if x != nil {
		return x.AnswerId
	}
	return ""
}

func (x *Answer) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *Answer) GetReceived() uint64 {
	if x != nil {
		return x.Received
	}
	return 0
}

func (x *Answer) GetCreated() uint64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Answer) GetMeta() *AnswerMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Answer) GetArtifacts() []*Artifact {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

// An AnswerBatch is a set of Answers. It can represent one or several completed
// requests, which may be sent to the client in a single response.
type AnswerBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchId string    `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	Answers []*Answer `protobuf:"bytes,2,rep,name=answers,proto3" json:"answers,omitempty"`
}

func (x *AnswerBatch) Reset() {
	*x = AnswerBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnswerBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerBatch) ProtoMessage() {}

func (x *AnswerBatch) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerBatch.ProtoReflect.Descriptor instead.
func (*AnswerBatch) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{33}
}

func (x *AnswerBatch) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *AnswerBatch) GetAnswers() []*Answer {
	if x != nil {
		return x.Answers
	}
	return nil
}

// A Request is a set of Artifacts, which can be of any type with model or
// transform parameters. It is sent to the server, which will respond with an
// Answer.
type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EngineId      string       `protobuf:"bytes,1,opt,name=engine_id,json=engineId,proto3" json:"engine_id,omitempty"`
	RequestId     string       `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	RequestedType ArtifactType `protobuf:"varint,3,opt,name=requested_type,json=requestedType,proto3,enum=gooseai.ArtifactType" json:"requested_type,omitempty"`
	Prompt        []*Prompt    `protobuf:"bytes,4,rep,name=prompt,proto3" json:"prompt,omitempty"`
	// Types that are assignable to Params:
	//	*Request_Image
	//	*Request_Classifier
	//	*Request_Asset
	//	*Request_Interpolate
	//	*Request_Transform
	Params      isRequest_Params       `protobuf_oneof:"params"`
	Conditioner *ConditionerParameters `protobuf:"bytes,6,opt,name=conditioner,proto3,oneof" json:"conditioner,omitempty"`
	Extras      *structpb.Struct       `protobuf:"bytes,2047,opt,name=extras,proto3,oneof" json:"extras,omitempty"` // for development use
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{34}
}

func (x *Request) GetEngineId() string {
	if x != nil {
		return x.EngineId
	}
	return ""
}

func (x *Request) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *Request) GetRequestedType() ArtifactType {
	if x != nil {
		return x.RequestedType
	}
	return ArtifactType_ARTIFACT_NONE
}

func (x *Request) GetPrompt() []*Prompt {
	if x != nil {
		return x.Prompt
	}
	return nil
}

func (m *Request) GetParams() isRequest_Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (x *Request) GetImage() *ImageParameters {
	if x, ok := x.GetParams().(*Request_Image); ok {
		return x.Image
	}
	return nil
}

func (x *Request) GetClassifier() *ClassifierParameters {
	if x, ok := x.GetParams().(*Request_Classifier); ok {
		return x.Classifier
	}
	return nil
}

func (x *Request) GetAsset() *AssetParameters {
	if x, ok := x.GetParams().(*Request_Asset); ok {
		return x.Asset
	}
	return nil
}

func (x *Request) GetInterpolate() *InterpolateParameters {
	if x, ok := x.GetParams().(*Request_Interpolate); ok {
		return x.Interpolate
	}
	return nil
}

func (x *Request) GetTransform() *TransformParameters {
	if x, ok := x.GetParams().(*Request_Transform); ok {
		return x.Transform
	}
	return nil
}

func (x *Request) GetConditioner() *ConditionerParameters {
	if x != nil {
		return x.Conditioner
	}
	return nil
}

func (x *Request) GetExtras() *structpb.Struct {
	if x != nil {
		return x.Extras
	}
	return nil
}

type isRequest_Params interface {
	isRequest_Params()
}

type Request_Image struct {
	Image *ImageParameters `protobuf:"bytes,5,opt,name=image,proto3,oneof"`
}

type Request_Classifier struct {
	Classifier *ClassifierParameters `protobuf:"bytes,7,opt,name=classifier,proto3,oneof"`
}

type Request_Asset struct {
	Asset *AssetParameters `protobuf:"bytes,8,opt,name=asset,proto3,oneof"`
}

type Request_Interpolate struct {
	Interpolate *InterpolateParameters `protobuf:"bytes,11,opt,name=interpolate,proto3,oneof"`
}

type Request_Transform struct {
	Transform *TransformParameters `protobuf:"bytes,12,opt,name=transform,proto3,oneof"`
}

func (*Request_Image) isRequest_Params() {}

func (*Request_Classifier) isRequest_Params() {}

func (*Request_Asset) isRequest_Params() {}

func (*Request_Interpolate) isRequest_Params() {}

func (*Request_Transform) isRequest_Params() {}

type OnStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason []FinishReason `protobuf:"varint,1,rep,packed,name=reason,proto3,enum=gooseai.FinishReason" json:"reason,omitempty"`
	Target *string        `protobuf:"bytes,2,opt,name=target,proto3,oneof" json:"target,omitempty"`
	Action []StageAction  `protobuf:"varint,3,rep,packed,name=action,proto3,enum=gooseai.StageAction" json:"action,omitempty"`
}

func (x *OnStatus) Reset() {
	*x = OnStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnStatus) ProtoMessage() {}

func (x *OnStatus) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnStatus.ProtoReflect.Descriptor instead.
func (*OnStatus) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{35}
}

func (x *OnStatus) GetReason() []FinishReason {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *OnStatus) GetTarget() string {
	if x != nil && x.Target != nil {
		return *x.Target
	}
	return ""
}

func (x *OnStatus) GetAction() []StageAction {
	if x != nil {
		return x.Action
	}
	return nil
}

type Stage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Request  *Request    `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	OnStatus []*OnStatus `protobuf:"bytes,3,rep,name=on_status,json=onStatus,proto3" json:"on_status,omitempty"`
}

func (x *Stage) Reset() {
	*x = Stage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stage) ProtoMessage() {}

func (x *Stage) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stage.ProtoReflect.Descriptor instead.
func (*Stage) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{36}
}

func (x *Stage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Stage) GetRequest() *Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *Stage) GetOnStatus() []*OnStatus {
	if x != nil {
		return x.OnStatus
	}
	return nil
}

type ChainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string   `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Stage     []*Stage `protobuf:"bytes,2,rep,name=stage,proto3" json:"stage,omitempty"`
}

func (x *ChainRequest) Reset() {
	*x = ChainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generation_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainRequest) ProtoMessage() {}

func (x *ChainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_generation_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainRequest.ProtoReflect.Descriptor instead.
func (*ChainRequest) Descriptor() ([]byte, []int) {
	return file_generation_proto_rawDescGZIP(), []int{37}
}

func (x *ChainRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ChainRequest) GetStage() []*Stage {
	if x != nil {
		return x.Stage
	}
	return nil
}

var File_generation_proto protoreflect.FileDescriptor

var file_generation_proto_rawDesc = []byte{
	0x0a, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x07, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x39, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x22, 0x69, 0x0a, 0x06, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x26, 0x0a,
	0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0xdb,
	0x03, 0x0a, 0x08, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x73,
	0x65, 0x61, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x6d, 0x61,
	0x67, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x6d, 0x61, 0x67,
	0x69, 0x63, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12,
	0x14, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x29, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x3a, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x73,
	0x65, 0x61, 0x69, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x65,
	0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x22, 0x5c, 0x0a, 0x10,
	0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x17, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xd3, 0x01, 0x0a, 0x06, 0x50,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x73,
	0x65, 0x61, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x48, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x6f,
	0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x06,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65,
	0x61, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x48, 0x00, 0x52, 0x08, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70,
	0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x22, 0xb9, 0x03, 0x0a, 0x11, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x15, 0x0a, 0x03, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x03, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x65, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x02, 0x52, 0x0e, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x64, 0x6f, 0x77, 0x6e, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x12, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x63, 0x66, 0x67, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x04, 0x52, 0x08, 0x63, 0x66, 0x67, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x5f, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x69,
	0x74, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x10, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x5f, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x06, 0x52, 0x0e, 0x73, 0x74, 0x65, 0x70,
	0x4e, 0x6f, 0x69, 0x73, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x65, 0x74, 0x61, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x66, 0x67, 0x5f, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x6f, 0x69, 0x73,
	0x65, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x74, 0x65, 0x70,
	0x5f, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x22, 0xab, 0x01, 0x0a,
	0x15, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x13, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x48, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x22, 0x7d, 0x0a, 0x12, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x6e, 0x64, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8d, 0x02, 0x0a, 0x0d, 0x53, 0x74,
	0x65, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x65, 0x70, 0x12, 0x39, 0x0a, 0x07,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x73,
	0x65, 0x61, 0x69, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x01, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61,
	0x69, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x48, 0x02, 0x52, 0x08, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x05, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x73,
	0x65, 0x61, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69,
	0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x22, 0xe3, 0x01, 0x0a, 0x10, 0x43, 0x75, 0x74, 0x6f, 0x75,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x63,
	0x75, 0x74, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x43, 0x75, 0x74, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x63, 0x75, 0x74, 0x6f, 0x75, 0x74, 0x73,
	0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x67,
	0x72, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x04, 0x67, 0x72, 0x61,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x62, 0x6c, 0x75, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x02, 0x52, 0x04, 0x62, 0x6c, 0x75, 0x72, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x03, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x67, 0x72, 0x61, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x6c, 0x75, 0x72, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x4e, 0x0a, 0x1a,
	0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xcc, 0x02, 0x0a,
	0x1a, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x6f,
	0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x06, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x11, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00,
	0x52, 0x10, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61,
	0x69, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x75, 0x74, 0x6f, 0x75, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61,
	0x69, 0x2e, 0x43, 0x75, 0x74, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x48, 0x01, 0x52, 0x07, 0x63, 0x75, 0x74, 0x6f, 0x75, 0x74, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x2c, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x70,
	0x74, 0x48, 0x02, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x88, 0x01, 0x01, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x75, 0x74, 0x6f, 0x75, 0x74, 0x73,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x12,
	0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x40, 0x0a, 0x0f, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x52, 0x0e, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x12, 0x41, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61,
	0x69, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x09, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x64, 0x69, 0x66,
	0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x64, 0x69, 0x66, 0x66, 0x75,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x75, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69,
	0x2e, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x75, 0x70, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa1, 0x04,
	0x0a, 0x0f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x1b, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x00, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x12, 0x1d, 0x0a,
	0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02,
	0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x05, 0x73,
	0x74, 0x65, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x73, 0x65, 0x61, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x04, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x88,
	0x01, 0x01, 0x12, 0x36, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69,
	0x2e, 0x53, 0x74, 0x65, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x6d, 0x61,
	0x73, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x4d,
	0x61, 0x73, 0x6b, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x69, 0x74, 0x48, 0x05, 0x52,
	0x0e, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x69, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0d, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x73,
	0x65, 0x61, 0x69, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x48, 0x06, 0x52, 0x0c, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x6e,
	0x69, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a,
	0x65, 0x22, 0x5e, 0x0a, 0x11, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x12, 0x21, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x22, 0xa8, 0x02, 0x0a, 0x12, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0a, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67, 0x6f, 0x6f, 0x73,
	0x65, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x02, 0x52, 0x0e, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xdd, 0x01, 0x0a,
	0x14, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x73,
	0x65, 0x61, 0x69, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x07, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x72, 0x65, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6b, 0x0a, 0x15,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x73, 0x12, 0x31, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x6f,
	0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x6f, 0x6c, 0x61, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xfd, 0x03, 0x0a, 0x14, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x0a, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x68, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x03, 0x68, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x73, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x0a, 0x73, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x09, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67,
	0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x48,
	0x05, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x3b, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x06, 0x52,
	0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x07, 0x52, 0x0b, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x5f, 0x73,
	0x65, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x69,
	0x73, 0x65, 0x53, 0x65, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x73, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x68, 0x75, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x73, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6e, 0x6f,
	0x69, 0x73, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e,
	0x6f, 0x69, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x12, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x70, 0x74, 0x68, 0x43, 0x61, 0x6c, 0x63,
	0x12, 0x26, 0x0a, 0x0c, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x6c, 0x75, 0x72,
	0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52,
	0x0a, 0x62, 0x6c, 0x75, 0x72, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x02, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x62, 0x6c, 0x75, 0x72, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x22, 0x29, 0x0a, 0x0f, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x16, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x42, 0x02, 0x10, 0x01, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc3, 0x02, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x62,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x42, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x36, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x44, 0x0a, 0x0e, 0x70, 0x72, 0x65,
	0x76, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x48, 0x00, 0x52, 0x0d, 0x70,
	0x72, 0x65, 0x76, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x77, 0x61, 0x72, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x09, 0x64, 0x65, 0x70, 0x74, 0x68, 0x57, 0x61, 0x72, 0x70,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x72,
	0x65, 0x76, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x77, 0x61, 0x72, 0x70, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x5e, 0x0a, 0x1a, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x70, 0x69, 0x78, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x22, 0x3a, 0x0a, 0x14, 0x4d,
	0x65, 0x73, 0x68, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x73, 0x68, 0x5f,
	0x65, 0x64, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4d,
	0x65, 0x73, 0x68, 0x45, 0x64, 0x67, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5a, 0x0a, 0x15,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f,
	0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x48, 0x00, 0x52, 0x14, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x48, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x68,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x4d, 0x65, 0x73, 0x68,
	0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x48, 0x00, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x10, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x0b,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6e, 0x65, 0x61, 0x72, 0x50, 0x6c, 0x61, 0x6e,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x66, 0x61, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x12, 0x15,
	0x0a, 0x03, 0x66, 0x6f, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x03, 0x66,
	0x6f, 0x76, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x66, 0x6f, 0x76, 0x22, 0xeb, 0x02,
	0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x50, 0x6f, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x74,
	0x6f, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x52, 0x11, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x54, 0x6f, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78,
	0x12, 0x46, 0x0a, 0x11, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x10, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x51, 0x0a, 0x17, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x73,
	0x65, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x15, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4f, 0x0a, 0x16, 0x6d,
	0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x14, 0x6d, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x64, 0x6f, 0x50, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x22, 0x9f, 0x02, 0x0a, 0x13,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x73,
	0x65, 0x61, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x74, 0x68,
	0x5f, 0x63, 0x61, 0x6c, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x44,
	0x65, 0x70, 0x74, 0x68, 0x43, 0x61, 0x6c, 0x63, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x70, 0x74,
	0x68, 0x43, 0x61, 0x6c, 0x63, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61,
	0x69, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12,
	0x3f, 0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x50, 0x6f,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x50, 0x6f, 0x73, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x83, 0x01,
	0x0a, 0x0f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x2c, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x03, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x67, 0x6f,
	0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x52, 0x03,
	0x75, 0x73, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x0a, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x1a, 0x0a, 0x06, 0x67, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x67, 0x70, 0x75, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1a,
	0x0a, 0x06, 0x63, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x05, 0x63, 0x70, 0x75, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x67,
	0x70, 0x75, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x69, 0x64,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x22, 0xe2, 0x01, 0x0a, 0x06, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65,
	0x61, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x09, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x22,
	0x53, 0x0a, 0x0b, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x6f, 0x6f,
	0x73, 0x65, 0x61, 0x69, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x07, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x73, 0x22, 0x82, 0x05, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x70, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x6f, 0x6f,
	0x73, 0x65, 0x61, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x06, 0x70, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x73,
	0x65, 0x61, 0x69, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48,
	0x00, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x42, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x6f, 0x6c,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52,
	0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x09,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48,
	0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x35, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x72, 0x61, 0x73, 0x18, 0xff, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x02, 0x52, 0x06, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x73, 0x4a, 0x04, 0x08,
	0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x22, 0x8f, 0x01, 0x0a, 0x08, 0x4f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69,
	0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2c, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x73, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x09, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x4f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x53, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x2a, 0x45, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53,
	0x54, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x10, 0x04, 0x2a, 0xf8, 0x01, 0x0a,
	0x0c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a,
	0x0d, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x4d, 0x41,
	0x47, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54,
	0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x52, 0x54, 0x49,
	0x46, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x41,
	0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x53, 0x10, 0x04,
	0x12, 0x16, 0x0a, 0x12, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x45, 0x4d, 0x42,
	0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x52, 0x54, 0x49,
	0x46, 0x41, 0x43, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41,
	0x43, 0x54, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x52, 0x54,
	0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x08, 0x12, 0x13,
	0x0a, 0x0f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x45, 0x4e, 0x53, 0x4f,
	0x52, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f,
	0x44, 0x45, 0x50, 0x54, 0x48, 0x10, 0x0a, 0x2a, 0x67, 0x0a, 0x0e, 0x4d, 0x61, 0x73, 0x6b, 0x65,
	0x64, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x41, 0x53,
	0x4b, 0x45, 0x44, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x5a, 0x45,
	0x52, 0x4f, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x53, 0x4b, 0x45, 0x44, 0x5f, 0x41,
	0x52, 0x45, 0x41, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10,
	0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x41, 0x53, 0x4b, 0x45, 0x44, 0x5f, 0x41, 0x52, 0x45, 0x41,
	0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x02,
	0x2a, 0x35, 0x0a, 0x0c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x10, 0x0a, 0x0c, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x45, 0x52,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x45,
	0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x2a, 0x98, 0x02, 0x0a, 0x10, 0x44, 0x69, 0x66, 0x66,
	0x75, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x52, 0x5f, 0x44, 0x44, 0x49, 0x4d, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x52, 0x5f, 0x44, 0x44, 0x50, 0x4d, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x52, 0x5f, 0x4b, 0x5f, 0x45, 0x55,
	0x4c, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x52,
	0x5f, 0x4b, 0x5f, 0x45, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x54, 0x52,
	0x41, 0x4c, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x52, 0x5f,
	0x4b, 0x5f, 0x48, 0x45, 0x55, 0x4e, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x41, 0x4d, 0x50,
	0x4c, 0x45, 0x52, 0x5f, 0x4b, 0x5f, 0x44, 0x50, 0x4d, 0x5f, 0x32, 0x10, 0x05, 0x12, 0x1d, 0x0a,
	0x19, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x52, 0x5f, 0x4b, 0x5f, 0x44, 0x50, 0x4d, 0x5f, 0x32,
	0x5f, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x54, 0x52, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x52, 0x5f, 0x4b, 0x5f, 0x4c, 0x4d, 0x53, 0x10, 0x07, 0x12,
	0x20, 0x0a, 0x1c, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x52, 0x5f, 0x4b, 0x5f, 0x44, 0x50, 0x4d,
	0x50, 0x50, 0x5f, 0x32, 0x53, 0x5f, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x54, 0x52, 0x41, 0x4c, 0x10,
	0x08, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x52, 0x5f, 0x4b, 0x5f, 0x44,
	0x50, 0x4d, 0x50, 0x50, 0x5f, 0x32, 0x4d, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x41, 0x4d,
	0x50, 0x4c, 0x45, 0x52, 0x5f, 0x4b, 0x5f, 0x44, 0x50, 0x4d, 0x50, 0x50, 0x5f, 0x53, 0x44, 0x45,
	0x10, 0x0a, 0x2a, 0x46, 0x0a, 0x08, 0x55, 0x70, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x0c, 0x55, 0x50, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x52, 0x5f, 0x52, 0x47, 0x42, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x55, 0x50, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x52, 0x5f, 0x47, 0x46, 0x50,
	0x47, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x50, 0x53, 0x43, 0x41, 0x4c, 0x45,
	0x52, 0x5f, 0x45, 0x53, 0x52, 0x47, 0x41, 0x4e, 0x10, 0x02, 0x2a, 0xd8, 0x01, 0x0a, 0x0e, 0x47,
	0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a,
	0x14, 0x47, 0x55, 0x49, 0x44, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x55, 0x49, 0x44, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c,
	0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x55, 0x49, 0x44, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x42, 0x4c, 0x55, 0x45,
	0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x55, 0x49, 0x44, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50,
	0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e,
	0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x55, 0x49, 0x44, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50,
	0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x4c, 0x4f, 0x57, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16,
	0x47, 0x55, 0x49, 0x44, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f,
	0x53, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x55, 0x49, 0x44,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x4c, 0x4f, 0x57,
	0x45, 0x53, 0x54, 0x10, 0x06, 0x2a, 0x91, 0x01, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4d,
	0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x54, 0x45, 0x43, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x4f, 0x44, 0x45,
	0x4c, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x54, 0x45, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x43,
	0x4c, 0x49, 0x50, 0x5f, 0x56, 0x49, 0x54, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x4f, 0x44,
	0x45, 0x4c, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x54, 0x45, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x43, 0x4c, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x4e, 0x45, 0x54, 0x10, 0x02, 0x12, 0x1a, 0x0a,
	0x16, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x54, 0x45, 0x43, 0x54,
	0x55, 0x52, 0x45, 0x5f, 0x4c, 0x44, 0x4d, 0x10, 0x03, 0x2a, 0xa2, 0x01, 0x0a, 0x06, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x41, 0x53, 0x53, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x47, 0x48, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54,
	0x45, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41,
	0x54, 0x45, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f,
	0x42, 0x46, 0x55, 0x53, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f,
	0x42, 0x46, 0x55, 0x53, 0x43, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x10, 0x05, 0x2a, 0x44,
	0x0a, 0x0e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x4c, 0x53, 0x46, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x5a,
	0x45, 0x52, 0x4f, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4c, 0x53,
	0x46, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x10, 0x01, 0x2a, 0x8c, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x6f,
	0x6c, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x50, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x5f,
	0x52, 0x49, 0x46, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x50,
	0x4f, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x56, 0x41, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52,
	0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x4f, 0x4c, 0x41, 0x54,
	0x45, 0x5f, 0x56, 0x41, 0x45, 0x5f, 0x53, 0x4c, 0x45, 0x52, 0x50, 0x10, 0x03, 0x12, 0x14, 0x0a,
	0x10, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4c,
	0x4d, 0x10, 0x04, 0x2a, 0x6c, 0x0a, 0x0a, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x46, 0x4c,
	0x45, 0x43, 0x54, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x42,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x57, 0x52, 0x41, 0x50, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x42, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x03, 0x12, 0x12, 0x0a,
	0x0e, 0x42, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x4c, 0x4c, 0x10,
	0x04, 0x2a, 0x4f, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x5f, 0x48, 0x53, 0x56, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4c, 0x4f,
	0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4c, 0x41, 0x42, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x47, 0x42,
	0x10, 0x02, 0x2a, 0x3d, 0x0a, 0x0a, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x12, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x50,
	0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x41, 0x4d, 0x45,
	0x52, 0x41, 0x5f, 0x4f, 0x52, 0x54, 0x48, 0x4f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x49, 0x43, 0x10,
	0x01, 0x2a, 0x3d, 0x0a, 0x0b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x55, 0x54, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02,
	0x2a, 0x81, 0x01, 0x0a, 0x08, 0x41, 0x73, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x12, 0x17, 0x0a,
	0x13, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f,
	0x55, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x41,
	0x53, 0x53, 0x45, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10,
	0x02, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x15, 0x0a,
	0x11, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45,
	0x43, 0x54, 0x10, 0x04, 0x2a, 0x57, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54,
	0x41, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41,
	0x52, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x10, 0x02, 0x32, 0x83, 0x01,
	0x0a, 0x11, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x10, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0f, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3b, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61,
	0x69, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f,
	0x2e, 0x67, 0x6f, 0x6f, 0x73, 0x65, 0x61, 0x69, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22,
	0x00, 0x30, 0x01, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x73, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2d, 0x61, 0x69, 0x2f, 0x61,
	0x70, 0x69, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x67, 0x6f,
	0x6f, 0x73, 0x65, 0x61, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_generation_proto_rawDescOnce sync.Once
	file_generation_proto_rawDescData = file_generation_proto_rawDesc
)

func file_generation_proto_rawDescGZIP() []byte {
	file_generation_proto_rawDescOnce.Do(func() {
		file_generation_proto_rawDescData = protoimpl.X.CompressGZIP(file_generation_proto_rawDescData)
	})
	return file_generation_proto_rawDescData
}

var file_generation_proto_enumTypes = make([]protoimpl.EnumInfo, 17)
var file_generation_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_generation_proto_goTypes = []interface{}{
	(FinishReason)(0),                  // 0: gooseai.FinishReason
	(ArtifactType)(0),                  // 1: gooseai.ArtifactType
	(MaskedAreaInit)(0),                // 2: gooseai.MaskedAreaInit
	(WeightMethod)(0),                  // 3: gooseai.WeightMethod
	(DiffusionSampler)(0),              // 4: gooseai.DiffusionSampler
	(Upscaler)(0),                      // 5: gooseai.Upscaler
	(GuidancePreset)(0),                // 6: gooseai.GuidancePreset
	(ModelArchitecture)(0),             // 7: gooseai.ModelArchitecture
	(Action)(0),                        // 8: gooseai.Action
	(ClassifierMode)(0),                // 9: gooseai.ClassifierMode
	(InterpolateMode)(0),               // 10: gooseai.InterpolateMode
	(BorderMode)(0),                    // 11: gooseai.BorderMode
	(ColorMatchMode)(0),                // 12: gooseai.ColorMatchMode
	(CameraType)(0),                    // 13: gooseai.CameraType
	(AssetAction)(0),                   // 14: gooseai.AssetAction
	(AssetUse)(0),                      // 15: gooseai.AssetUse
	(StageAction)(0),                   // 16: gooseai.StageAction
	(*Token)(nil),                      // 17: gooseai.Token
	(*Tokens)(nil),                     // 18: gooseai.Tokens
	(*Artifact)(nil),                   // 19: gooseai.Artifact
	(*PromptParameters)(nil),           // 20: gooseai.PromptParameters
	(*Prompt)(nil),                     // 21: gooseai.Prompt
	(*SamplerParameters)(nil),          // 22: gooseai.SamplerParameters
	(*ConditionerParameters)(nil),      // 23: gooseai.ConditionerParameters
	(*ScheduleParameters)(nil),         // 24: gooseai.ScheduleParameters
	(*StepParameter)(nil),              // 25: gooseai.StepParameter
	(*Model)(nil),                      // 26: gooseai.Model
	(*CutoutParameters)(nil),           // 27: gooseai.CutoutParameters
	(*GuidanceScheduleParameters)(nil), // 28: gooseai.GuidanceScheduleParameters
	(*GuidanceInstanceParameters)(nil), // 29: gooseai.GuidanceInstanceParameters
	(*GuidanceParameters)(nil),         // 30: gooseai.GuidanceParameters
	(*TransformType)(nil),              // 31: gooseai.TransformType
	(*ImageParameters)(nil),            // 32: gooseai.ImageParameters
	(*ClassifierConcept)(nil),          // 33: gooseai.ClassifierConcept
	(*ClassifierCategory)(nil),         // 34: gooseai.ClassifierCategory
	(*ClassifierParameters)(nil),       // 35: gooseai.ClassifierParameters
	(*InterpolateParameters)(nil),      // 36: gooseai.InterpolateParameters
	(*TransformColorAdjust)(nil),       // 37: gooseai.TransformColorAdjust
	(*TransformDepthCalc)(nil),         // 38: gooseai.TransformDepthCalc
	(*TransformMatrix)(nil),            // 39: gooseai.TransformMatrix
	(*TransformResample)(nil),          // 40: gooseai.TransformResample
	(*PointCloudRenderParameters)(nil), // 41: gooseai.PointCloudRenderParameters
	(*MeshRenderParameters)(nil),       // 42: gooseai.MeshRenderParameters
	(*RenderParameters)(nil),           // 43: gooseai.RenderParameters
	(*CameraParameters)(nil),           // 44: gooseai.CameraParameters
	(*TransformCameraPose)(nil),        // 45: gooseai.TransformCameraPose
	(*TransformParameters)(nil),        // 46: gooseai.TransformParameters
	(*AssetParameters)(nil),            // 47: gooseai.AssetParameters
	(*AnswerMeta)(nil),                 // 48: gooseai.AnswerMeta
	(*Answer)(nil),                     // 49: gooseai.Answer
	(*AnswerBatch)(nil),                // 50: gooseai.AnswerBatch
	(*Request)(nil),                    // 51: gooseai.Request
	(*OnStatus)(nil),                   // 52: gooseai.OnStatus
	(*Stage)(nil),                      // 53: gooseai.Stage
	(*ChainRequest)(nil),               // 54: gooseai.ChainRequest
	(*tensors.Tensor)(nil),             // 55: tensors.Tensor
	(*structpb.Struct)(nil),            // 56: google.protobuf.Struct
}
var file_generation_proto_depIdxs = []int32{
	17, // 0: gooseai.Tokens.tokens:type_name -> gooseai.Token
	1,  // 1: gooseai.Artifact.type:type_name -> gooseai.ArtifactType
	18, // 2: gooseai.Artifact.tokens:type_name -> gooseai.Tokens
	35, // 3: gooseai.Artifact.classifier:type_name -> gooseai.ClassifierParameters
	55, // 4: gooseai.Artifact.tensor:type_name -> tensors.Tensor
	0,  // 5: gooseai.Artifact.finish_reason:type_name -> gooseai.FinishReason
	20, // 6: gooseai.Prompt.parameters:type_name -> gooseai.PromptParameters
	18, // 7: gooseai.Prompt.tokens:type_name -> gooseai.Tokens
	19, // 8: gooseai.Prompt.artifact:type_name -> gooseai.Artifact
	26, // 9: gooseai.ConditionerParameters.conditioner:type_name -> gooseai.Model
	22, // 10: gooseai.StepParameter.sampler:type_name -> gooseai.SamplerParameters
	24, // 11: gooseai.StepParameter.schedule:type_name -> gooseai.ScheduleParameters
	30, // 12: gooseai.StepParameter.guidance:type_name -> gooseai.GuidanceParameters
	7,  // 13: gooseai.Model.architecture:type_name -> gooseai.ModelArchitecture
	27, // 14: gooseai.CutoutParameters.cutouts:type_name -> gooseai.CutoutParameters
	26, // 15: gooseai.GuidanceInstanceParameters.models:type_name -> gooseai.Model
	28, // 16: gooseai.GuidanceInstanceParameters.schedule:type_name -> gooseai.GuidanceScheduleParameters
	27, // 17: gooseai.GuidanceInstanceParameters.cutouts:type_name -> gooseai.CutoutParameters
	21, // 18: gooseai.GuidanceInstanceParameters.prompt:type_name -> gooseai.Prompt
	6,  // 19: gooseai.GuidanceParameters.guidance_preset:type_name -> gooseai.GuidancePreset
	29, // 20: gooseai.GuidanceParameters.instances:type_name -> gooseai.GuidanceInstanceParameters
	4,  // 21: gooseai.TransformType.diffusion:type_name -> gooseai.DiffusionSampler
	5,  // 22: gooseai.TransformType.upscaler:type_name -> gooseai.Upscaler
	31, // 23: gooseai.ImageParameters.transform:type_name -> gooseai.TransformType
	25, // 24: gooseai.ImageParameters.parameters:type_name -> gooseai.StepParameter
	2,  // 25: gooseai.ImageParameters.masked_area_init:type_name -> gooseai.MaskedAreaInit
	3,  // 26: gooseai.ImageParameters.weight_method:type_name -> gooseai.WeightMethod
	33, // 27: gooseai.ClassifierCategory.concepts:type_name -> gooseai.ClassifierConcept
	8,  // 28: gooseai.ClassifierCategory.action:type_name -> gooseai.Action
	9,  // 29: gooseai.ClassifierCategory.classifier_mode:type_name -> gooseai.ClassifierMode
	34, // 30: gooseai.ClassifierParameters.categories:type_name -> gooseai.ClassifierCategory
	34, // 31: gooseai.ClassifierParameters.exceeds:type_name -> gooseai.ClassifierCategory
	8,  // 32: gooseai.ClassifierParameters.realized_action:type_name -> gooseai.Action
	10, // 33: gooseai.InterpolateParameters.mode:type_name -> gooseai.InterpolateMode
	19, // 34: gooseai.TransformColorAdjust.match_image:type_name -> gooseai.Artifact
	12, // 35: gooseai.TransformColorAdjust.match_mode:type_name -> gooseai.ColorMatchMode
	11, // 36: gooseai.TransformResample.border_mode:type_name -> gooseai.BorderMode
	39, // 37: gooseai.TransformResample.transform:type_name -> gooseai.TransformMatrix
	39, // 38: gooseai.TransformResample.prev_transform:type_name -> gooseai.TransformMatrix
	41, // 39: gooseai.RenderParameters.pointcloud_parameters:type_name -> gooseai.PointCloudRenderParameters
	42, // 40: gooseai.RenderParameters.mesh_parameters:type_name -> gooseai.MeshRenderParameters
	13, // 41: gooseai.CameraParameters.camera_type:type_name -> gooseai.CameraType
	39, // 42: gooseai.TransformCameraPose.world_to_view_matrix:type_name -> gooseai.TransformMatrix
	44, // 43: gooseai.TransformCameraPose.camera_parameters:type_name -> gooseai.CameraParameters
	43, // 44: gooseai.TransformCameraPose.image_render_parameters:type_name -> gooseai.RenderParameters
	43, // 45: gooseai.TransformCameraPose.mask_render_parameters:type_name -> gooseai.RenderParameters
	37, // 46: gooseai.TransformParameters.color_adjust:type_name -> gooseai.TransformColorAdjust
	38, // 47: gooseai.TransformParameters.depth_calc:type_name -> gooseai.TransformDepthCalc
	40, // 48: gooseai.TransformParameters.resample:type_name -> gooseai.TransformResample
	45, // 49: gooseai.TransformParameters.camera_pose:type_name -> gooseai.TransformCameraPose
	14, // 50: gooseai.AssetParameters.action:type_name -> gooseai.AssetAction
	15, // 51: gooseai.AssetParameters.use:type_name -> gooseai.AssetUse
	48, // 52: gooseai.Answer.meta:type_name -> gooseai.AnswerMeta
	19, // 53: gooseai.Answer.artifacts:type_name -> gooseai.Artifact
	49, // 54: gooseai.AnswerBatch.answers:type_name -> gooseai.Answer
	1,  // 55: gooseai.Request.requested_type:type_name -> gooseai.ArtifactType
	21, // 56: gooseai.Request.prompt:type_name -> gooseai.Prompt
	32, // 57: gooseai.Request.image:type_name -> gooseai.ImageParameters
	35, // 58: gooseai.Request.classifier:type_name -> gooseai.ClassifierParameters
	47, // 59: gooseai.Request.asset:type_name -> gooseai.AssetParameters
	36, // 60: gooseai.Request.interpolate:type_name -> gooseai.InterpolateParameters
	46, // 61: gooseai.Request.transform:type_name -> gooseai.TransformParameters
	23, // 62: gooseai.Request.conditioner:type_name -> gooseai.ConditionerParameters
	56, // 63: gooseai.Request.extras:type_name -> google.protobuf.Struct
	0,  // 64: gooseai.OnStatus.reason:type_name -> gooseai.FinishReason
	16, // 65: gooseai.OnStatus.action:type_name -> gooseai.StageAction
	51, // 66: gooseai.Stage.request:type_name -> gooseai.Request
	52, // 67: gooseai.Stage.on_status:type_name -> gooseai.OnStatus
	53, // 68: gooseai.ChainRequest.stage:type_name -> gooseai.Stage
	51, // 69: gooseai.GenerationService.Generate:input_type -> gooseai.Request
	54, // 70: gooseai.GenerationService.ChainGenerate:input_type -> gooseai.ChainRequest
	49, // 71: gooseai.GenerationService.Generate:output_type -> gooseai.Answer
	49, // 72: gooseai.GenerationService.ChainGenerate:output_type -> gooseai.Answer
	71, // [71:73] is the sub-list for method output_type
	69, // [69:71] is the sub-list for method input_type
	69, // [69:69] is the sub-list for extension type_name
	69, // [69:69] is the sub-list for extension extendee
	0,  // [0:69] is the sub-list for field type_name
}

func init() { file_generation_proto_init() }
func file_generation_proto_init() {
	if File_generation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_generation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tokens); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Artifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromptParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prompt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SamplerParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionerParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StepParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Model); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CutoutParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuidanceScheduleParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuidanceInstanceParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuidanceParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransformType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassifierConcept); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassifierCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassifierParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterpolateParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransformColorAdjust); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransformDepthCalc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransformMatrix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransformResample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointCloudRenderParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshRenderParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CameraParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransformCameraPose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransformParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnswerMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Answer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnswerBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generation_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_generation_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_generation_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_generation_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Artifact_Binary)(nil),
		(*Artifact_Text)(nil),
		(*Artifact_Tokens)(nil),
		(*Artifact_Classifier)(nil),
		(*Artifact_Tensor)(nil),
	}
	file_generation_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_generation_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Prompt_Text)(nil),
		(*Prompt_Tokens)(nil),
		(*Prompt_Artifact)(nil),
	}
	file_generation_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_generation_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_generation_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_generation_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_generation_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_generation_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_generation_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*TransformType_Diffusion)(nil),
		(*TransformType_Upscaler)(nil),
	}
	file_generation_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_generation_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_generation_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_generation_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_generation_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_generation_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_generation_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_generation_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_generation_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*RenderParameters_PointcloudParameters)(nil),
		(*RenderParameters_MeshParameters)(nil),
	}
	file_generation_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_generation_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*TransformParameters_ColorAdjust)(nil),
		(*TransformParameters_DepthCalc)(nil),
		(*TransformParameters_Resample)(nil),
		(*TransformParameters_CameraPose)(nil),
	}
	file_generation_proto_msgTypes[31].OneofWrappers = []interface{}{}
	file_generation_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_generation_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*Request_Image)(nil),
		(*Request_Classifier)(nil),
		(*Request_Asset)(nil),
		(*Request_Interpolate)(nil),
		(*Request_Transform)(nil),
	}
	file_generation_proto_msgTypes[35].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_generation_proto_rawDesc,
			NumEnums:      17,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_generation_proto_goTypes,
		DependencyIndexes: file_generation_proto_depIdxs,
		EnumInfos:         file_generation_proto_enumTypes,
		MessageInfos:      file_generation_proto_msgTypes,
	}.Build()
	File_generation_proto = out.File
	file_generation_proto_rawDesc = nil
	file_generation_proto_goTypes = nil
	file_generation_proto_depIdxs = nil
}
