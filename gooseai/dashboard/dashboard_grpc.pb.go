// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dashboard

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DashboardServiceClient is the client API for DashboardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DashboardServiceClient interface {
	// Get info
	GetMe(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*User, error)
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*Organization, error)
	GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*Metrics, error)
	// API key management
	CreateAPIKey(ctx context.Context, in *APIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	DeleteAPIKey(ctx context.Context, in *APIKeyFindRequest, opts ...grpc.CallOption) (*APIKey, error)
	// User settings
	UpdateDefaultOrganization(ctx context.Context, in *UpdateDefaultOrganizationRequest, opts ...grpc.CallOption) (*User, error)
	GetClientSettings(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ClientSettings, error)
	SetClientSettings(ctx context.Context, in *ClientSettings, opts ...grpc.CallOption) (*ClientSettings, error)
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, opts ...grpc.CallOption) (*User, error)
	CreatePasswordChangeTicket(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*UserPasswordChangeTicket, error)
	DeleteAccount(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*User, error)
	// Payment functions
	CreateCharge(ctx context.Context, in *CreateChargeRequest, opts ...grpc.CallOption) (*Charge, error)
	GetCharges(ctx context.Context, in *GetChargesRequest, opts ...grpc.CallOption) (*Charges, error)
	CreateAutoChargeIntent(ctx context.Context, in *CreateAutoChargeIntentRequest, opts ...grpc.CallOption) (*AutoChargeIntent, error)
	UpdateAutoChargeIntent(ctx context.Context, in *CreateAutoChargeIntentRequest, opts ...grpc.CallOption) (*AutoChargeIntent, error)
	GetAutoChargeIntent(ctx context.Context, in *GetAutoChargeRequest, opts ...grpc.CallOption) (*AutoChargeIntent, error)
}

type dashboardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDashboardServiceClient(cc grpc.ClientConnInterface) DashboardServiceClient {
	return &dashboardServiceClient{cc}
}

func (c *dashboardServiceClient) GetMe(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/gooseai.DashboardService/GetMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := c.cc.Invoke(ctx, "/gooseai.DashboardService/GetOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*Metrics, error) {
	out := new(Metrics)
	err := c.cc.Invoke(ctx, "/gooseai.DashboardService/GetMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) CreateAPIKey(ctx context.Context, in *APIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := c.cc.Invoke(ctx, "/gooseai.DashboardService/CreateAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) DeleteAPIKey(ctx context.Context, in *APIKeyFindRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := c.cc.Invoke(ctx, "/gooseai.DashboardService/DeleteAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) UpdateDefaultOrganization(ctx context.Context, in *UpdateDefaultOrganizationRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/gooseai.DashboardService/UpdateDefaultOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetClientSettings(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ClientSettings, error) {
	out := new(ClientSettings)
	err := c.cc.Invoke(ctx, "/gooseai.DashboardService/GetClientSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) SetClientSettings(ctx context.Context, in *ClientSettings, opts ...grpc.CallOption) (*ClientSettings, error) {
	out := new(ClientSettings)
	err := c.cc.Invoke(ctx, "/gooseai.DashboardService/SetClientSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/gooseai.DashboardService/UpdateUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) CreatePasswordChangeTicket(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*UserPasswordChangeTicket, error) {
	out := new(UserPasswordChangeTicket)
	err := c.cc.Invoke(ctx, "/gooseai.DashboardService/CreatePasswordChangeTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) DeleteAccount(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/gooseai.DashboardService/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) CreateCharge(ctx context.Context, in *CreateChargeRequest, opts ...grpc.CallOption) (*Charge, error) {
	out := new(Charge)
	err := c.cc.Invoke(ctx, "/gooseai.DashboardService/CreateCharge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetCharges(ctx context.Context, in *GetChargesRequest, opts ...grpc.CallOption) (*Charges, error) {
	out := new(Charges)
	err := c.cc.Invoke(ctx, "/gooseai.DashboardService/GetCharges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) CreateAutoChargeIntent(ctx context.Context, in *CreateAutoChargeIntentRequest, opts ...grpc.CallOption) (*AutoChargeIntent, error) {
	out := new(AutoChargeIntent)
	err := c.cc.Invoke(ctx, "/gooseai.DashboardService/CreateAutoChargeIntent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) UpdateAutoChargeIntent(ctx context.Context, in *CreateAutoChargeIntentRequest, opts ...grpc.CallOption) (*AutoChargeIntent, error) {
	out := new(AutoChargeIntent)
	err := c.cc.Invoke(ctx, "/gooseai.DashboardService/UpdateAutoChargeIntent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardServiceClient) GetAutoChargeIntent(ctx context.Context, in *GetAutoChargeRequest, opts ...grpc.CallOption) (*AutoChargeIntent, error) {
	out := new(AutoChargeIntent)
	err := c.cc.Invoke(ctx, "/gooseai.DashboardService/GetAutoChargeIntent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DashboardServiceServer is the server API for DashboardService service.
// All implementations must embed UnimplementedDashboardServiceServer
// for forward compatibility
type DashboardServiceServer interface {
	// Get info
	GetMe(context.Context, *EmptyRequest) (*User, error)
	GetOrganization(context.Context, *GetOrganizationRequest) (*Organization, error)
	GetMetrics(context.Context, *GetMetricsRequest) (*Metrics, error)
	// API key management
	CreateAPIKey(context.Context, *APIKeyRequest) (*APIKey, error)
	DeleteAPIKey(context.Context, *APIKeyFindRequest) (*APIKey, error)
	// User settings
	UpdateDefaultOrganization(context.Context, *UpdateDefaultOrganizationRequest) (*User, error)
	GetClientSettings(context.Context, *EmptyRequest) (*ClientSettings, error)
	SetClientSettings(context.Context, *ClientSettings) (*ClientSettings, error)
	UpdateUserInfo(context.Context, *UpdateUserInfoRequest) (*User, error)
	CreatePasswordChangeTicket(context.Context, *EmptyRequest) (*UserPasswordChangeTicket, error)
	DeleteAccount(context.Context, *EmptyRequest) (*User, error)
	// Payment functions
	CreateCharge(context.Context, *CreateChargeRequest) (*Charge, error)
	GetCharges(context.Context, *GetChargesRequest) (*Charges, error)
	CreateAutoChargeIntent(context.Context, *CreateAutoChargeIntentRequest) (*AutoChargeIntent, error)
	UpdateAutoChargeIntent(context.Context, *CreateAutoChargeIntentRequest) (*AutoChargeIntent, error)
	GetAutoChargeIntent(context.Context, *GetAutoChargeRequest) (*AutoChargeIntent, error)
	mustEmbedUnimplementedDashboardServiceServer()
}

// UnimplementedDashboardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDashboardServiceServer struct {
}

func (UnimplementedDashboardServiceServer) GetMe(context.Context, *EmptyRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMe not implemented")
}
func (UnimplementedDashboardServiceServer) GetOrganization(context.Context, *GetOrganizationRequest) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedDashboardServiceServer) GetMetrics(context.Context, *GetMetricsRequest) (*Metrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedDashboardServiceServer) CreateAPIKey(context.Context, *APIKeyRequest) (*APIKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAPIKey not implemented")
}
func (UnimplementedDashboardServiceServer) DeleteAPIKey(context.Context, *APIKeyFindRequest) (*APIKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAPIKey not implemented")
}
func (UnimplementedDashboardServiceServer) UpdateDefaultOrganization(context.Context, *UpdateDefaultOrganizationRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDefaultOrganization not implemented")
}
func (UnimplementedDashboardServiceServer) GetClientSettings(context.Context, *EmptyRequest) (*ClientSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientSettings not implemented")
}
func (UnimplementedDashboardServiceServer) SetClientSettings(context.Context, *ClientSettings) (*ClientSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetClientSettings not implemented")
}
func (UnimplementedDashboardServiceServer) UpdateUserInfo(context.Context, *UpdateUserInfoRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}
func (UnimplementedDashboardServiceServer) CreatePasswordChangeTicket(context.Context, *EmptyRequest) (*UserPasswordChangeTicket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePasswordChangeTicket not implemented")
}
func (UnimplementedDashboardServiceServer) DeleteAccount(context.Context, *EmptyRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedDashboardServiceServer) CreateCharge(context.Context, *CreateChargeRequest) (*Charge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCharge not implemented")
}
func (UnimplementedDashboardServiceServer) GetCharges(context.Context, *GetChargesRequest) (*Charges, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCharges not implemented")
}
func (UnimplementedDashboardServiceServer) CreateAutoChargeIntent(context.Context, *CreateAutoChargeIntentRequest) (*AutoChargeIntent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAutoChargeIntent not implemented")
}
func (UnimplementedDashboardServiceServer) UpdateAutoChargeIntent(context.Context, *CreateAutoChargeIntentRequest) (*AutoChargeIntent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAutoChargeIntent not implemented")
}
func (UnimplementedDashboardServiceServer) GetAutoChargeIntent(context.Context, *GetAutoChargeRequest) (*AutoChargeIntent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAutoChargeIntent not implemented")
}
func (UnimplementedDashboardServiceServer) mustEmbedUnimplementedDashboardServiceServer() {}

// UnsafeDashboardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DashboardServiceServer will
// result in compilation errors.
type UnsafeDashboardServiceServer interface {
	mustEmbedUnimplementedDashboardServiceServer()
}

func RegisterDashboardServiceServer(s grpc.ServiceRegistrar, srv DashboardServiceServer) {
	s.RegisterService(&DashboardService_ServiceDesc, srv)
}

func _DashboardService_GetMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooseai.DashboardService/GetMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetMe(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooseai.DashboardService/GetOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetOrganization(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooseai.DashboardService/GetMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetMetrics(ctx, req.(*GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_CreateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).CreateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooseai.DashboardService/CreateAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).CreateAPIKey(ctx, req.(*APIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_DeleteAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIKeyFindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).DeleteAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooseai.DashboardService/DeleteAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).DeleteAPIKey(ctx, req.(*APIKeyFindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_UpdateDefaultOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDefaultOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).UpdateDefaultOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooseai.DashboardService/UpdateDefaultOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).UpdateDefaultOrganization(ctx, req.(*UpdateDefaultOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetClientSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetClientSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooseai.DashboardService/GetClientSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetClientSettings(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_SetClientSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).SetClientSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooseai.DashboardService/SetClientSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).SetClientSettings(ctx, req.(*ClientSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooseai.DashboardService/UpdateUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).UpdateUserInfo(ctx, req.(*UpdateUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_CreatePasswordChangeTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).CreatePasswordChangeTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooseai.DashboardService/CreatePasswordChangeTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).CreatePasswordChangeTicket(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooseai.DashboardService/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).DeleteAccount(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_CreateCharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).CreateCharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooseai.DashboardService/CreateCharge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).CreateCharge(ctx, req.(*CreateChargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetCharges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChargesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetCharges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooseai.DashboardService/GetCharges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetCharges(ctx, req.(*GetChargesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_CreateAutoChargeIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAutoChargeIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).CreateAutoChargeIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooseai.DashboardService/CreateAutoChargeIntent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).CreateAutoChargeIntent(ctx, req.(*CreateAutoChargeIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_UpdateAutoChargeIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAutoChargeIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).UpdateAutoChargeIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooseai.DashboardService/UpdateAutoChargeIntent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).UpdateAutoChargeIntent(ctx, req.(*CreateAutoChargeIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardService_GetAutoChargeIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAutoChargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServiceServer).GetAutoChargeIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gooseai.DashboardService/GetAutoChargeIntent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServiceServer).GetAutoChargeIntent(ctx, req.(*GetAutoChargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DashboardService_ServiceDesc is the grpc.ServiceDesc for DashboardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DashboardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gooseai.DashboardService",
	HandlerType: (*DashboardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMe",
			Handler:    _DashboardService_GetMe_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _DashboardService_GetOrganization_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _DashboardService_GetMetrics_Handler,
		},
		{
			MethodName: "CreateAPIKey",
			Handler:    _DashboardService_CreateAPIKey_Handler,
		},
		{
			MethodName: "DeleteAPIKey",
			Handler:    _DashboardService_DeleteAPIKey_Handler,
		},
		{
			MethodName: "UpdateDefaultOrganization",
			Handler:    _DashboardService_UpdateDefaultOrganization_Handler,
		},
		{
			MethodName: "GetClientSettings",
			Handler:    _DashboardService_GetClientSettings_Handler,
		},
		{
			MethodName: "SetClientSettings",
			Handler:    _DashboardService_SetClientSettings_Handler,
		},
		{
			MethodName: "UpdateUserInfo",
			Handler:    _DashboardService_UpdateUserInfo_Handler,
		},
		{
			MethodName: "CreatePasswordChangeTicket",
			Handler:    _DashboardService_CreatePasswordChangeTicket_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _DashboardService_DeleteAccount_Handler,
		},
		{
			MethodName: "CreateCharge",
			Handler:    _DashboardService_CreateCharge_Handler,
		},
		{
			MethodName: "GetCharges",
			Handler:    _DashboardService_GetCharges_Handler,
		},
		{
			MethodName: "CreateAutoChargeIntent",
			Handler:    _DashboardService_CreateAutoChargeIntent_Handler,
		},
		{
			MethodName: "UpdateAutoChargeIntent",
			Handler:    _DashboardService_UpdateAutoChargeIntent_Handler,
		},
		{
			MethodName: "GetAutoChargeIntent",
			Handler:    _DashboardService_GetAutoChargeIntent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dashboard/dashboard.proto",
}
