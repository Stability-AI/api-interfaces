syntax = 'proto3';
package gooseai;

enum ProjectAccess {
  PROJECT_ACCESS_PRIVATE = 0; // Private access, only owner organization can access
  PROJECT_ACCESS_PUBLIC = 1;  // Public access, anyone can access
}

enum ProjectStatus {
  PROJECT_STATUS_INACTIVE = 0; // Inactive project
  PROJECT_STATUS_ACTIVE = 1;   // Active project
  PROJECT_STATUS_DELETED = 2;  // Deleted project, only set by delete endpoint
}

enum ProjectAssetUse {
  PROJECT_ASSET_USE_UNDEFINED = 0;    // Asset does not have use defined
  PROJECT_ASSET_USE_INPUT = 1;        // Asset is used as an input for the project
  PROJECT_ASSET_USE_OUTPUT = 2;       // Asset is an output from the project
  PROJECT_ASSET_USE_INTERMEDIATE = 3; // Asset is an output from an intermediate step of the project
  PROJECT_ASSET_USE_PROJECT = 4;      // Asset is used as the project file for the project
}

message ProjectAsset {
  string id = 1;            // ID of the asset, UUIDv4
  string uri = 2;          // The URI to the asset
  ProjectAssetUse use = 3; // The use of the asset with respect to the project
}

message Project {
  string id = 1;                      // ID of the project, UUIDv4
  string title = 2;                  // Title of the project
  string owner_id = 3;               // The ID of the organization owning the project
  ProjectAccess access = 4;          // The access of the project (such as public vs private)
  ProjectStatus status = 5;          // The status of the project (such as active vs inactive)
  uint64 size = 6;                   // The size of the project in bytes
  ProjectAsset file = 7;             // Project file for the project
  uint64 created_at = 8;             // Time of project creation (UTC seconds epoch)
  uint64 updated_at = 9;             // Time of last project update (UTC seconds epoch)
  repeated ProjectAsset assets = 10; // The listing of all assets associated with the project
}

message CreateProjectRequest {
  string title = 1;               // title of the project
  optional string owner_id = 2;   // The ID of the organization owning the project, empty for default org for user
  ProjectAccess access = 3;       // The access of the project (such as public vs private)
  ProjectStatus status = 4;       // The status of the project (such as active vs inactive)
  optional ProjectAsset file = 5; // Project file for the project (if existing, else will create)
}

message UpdateProjectRequest {
  string id = 1;                      // ID of the project, UUIDv4
  optional string owner_id = 2;      // The ID of the organization owning the project, empty for default org for user
  optional string title = 3;         // Title of the project
  optional ProjectAccess access = 4; // The access of the project (such as public vs private)
  optional ProjectStatus status = 5; // The status of the project (such as active vs inactive)
  optional ProjectAsset file = 6;    // Project file for the project
}

message ListProjectRequest {
  optional string owner_id = 1; // The ID of the organization owning the project, empty for default org for user
}

message GetProjectRequest {
  string id = 1;                 // ID of the project to request, UUIDv4
  optional string owner_id = 2; // The ID of the organization owning the project, empty for default org for user
}

message DeleteProjectRequest {
  string id = 1;                 // ID of the project to request, UUIDv4
  optional string owner_id = 2; // The ID of the organization owning the project, empty for default org for user
}

//
// gRPC services
//
service ProjectService {
  // Create a new project if it does not exist
  rpc Create (CreateProjectRequest) returns (Project) {};
  // Update an existing project
  rpc Update (UpdateProjectRequest) returns (Project) {};
  // List all the projects for an organization
  rpc List (ListProjectRequest) returns (stream Project) {};
  // Get a project
  rpc Get (GetProjectRequest) returns (Project) {};
  // Delete a project
  rpc Delete (DeleteProjectRequest) returns (Project) {};
}
